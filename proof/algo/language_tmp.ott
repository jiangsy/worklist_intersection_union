
metavar x, y, z ::= {{ repr-locally-nameless }}
metavar ex, ey, ez ::= {{ coq var }}
metavar tx, ty, tz ::= {{ coq var }}


grammar

type, t, A, B :: 'la_type_' ::= 
  | int           ::   :: int
  | forall x . t  ::   :: forall (+ bind x in t +) 
  | t1 -> t2      ::   :: arrow 
  | x             ::   :: var
  | ex            ::   :: tvar
  | tx            ::   :: extvar
  | ( t )         :: S :: paren {{ coq ([[t]]) }}
  | [ t / x ] A   :: M :: susbt {{ coq (open_type_wrt_type [[x A]] [[t]]) }}

typelist, tl :: 'la_typelist_' ::= 
  | tnil   :: :: nil  
  | tl , t :: :: cons 

work, w :: 'la_work_' ::=
  | ex                :: :: tvar 
  | tl <= ^ tx <= tl' :: :: extvar
  | t1 <: t2          :: :: subtyp

worklist, wl :: 'la_worklist_' ::= 
  | wnil                ::   :: nil 
  | wl , w              ::   :: cons
  | wl1 ++ wl2          :: M :: app {{ coq (wl_app [[wl1]] [[wl2]]) }}
  | < tl >              :: M :: single_constraint {{ coq (single_side_constraints [[tl]]) }}
  | < tl1 * tl2 >       :: M :: double_constraint {{ coq (double_side_constraints [[tl1]] [[tl2]])}}
  | wl @ ^ tx +> t      :: M :: update_lb {{ coq (update_lowerbound_in_wl [[t]] [[wl]] [[tx]]) }}
  | wl @ ^ tx <+ t      :: M :: update_ub {{ coq (update_upperbound_in_wl [[t]] [[wl]] [[tx]]) }}
  | wl @ ^ tx << ^ tx1  :: M :: add_before {{ coq (add_var_before [[tx1]] [[wl]] [[tx]])}}


formula :: formula_ ::=
  | judgement                  ::   :: judgement
  | ^ tx # wl                  :: M :: extvar_fresh {{ coq ([[tx]] `notin` (extvar_dom [[wl]])) }}
  | ex # wl                    :: M :: tvar_fresh {{ coq ([[ex]] `notin` (tvar_dom [[wl]])) }}
  | ^ tx $ wl                  :: M :: extvar_in {{ coq ([[tx]] `in` (extvar_dom [[wl]])) }}
  | ex $ wl                    :: M :: tvar_in {{ coq ([[ex]] `in` (tvar_dom [[wl]])) }}
  | wl' := wl <<= ^ tx <:> t   :: M :: reorder {{ coq ([[tx]] `in` (tvardom [[wl']]))}}


substitutions
  single type x :: subst


freevars
  type    x :: fv
  type    ex :: fex
  type    tx :: ftx


embed {{ coq

Fixpoint wl_app (wl1 wl2 : worklist) : worklist :=
  match wl2 with
  | la_worklist_nil => wl1 
  | la_worklist_cons wl2' w2 => la_worklist_cons (wl_app wl1 wl2') w2
  end
.

Fixpoint tvar_dom (wl : worklist) : atoms :=
  match wl with
  | la_worklist_nil => {}
  | la_worklist_cons wl' (la_work_tvar tvar) => add tvar (tvar_dom wl')
  | la_worklist_cons wl' _ => tvar_dom wl'
  end
.

Fixpoint extvar_dom (wl : worklist) : atoms :=
  match wl with
  | la_worklist_nil => {}
  | la_worklist_cons wl' (la_work_extvar _ extvar _) => add extvar (extvar_dom wl')
  | la_worklist_cons wl' _ => extvar_dom wl'
  end
.

Fixpoint update_lowerbound_in_wl (t: type) (wl : worklist) (target : var) : worklist :=
  match wl with 
  | la_worklist_nil => la_worklist_nil
  | la_worklist_cons wl' (la_work_extvar tl extvar tl') => 
    if (eq_dec target extvar) 
      then la_worklist_cons (update_lowerbound_in_wl t wl' target) (la_work_extvar (la_typelist_cons tl t) extvar tl') 
      else la_worklist_cons (update_lowerbound_in_wl t wl' target) (la_work_extvar tl extvar tl')
  | la_worklist_cons wl' w => la_worklist_cons (update_lowerbound_in_wl t wl' target) w
  end
.

Fixpoint update_upperbound_in_wl (t: type) (wl : worklist) (target : var) : worklist :=
  match wl with 
  | la_worklist_nil => la_worklist_nil
  | la_worklist_cons wl' (la_work_extvar tl extvar tl') => 
    if (eq_dec target extvar) 
      then la_worklist_cons (update_upperbound_in_wl t wl' target) (la_work_extvar tl extvar (la_typelist_cons tl' t)) 
      else la_worklist_cons (update_upperbound_in_wl t wl' target) (la_work_extvar tl extvar tl')
  | la_worklist_cons wl' w => la_worklist_cons (update_upperbound_in_wl t wl' target) w
  end
.

Fixpoint add_var_before (v : var) (wl : worklist) (target : var) : worklist :=
  match wl with 
  | la_worklist_nil => la_worklist_nil
  | la_worklist_cons wl' (la_work_extvar tl extvar tl') => 
    if (eq_dec target v) 
      then la_worklist_cons (la_worklist_cons (add_var_before v wl' target) (la_work_extvar la_typelist_nil v la_typelist_nil)) (la_work_extvar tl extvar tl') 
      else la_worklist_cons (add_var_before v wl' target) (la_work_extvar tl extvar tl')
  | la_worklist_cons wl' w => la_worklist_cons (add_var_before v wl' target) w
  end
.

Fixpoint single_side_constraints_helper (t : type) (tl : typelist) : worklist := 
  match tl with
  | la_typelist_nil => la_worklist_nil
  | la_typelist_cons tl' t' => la_worklist_cons (single_side_constraints_helper t' tl') (la_work_subtyp t t')
  end
.

Definition single_side_constraints (tl : typelist) : worklist := 
  match tl with
  | la_typelist_nil => la_worklist_nil
  | la_typelist_cons tl' t => single_side_constraints_helper t tl'
  end
.

Fixpoint double_side_constraints_helper (t : type) (tl : typelist) : worklist :=
  match tl with 
  | la_typelist_nil => la_worklist_nil
  | la_typelist_cons tl' t' => la_worklist_cons (double_side_constraints_helper t tl') (la_work_subtyp t t')
  end
.

Fixpoint double_side_constraints (tl1 tl2 : typelist) : worklist :=
  match tl1 with 
  | la_typelist_nil => la_worklist_nil
  | la_typelist_cons tl1' t1 => wl_app (double_side_constraints tl1' tl2) (double_side_constraints_helper t1 tl2)
  end
.

Fixpoint wl_app_rev (wl1 wl2 : worklist) : worklist :=
  match wl2 with
  | la_worklist_nil => wl1 
  | la_worklist_cons wl2' w2 => wl_app_rev (la_worklist_cons wl1 w2) wl2'
  end
.

(* Inductive reorder : worklist -> var -> type -> worklist -> worklist -> Prop :=
| re_stop : forall Γ ψ x A e
  , x `notin` fex_aexpr e
  → Γ ,′ ^x :′ A ‖ ψ ⊢ ^x ≔ e ⊣ Γ ⫢′ to_wl ψ ,′ ^x :′ A
| re_x_stay : forall Γ x A ψ y e Γ'
  , y `notin` fv_psi ψ `union` fv_aexpr e
  → Γ ‖ ψ ⊢ ^x ≔ e ⊣ Γ'
  → Γ ,′ y :′ A ‖ ψ ⊢ ^x ≔ e ⊣ Γ' ,′ y :′ A
| re_ex_move : forall Γ x A ψ y e Γ'
  , y `in` fex_psi ψ `union` fex_aexpr e
  → Γ ‖ ^y :′ A :: ψ ⊢ ^x ≔ e ⊣ Γ'
  → Γ ,′ ^y :′ A ‖ ψ ⊢ ^x ≔ e ⊣ Γ'
| re_ex_stay : forall Γ x A ψ y e Γ'
  , y `notin` fex_psi ψ `union` fex_aexpr e
  → Γ ‖ ψ ⊢ ^x ≔ e ⊣ Γ'
  → Γ ,′ ^y :′ A ‖ ψ ⊢ ^x ≔ e ⊣ Γ' ,′ ^y :′ A
| re_sub_move : forall Γ k ψ x e Γ'
  , k `in` fkv_psi ψ `union` fkv_aexpr e
  → Γ ‖ ⧼^k⧽ :: ψ ⊢ ^x ≔ e ⊣ Γ'
  → Γ ,′ ⧼^k⧽ ‖ ψ ⊢ ^x ≔ e ⊣ Γ'
| re_sub_stay : forall Γ k ψ x e Γ'
  , k `notin` fkv_psi ψ `union` fkv_aexpr e
  → Γ ‖ ψ ⊢ ^x ≔ e ⊣ Γ'
  → Γ ,′ ⧼^k⧽ ‖ ψ ⊢ ^x ≔ e ⊣ Γ' ,′ ⧼^k⧽
. *)


}}


defns
Monotype :: '' ::=

defn
mono t :: :: mono_type :: 'la_mono_'
by

----------- :: tvar
mono ex

----------- :: extvar
mono ^ tx

------------- :: int
mono int

mono t1
mono t2
----------------- :: arrow
mono (t1 -> t2)


defns
InWorklist :: '' ::=

defn
t in wl :: :: in_wl :: 'la_inworklist_'
by

------------------------------ :: here_tvar
ex in wl , ex

ex in wl
------------------------------ :: there_tvar
ex in wl , w

------------------------------ :: here_extvar
^ tx in wl , tl <= ^ tx <= tl'

------------------------------ :: there_extvar
^ tx in wl , w


defns
InScope :: '' ::=

defn
wl [ t1 ] [ t2 ] :: :: in_scope :: 'la_ins_'
by

t1 in wl
------------------------------------ :: here_var
wl , ex [t1] [ex]

t1 in wl
------------------------------------ :: here_extvar
wl , tl <= ^ tx <= tl' [ t1 ] [ ^ tx ]

wl [ t1 ] [ t2 ]
------------------------------------ :: there_w
wl , w [ t1 ] [ t2 ]



defns 
AlgorithmeticSubtyping :: '' ::=

defn 
|- wl :: :: wl_reducible :: 'la_wlred_'
by

|- wl
------------------------------------------------------------------ :: var
|- wl , ex

|- wl ++ < tl >
------------------------------------------------------------------ :: extvar_unfold_lnil
|- wl , tnil <= ^ tx <= tl

|- wl ++ < tl' >
------------------------------------------------------------------ :: extvar_unfold_unil
|- wl , tl <= ^ tx <= tnil

|- wl ++ < tl * tl' >
------------------------------------------------------------------ :: extvar_unfold
|- wl , tl <= ^ tx <= tl'

|- wl
------------------------------------------------------------------ :: sub_int
|- wl , int <: int

ex $ wl
|- wl
------------------------------------------------------------------ :: sub_tvar
|- wl , ex <: ex

^ tx $ wl
|- wl
------------------------------------------------------------------ :: sub_extvar
|- wl , ^ tx <: ^ tx

ex # wl
|- wl , tnil <= ^ tx <= tnil , [ ex / x ] A <: B
------------------------------------------------------------------ :: sub_forallL
|- wl , forall x. A <: B

ex # wl 
|- wl , ex , [ ex / x ] A <: B
------------------------------------------------------------------ :: sub_forallR
|- wl , A <: forall x. B

|- wl , A2 <: B2 , B1 <: A1
------------------------------------------------------------------ :: sub_arrow_arrow
|- wl , A1 -> A2 <: B1 -> B2

mono (A -> B)
^ tx $ wl
|- wl
------------------------------------------------------------------ :: sub_extvar_arrow_mono
|- wl , ex <: A -> B

mono (A -> B)
^ tx $ wl
wl' := wl <<= ^ tx <:> t 
|- wl' 
------------------------------------------------------------------ :: sub_arrow_extvar_mono
|- wl , A -> B <: ex

^ tx $ wl
^ tx1 # wl 
^ tx2 # wl , tnil <= ^ tx1 <= tnil
|- wl @ ^ tx << ^ tx1 @ ^ tx << ^ tx2 @ ^ tx <+ (^ tx1 -> ^ tx2)
------------------------------------------------------------------ :: sub_extvar_arrow
|- wl , ^ tx <: A -> B

ex $ wl
ex1 # wl 
ex2 # wl , tnil <= ^ tx1 <= tnil
|- wl @ ^ tx << ^ tx1 @ ^ tx << ^ tx2 @ ^ tx +> (^ tx1 -> ^ tx2)
------------------------------------------------------------------ :: sub_arrow_extvar
|- wl , A -> B <: ^ tx

^ tx $ wl
|- wl @ ^ tx +> int
------------------------------------------------------------------ :: sub_int_extvar
|- wl , int <: ^ tx

^ tx $ wl
|- wl @ ^ tx <+ int
------------------------------------------------------------------ :: sub_extvar_int
|- wl , ^ tx <: int

wl [ ex ] [^ ty]
|- wl @ ^ ty +>  ex
------------------------------------------------------------------ :: sub_tvar_extvar
|- wl , ex <: ^ ty

wl [ ex ] [^ ty]
|- wl @ ^ ty <+ ex
------------------------------------------------------------------ :: sub_extvar_tvar
|- wl , ^ ty <: ex

wl [^ tx] [^ ty]
|- wl @ ^ ty +> ^ tx
------------------------------------------------------------------ :: sub_extvar_extvarR
|- wl , ^ tx <: ^ ty

wl [^ tx] [^ ty]
|- wl @ ^ ty <+ ^ tx
------------------------------------------------------------------ :: sub_extvar_extvarL
|- wl , ^ ty <: ^ tx