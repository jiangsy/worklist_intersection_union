(* generated by Ott 0.32, locally-nameless lngen from: uni/language.ott *)
Require Import Bool.
Require Import Metalib.Metatheory.
Require Import List.
(** syntax *)
Definition typvar : Set := var.
Definition expvar : Set := var.

Inductive typ : Set := 
 | typ_unit : typ
 | typ_top : typ
 | typ_bot : typ
 | typ_var_b (_:nat)
 | typ_var_f (X:typvar)
 | typ_arrow (A1:typ) (A2:typ)
 | typ_all (A:typ)
 | typ_union (A1:typ) (A2:typ)
 | typ_intersection (A1:typ) (A2:typ).

Inductive body : Set := 
 | body_anno (e:exp) (A:typ)
with exp : Set := 
 | exp_unit : exp
 | exp_var_b (_:nat)
 | exp_var_f (x:expvar)
 | exp_abs (e:exp)
 | exp_app (e1:exp) (e2:exp)
 | exp_tabs (body5:body)
 | exp_tapp (e:exp) (A:typ)
 | exp_anno (e:exp) (A:typ).

Inductive cont : Set := 
 | cont_infabs (c:cont)
 | cont_infabsunion (A1:typ) (c:cont)
 | cont_infapp (e:exp) (c:cont)
 | cont_inftapp (A:typ) (c:cont)
 | cont_inftappunion (A1:typ) (A2:typ) (c:cont)
 | cont_unioninftapp (A2:typ) (c:cont)
 | cont_unioninfabs (A2:typ) (c:cont)
 | cont_sub (A:typ).

Inductive dbind : Set := 
 | dbind_tvar_empty : dbind
 | dbind_stvar_empty : dbind
 | dbind_typ (A:typ).

Inductive work : Set := 
 | work_infer (e:exp) (c:cont)
 | work_check (e:exp) (A:typ)
 | work_infabs (A:typ) (c:cont)
 | work_infabsunion (A1:typ) (A2:typ) (c:cont)
 | work_infapp (A:typ) (e:exp) (c:cont)
 | work_inftapp (A1:typ) (A2:typ) (c:cont)
 | work_sub (A1:typ) (A2:typ)
 | work_inftappunion (A1:typ) (A2:typ) (B:typ) (c:cont)
 | work_unioninftapp (A1:typ) (A2:typ) (c:cont)
 | work_unioninfabs (A1:typ) (A2:typ) (c:cont)
 | work_apply (c:cont) (A:typ).

Inductive abind : Set := 
 | abind_tvar_empty : abind
 | abind_stvar_empty : abind
 | abind_typ (A:typ)
 | abind_bound (A1:typ) (B1:typ).

Inductive dvalue : Set := 
 | dvalue_unit : dvalue
 | dvalue_abs (e:exp)
 | dvalue_tabs (body5:body).

Inductive dworklist : Set := 
 | dworklist_empty : dworklist
 | dworklist_consvar (Ω:dworklist) (x:expvar) (db:dbind)
 | dworklist_constvar (Ω:dworklist) (X:typvar) (db:dbind)
 | dworklist_conswork (Ω:dworklist) (w:work).

Definition aenv : Set := list (atom*abind).

Inductive aworklist : Set := 
 | aworklist_empty : aworklist
 | aworklist_consvar (aW:aworklist) (x:expvar) (ab:abind)
 | aworklist_constvar (aW:aworklist) (X:typvar) (ab:abind)
 | aworklist_conswork (aW:aworklist) (w:work).

Definition denv : Set := list (atom*dbind).

(* EXPERIMENTAL *)
(** auxiliary functions on the new list types *)
(** library functions *)
(** subrules *)
(** arities *)
(** opening up abstractions *)
Fixpoint open_typ_wrt_typ_rec (k:nat) (A_5:typ) (A__6:typ) {struct A__6}: typ :=
  match A__6 with
  | typ_unit => typ_unit 
  | typ_top => typ_top 
  | typ_bot => typ_bot 
  | (typ_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => typ_var_b nat
        | inleft (right _) => A_5
        | inright _ => typ_var_b (nat - 1)
      end
  | (typ_var_f X) => typ_var_f X
  | (typ_arrow A1 A2) => typ_arrow (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2)
  | (typ_all A) => typ_all (open_typ_wrt_typ_rec (S k) A_5 A)
  | (typ_union A1 A2) => typ_union (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2)
  | (typ_intersection A1 A2) => typ_intersection (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2)
end.

Fixpoint open_exp_wrt_typ_rec (k:nat) (A_5:typ) (e_5:exp) {struct e_5}: exp :=
  match e_5 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs e) => exp_abs (open_exp_wrt_typ_rec k A_5 e)
  | (exp_app e1 e2) => exp_app (open_exp_wrt_typ_rec k A_5 e1) (open_exp_wrt_typ_rec k A_5 e2)
  | (exp_tabs body5) => exp_tabs (open_body_wrt_typ_rec (S k) A_5 body5)
  | (exp_tapp e A) => exp_tapp (open_exp_wrt_typ_rec k A_5 e) (open_typ_wrt_typ_rec k A_5 A)
  | (exp_anno e A) => exp_anno (open_exp_wrt_typ_rec k A_5 e) (open_typ_wrt_typ_rec k A_5 A)
end
with open_body_wrt_typ_rec (k:nat) (A5:typ) (body5:body) : body :=
  match body5 with
  | (body_anno e A) => body_anno (open_exp_wrt_typ_rec k A5 e) (open_typ_wrt_typ_rec k A5 A)
end.

Fixpoint open_exp_wrt_exp_rec (k:nat) (e_5:exp) (e__6:exp) {struct e__6}: exp :=
  match e__6 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => exp_var_b nat
        | inleft (right _) => e_5
        | inright _ => exp_var_b (nat - 1)
      end
  | (exp_var_f x) => exp_var_f x
  | (exp_abs e) => exp_abs (open_exp_wrt_exp_rec (S k) e_5 e)
  | (exp_app e1 e2) => exp_app (open_exp_wrt_exp_rec k e_5 e1) (open_exp_wrt_exp_rec k e_5 e2)
  | (exp_tabs body5) => exp_tabs (open_body_wrt_exp_rec k e_5 body5)
  | (exp_tapp e A) => exp_tapp (open_exp_wrt_exp_rec k e_5 e) A
  | (exp_anno e A) => exp_anno (open_exp_wrt_exp_rec k e_5 e) A
end
with open_body_wrt_exp_rec (k:nat) (e5:exp) (body5:body) : body :=
  match body5 with
  | (body_anno e A) => body_anno (open_exp_wrt_exp_rec k e5 e) A
end.

Fixpoint open_cont_wrt_typ_rec (k:nat) (A_5:typ) (c5:cont) {struct c5}: cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (open_cont_wrt_typ_rec k A_5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion (open_typ_wrt_typ_rec k A_5 A1) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_infapp e c) => cont_infapp (open_exp_wrt_typ_rec k A_5 e) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_inftapp A c) => cont_inftapp (open_typ_wrt_typ_rec k A_5 A) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (cont_sub A) => cont_sub (open_typ_wrt_typ_rec k A_5 A)
end.

Fixpoint open_cont_wrt_exp_rec (k:nat) (e5:exp) (c5:cont) {struct c5}: cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (open_cont_wrt_exp_rec k e5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion A1 (open_cont_wrt_exp_rec k e5 c)
  | (cont_infapp e c) => cont_infapp (open_exp_wrt_exp_rec k e5 e) (open_cont_wrt_exp_rec k e5 c)
  | (cont_inftapp A c) => cont_inftapp A (open_cont_wrt_exp_rec k e5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion A1 A2 (open_cont_wrt_exp_rec k e5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp A2 (open_cont_wrt_exp_rec k e5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs A2 (open_cont_wrt_exp_rec k e5 c)
  | (cont_sub A) => cont_sub A
end.

Definition open_work_wrt_typ_rec (k:nat) (A_5:typ) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (open_exp_wrt_typ_rec k A_5 e) (open_cont_wrt_typ_rec k A_5 c)
  | (work_check e A) => work_check (open_exp_wrt_typ_rec k A_5 e) (open_typ_wrt_typ_rec k A_5 A)
  | (work_infabs A c) => work_infabs (open_typ_wrt_typ_rec k A_5 A) (open_cont_wrt_typ_rec k A_5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (work_infapp A e c) => work_infapp (open_typ_wrt_typ_rec k A_5 A) (open_exp_wrt_typ_rec k A_5 e) (open_cont_wrt_typ_rec k A_5 c)
  | (work_inftapp A1 A2 c) => work_inftapp (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (work_sub A1 A2) => work_sub (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2)
  | (work_inftappunion A1 A2 B c) => work_inftappunion (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_typ_wrt_typ_rec k A_5 B) (open_cont_wrt_typ_rec k A_5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 A2) (open_cont_wrt_typ_rec k A_5 c)
  | (work_apply c A) => work_apply (open_cont_wrt_typ_rec k A_5 c) (open_typ_wrt_typ_rec k A_5 A)
end.

Definition open_abind_wrt_typ_rec (k:nat) (A_5:typ) (ab5:abind) : abind :=
  match ab5 with
  | abind_tvar_empty => abind_tvar_empty 
  | abind_stvar_empty => abind_stvar_empty 
  | (abind_typ A) => abind_typ (open_typ_wrt_typ_rec k A_5 A)
  | (abind_bound A1 B1) => abind_bound (open_typ_wrt_typ_rec k A_5 A1) (open_typ_wrt_typ_rec k A_5 B1)
end.

Definition open_work_wrt_exp_rec (k:nat) (e5:exp) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (open_exp_wrt_exp_rec k e5 e) (open_cont_wrt_exp_rec k e5 c)
  | (work_check e A) => work_check (open_exp_wrt_exp_rec k e5 e) A
  | (work_infabs A c) => work_infabs A (open_cont_wrt_exp_rec k e5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion A1 A2 (open_cont_wrt_exp_rec k e5 c)
  | (work_infapp A e c) => work_infapp A (open_exp_wrt_exp_rec k e5 e) (open_cont_wrt_exp_rec k e5 c)
  | (work_inftapp A1 A2 c) => work_inftapp A1 A2 (open_cont_wrt_exp_rec k e5 c)
  | (work_sub A1 A2) => work_sub A1 A2
  | (work_inftappunion A1 A2 B c) => work_inftappunion A1 A2 B (open_cont_wrt_exp_rec k e5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp A1 A2 (open_cont_wrt_exp_rec k e5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs A1 A2 (open_cont_wrt_exp_rec k e5 c)
  | (work_apply c A) => work_apply (open_cont_wrt_exp_rec k e5 c) A
end.

Definition open_dbind_wrt_typ_rec (k:nat) (A5:typ) (db5:dbind) : dbind :=
  match db5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ A) => dbind_typ (open_typ_wrt_typ_rec k A5 A)
end.

Fixpoint open_aworklist_wrt_typ_rec (k:nat) (A5:typ) (aW_5:aworklist) {struct aW_5}: aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (open_aworklist_wrt_typ_rec k A5 aW) x (open_abind_wrt_typ_rec k A5 ab)
  | (aworklist_constvar aW X ab) => aworklist_constvar (open_aworklist_wrt_typ_rec k A5 aW) X (open_abind_wrt_typ_rec k A5 ab)
  | (aworklist_conswork aW w) => aworklist_conswork (open_aworklist_wrt_typ_rec k A5 aW) (open_work_wrt_typ_rec k A5 w)
end.

Fixpoint open_dworklist_wrt_exp_rec (k:nat) (e5:exp) (Ω5:dworklist) {struct Ω5}: dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (open_dworklist_wrt_exp_rec k e5 Ω) x db
  | (dworklist_constvar Ω X db) => dworklist_constvar (open_dworklist_wrt_exp_rec k e5 Ω) X db
  | (dworklist_conswork Ω w) => dworklist_conswork (open_dworklist_wrt_exp_rec k e5 Ω) (open_work_wrt_exp_rec k e5 w)
end.

Definition open_dvalue_wrt_typ_rec (k:nat) (A5:typ) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (open_exp_wrt_typ_rec k A5 e)
  | (dvalue_tabs body5) => dvalue_tabs (open_body_wrt_typ_rec (S k) A5 body5)
end.

Fixpoint open_aworklist_wrt_exp_rec (k:nat) (e5:exp) (aW_5:aworklist) {struct aW_5}: aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (open_aworklist_wrt_exp_rec k e5 aW) x ab
  | (aworklist_constvar aW X ab) => aworklist_constvar (open_aworklist_wrt_exp_rec k e5 aW) X ab
  | (aworklist_conswork aW w) => aworklist_conswork (open_aworklist_wrt_exp_rec k e5 aW) (open_work_wrt_exp_rec k e5 w)
end.

Definition open_dvalue_wrt_exp_rec (k:nat) (e5:exp) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (open_exp_wrt_exp_rec (S k) e5 e)
  | (dvalue_tabs body5) => dvalue_tabs (open_body_wrt_exp_rec k e5 body5)
end.

Fixpoint open_dworklist_wrt_typ_rec (k:nat) (A5:typ) (Ω5:dworklist) {struct Ω5}: dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (open_dworklist_wrt_typ_rec k A5 Ω) x (open_dbind_wrt_typ_rec k A5 db)
  | (dworklist_constvar Ω X db) => dworklist_constvar (open_dworklist_wrt_typ_rec k A5 Ω) X (open_dbind_wrt_typ_rec k A5 db)
  | (dworklist_conswork Ω w) => dworklist_conswork (open_dworklist_wrt_typ_rec k A5 Ω) (open_work_wrt_typ_rec k A5 w)
end.

Definition open_aworklist_wrt_typ A5 aW_5 := open_aworklist_wrt_typ_rec 0 aW_5 A5.

Definition open_exp_wrt_exp e_5 e__6 := open_exp_wrt_exp_rec 0 e__6 e_5.

Definition open_body_wrt_exp e5 body5 := open_body_wrt_exp_rec 0 body5 e5.

Definition open_dworklist_wrt_exp e5 Ω5 := open_dworklist_wrt_exp_rec 0 Ω5 e5.

Definition open_exp_wrt_typ A_5 e_5 := open_exp_wrt_typ_rec 0 e_5 A_5.

Definition open_cont_wrt_typ A_5 c5 := open_cont_wrt_typ_rec 0 c5 A_5.

Definition open_cont_wrt_exp e5 c5 := open_cont_wrt_exp_rec 0 c5 e5.

Definition open_dvalue_wrt_typ A5 v5 := open_dvalue_wrt_typ_rec 0 v5 A5.

Definition open_dbind_wrt_typ A5 db5 := open_dbind_wrt_typ_rec 0 db5 A5.

Definition open_abind_wrt_typ A_5 ab5 := open_abind_wrt_typ_rec 0 ab5 A_5.

Definition open_work_wrt_typ A_5 w5 := open_work_wrt_typ_rec 0 w5 A_5.

Definition open_body_wrt_typ A5 body5 := open_body_wrt_typ_rec 0 body5 A5.

Definition open_work_wrt_exp e5 w5 := open_work_wrt_exp_rec 0 w5 e5.

Definition open_typ_wrt_typ A_5 A__6 := open_typ_wrt_typ_rec 0 A__6 A_5.

Definition open_aworklist_wrt_exp e5 aW_5 := open_aworklist_wrt_exp_rec 0 aW_5 e5.

Definition open_dvalue_wrt_exp e5 v5 := open_dvalue_wrt_exp_rec 0 v5 e5.

Definition open_dworklist_wrt_typ A5 Ω5 := open_dworklist_wrt_typ_rec 0 Ω5 A5.

(** closing up abstractions *)
Fixpoint close_typ_wrt_typ_rec (k:nat) (A_5:var) (A__6:typ) {struct A__6}: typ :=
  match A__6 with
  | typ_unit => typ_unit 
  | typ_top => typ_top 
  | typ_bot => typ_bot 
  | (typ_var_b nat) => 
       if (lt_dec nat k) 
         then typ_var_b nat
         else typ_var_b (S nat)
  | (typ_var_f X) => if (A_5 === X) then (typ_var_b k) else (typ_var_f X)
  | (typ_arrow A1 A2) => typ_arrow (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2)
  | (typ_all A) => typ_all (close_typ_wrt_typ_rec (S k) A_5 A)
  | (typ_union A1 A2) => typ_union (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2)
  | (typ_intersection A1 A2) => typ_intersection (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2)
end.

Fixpoint close_exp_wrt_typ_rec (k:nat) (A_5:var) (e_5:exp) {struct e_5}: exp :=
  match e_5 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs e) => exp_abs (close_exp_wrt_typ_rec k A_5 e)
  | (exp_app e1 e2) => exp_app (close_exp_wrt_typ_rec k A_5 e1) (close_exp_wrt_typ_rec k A_5 e2)
  | (exp_tabs body5) => exp_tabs (close_body_wrt_typ_rec (S k) A_5 body5)
  | (exp_tapp e A) => exp_tapp (close_exp_wrt_typ_rec k A_5 e) (close_typ_wrt_typ_rec k A_5 A)
  | (exp_anno e A) => exp_anno (close_exp_wrt_typ_rec k A_5 e) (close_typ_wrt_typ_rec k A_5 A)
end
with close_body_wrt_typ_rec (k:nat) (A5:var) (body5:body) : body :=
  match body5 with
  | (body_anno e A) => body_anno (close_exp_wrt_typ_rec k A5 e) (close_typ_wrt_typ_rec k A5 A)
end.

Fixpoint close_exp_wrt_exp_rec (k:nat) (e_5:var) (e__6:exp) {struct e__6}: exp :=
  match e__6 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => 
       if (lt_dec nat k) 
         then exp_var_b nat
         else exp_var_b (S nat)
  | (exp_var_f x) => if (e_5 === x) then (exp_var_b k) else (exp_var_f x)
  | (exp_abs e) => exp_abs (close_exp_wrt_exp_rec (S k) e_5 e)
  | (exp_app e1 e2) => exp_app (close_exp_wrt_exp_rec k e_5 e1) (close_exp_wrt_exp_rec k e_5 e2)
  | (exp_tabs body5) => exp_tabs (close_body_wrt_exp_rec k e_5 body5)
  | (exp_tapp e A) => exp_tapp (close_exp_wrt_exp_rec k e_5 e) A
  | (exp_anno e A) => exp_anno (close_exp_wrt_exp_rec k e_5 e) A
end
with close_body_wrt_exp_rec (k:nat) (e5:var) (body5:body) : body :=
  match body5 with
  | (body_anno e A) => body_anno (close_exp_wrt_exp_rec k e5 e) A
end.

Fixpoint close_cont_wrt_typ_rec (k:nat) (A_5:var) (c5:cont) {struct c5}: cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (close_cont_wrt_typ_rec k A_5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion (close_typ_wrt_typ_rec k A_5 A1) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_infapp e c) => cont_infapp (close_exp_wrt_typ_rec k A_5 e) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_inftapp A c) => cont_inftapp (close_typ_wrt_typ_rec k A_5 A) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (cont_sub A) => cont_sub (close_typ_wrt_typ_rec k A_5 A)
end.

Fixpoint close_cont_wrt_exp_rec (k:nat) (e5:var) (c5:cont) {struct c5}: cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (close_cont_wrt_exp_rec k e5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion A1 (close_cont_wrt_exp_rec k e5 c)
  | (cont_infapp e c) => cont_infapp (close_exp_wrt_exp_rec k e5 e) (close_cont_wrt_exp_rec k e5 c)
  | (cont_inftapp A c) => cont_inftapp A (close_cont_wrt_exp_rec k e5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion A1 A2 (close_cont_wrt_exp_rec k e5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp A2 (close_cont_wrt_exp_rec k e5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs A2 (close_cont_wrt_exp_rec k e5 c)
  | (cont_sub A) => cont_sub A
end.

Definition close_abind_wrt_typ_rec (k:nat) (A_5:var) (ab5:abind) : abind :=
  match ab5 with
  | abind_tvar_empty => abind_tvar_empty 
  | abind_stvar_empty => abind_stvar_empty 
  | (abind_typ A) => abind_typ (close_typ_wrt_typ_rec k A_5 A)
  | (abind_bound A1 B1) => abind_bound (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 B1)
end.

Definition close_work_wrt_typ_rec (k:nat) (A_5:var) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (close_exp_wrt_typ_rec k A_5 e) (close_cont_wrt_typ_rec k A_5 c)
  | (work_check e A) => work_check (close_exp_wrt_typ_rec k A_5 e) (close_typ_wrt_typ_rec k A_5 A)
  | (work_infabs A c) => work_infabs (close_typ_wrt_typ_rec k A_5 A) (close_cont_wrt_typ_rec k A_5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (work_infapp A e c) => work_infapp (close_typ_wrt_typ_rec k A_5 A) (close_exp_wrt_typ_rec k A_5 e) (close_cont_wrt_typ_rec k A_5 c)
  | (work_inftapp A1 A2 c) => work_inftapp (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (work_sub A1 A2) => work_sub (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2)
  | (work_inftappunion A1 A2 B c) => work_inftappunion (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_typ_wrt_typ_rec k A_5 B) (close_cont_wrt_typ_rec k A_5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs (close_typ_wrt_typ_rec k A_5 A1) (close_typ_wrt_typ_rec k A_5 A2) (close_cont_wrt_typ_rec k A_5 c)
  | (work_apply c A) => work_apply (close_cont_wrt_typ_rec k A_5 c) (close_typ_wrt_typ_rec k A_5 A)
end.

Definition close_dbind_wrt_typ_rec (k:nat) (A5:var) (db5:dbind) : dbind :=
  match db5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ A) => dbind_typ (close_typ_wrt_typ_rec k A5 A)
end.

Definition close_work_wrt_exp_rec (k:nat) (e5:var) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (close_exp_wrt_exp_rec k e5 e) (close_cont_wrt_exp_rec k e5 c)
  | (work_check e A) => work_check (close_exp_wrt_exp_rec k e5 e) A
  | (work_infabs A c) => work_infabs A (close_cont_wrt_exp_rec k e5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion A1 A2 (close_cont_wrt_exp_rec k e5 c)
  | (work_infapp A e c) => work_infapp A (close_exp_wrt_exp_rec k e5 e) (close_cont_wrt_exp_rec k e5 c)
  | (work_inftapp A1 A2 c) => work_inftapp A1 A2 (close_cont_wrt_exp_rec k e5 c)
  | (work_sub A1 A2) => work_sub A1 A2
  | (work_inftappunion A1 A2 B c) => work_inftappunion A1 A2 B (close_cont_wrt_exp_rec k e5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp A1 A2 (close_cont_wrt_exp_rec k e5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs A1 A2 (close_cont_wrt_exp_rec k e5 c)
  | (work_apply c A) => work_apply (close_cont_wrt_exp_rec k e5 c) A
end.

Fixpoint close_aworklist_wrt_typ_rec (k:nat) (A5:var) (aW_5:aworklist) {struct aW_5}: aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (close_aworklist_wrt_typ_rec k A5 aW) x (close_abind_wrt_typ_rec k A5 ab)
  | (aworklist_constvar aW X ab) => aworklist_constvar (close_aworklist_wrt_typ_rec k A5 aW) X (close_abind_wrt_typ_rec k A5 ab)
  | (aworklist_conswork aW w) => aworklist_conswork (close_aworklist_wrt_typ_rec k A5 aW) (close_work_wrt_typ_rec k A5 w)
end.

Definition close_dvalue_wrt_exp_rec (k:nat) (e5:var) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (close_exp_wrt_exp_rec (S k) e5 e)
  | (dvalue_tabs body5) => dvalue_tabs (close_body_wrt_exp_rec k e5 body5)
end.

Fixpoint close_dworklist_wrt_typ_rec (k:nat) (A5:var) (Ω5:dworklist) {struct Ω5}: dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (close_dworklist_wrt_typ_rec k A5 Ω) x (close_dbind_wrt_typ_rec k A5 db)
  | (dworklist_constvar Ω X db) => dworklist_constvar (close_dworklist_wrt_typ_rec k A5 Ω) X (close_dbind_wrt_typ_rec k A5 db)
  | (dworklist_conswork Ω w) => dworklist_conswork (close_dworklist_wrt_typ_rec k A5 Ω) (close_work_wrt_typ_rec k A5 w)
end.

Fixpoint close_dworklist_wrt_exp_rec (k:nat) (e5:var) (Ω5:dworklist) {struct Ω5}: dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (close_dworklist_wrt_exp_rec k e5 Ω) x db
  | (dworklist_constvar Ω X db) => dworklist_constvar (close_dworklist_wrt_exp_rec k e5 Ω) X db
  | (dworklist_conswork Ω w) => dworklist_conswork (close_dworklist_wrt_exp_rec k e5 Ω) (close_work_wrt_exp_rec k e5 w)
end.

Fixpoint close_aworklist_wrt_exp_rec (k:nat) (e5:var) (aW_5:aworklist) {struct aW_5}: aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (close_aworklist_wrt_exp_rec k e5 aW) x ab
  | (aworklist_constvar aW X ab) => aworklist_constvar (close_aworklist_wrt_exp_rec k e5 aW) X ab
  | (aworklist_conswork aW w) => aworklist_conswork (close_aworklist_wrt_exp_rec k e5 aW) (close_work_wrt_exp_rec k e5 w)
end.

Definition close_dvalue_wrt_typ_rec (k:nat) (A5:var) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (close_exp_wrt_typ_rec k A5 e)
  | (dvalue_tabs body5) => dvalue_tabs (close_body_wrt_typ_rec (S k) A5 body5)
end.

Definition close_exp_wrt_exp e__6 e_5 := close_exp_wrt_exp_rec 0 e__6 e_5.

Definition close_cont_wrt_exp c5 e5 := close_cont_wrt_exp_rec 0 c5 e5.

Definition close_exp_wrt_typ e_5 A_5 := close_exp_wrt_typ_rec 0 e_5 A_5.

Definition close_aworklist_wrt_typ aW_5 A5 := close_aworklist_wrt_typ_rec 0 aW_5 A5.

Definition close_body_wrt_exp body5 e5 := close_body_wrt_exp_rec 0 body5 e5.

Definition close_dvalue_wrt_exp v5 e5 := close_dvalue_wrt_exp_rec 0 v5 e5.

Definition close_dworklist_wrt_typ Ω5 A5 := close_dworklist_wrt_typ_rec 0 Ω5 A5.

Definition close_dworklist_wrt_exp Ω5 e5 := close_dworklist_wrt_exp_rec 0 Ω5 e5.

Definition close_body_wrt_typ body5 A5 := close_body_wrt_typ_rec 0 body5 A5.

Definition close_aworklist_wrt_exp aW_5 e5 := close_aworklist_wrt_exp_rec 0 aW_5 e5.

Definition close_dvalue_wrt_typ v5 A5 := close_dvalue_wrt_typ_rec 0 v5 A5.

Definition close_cont_wrt_typ c5 A_5 := close_cont_wrt_typ_rec 0 c5 A_5.

Definition close_work_wrt_typ w5 A_5 := close_work_wrt_typ_rec 0 w5 A_5.

Definition close_abind_wrt_typ ab5 A_5 := close_abind_wrt_typ_rec 0 ab5 A_5.

Definition close_work_wrt_exp w5 e5 := close_work_wrt_exp_rec 0 w5 e5.

Definition close_dbind_wrt_typ db5 A5 := close_dbind_wrt_typ_rec 0 db5 A5.

Definition close_typ_wrt_typ A__6 A_5 := close_typ_wrt_typ_rec 0 A__6 A_5.

(** terms are locally-closed pre-terms *)
(** definitions *)

(* defns LC_typ *)
Inductive lc_typ : typ -> Prop :=    (* defn lc_typ *)
 | lc_typ_unit : 
     (lc_typ typ_unit)
 | lc_typ_top : 
     (lc_typ typ_top)
 | lc_typ_bot : 
     (lc_typ typ_bot)
 | lc_typ_var_f : forall (X:typvar),
     (lc_typ (typ_var_f X))
 | lc_typ_arrow : forall (A1 A2:typ),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_typ (typ_arrow A1 A2))
 | lc_typ_all : forall (A:typ),
      ( forall X , lc_typ  ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
     (lc_typ (typ_all A))
 | lc_typ_union : forall (A1 A2:typ),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_typ (typ_union A1 A2))
 | lc_typ_intersection : forall (A1 A2:typ),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_typ (typ_intersection A1 A2)).

(* defns LC_exp_body *)
Inductive lc_exp : exp -> Prop :=    (* defn lc_exp *)
 | lc_exp_unit : 
     (lc_exp exp_unit)
 | lc_exp_var_f : forall (x:expvar),
     (lc_exp (exp_var_f x))
 | lc_exp_abs : forall (e:exp),
      ( forall x , lc_exp  ( open_exp_wrt_exp e (exp_var_f x) )  )  ->
     (lc_exp (exp_abs e))
 | lc_exp_app : forall (e1 e2:exp),
     (lc_exp e1) ->
     (lc_exp e2) ->
     (lc_exp (exp_app e1 e2))
 | lc_exp_tabs : forall (body5:body),
      ( forall X , lc_body  ( open_body_wrt_typ body5 (typ_var_f X) )  )  ->
     (lc_exp (exp_tabs body5))
 | lc_exp_tapp : forall (e:exp) (A:typ),
     (lc_exp e) ->
     (lc_typ A) ->
     (lc_exp (exp_tapp e A))
 | lc_exp_anno : forall (e:exp) (A:typ),
     (lc_exp e) ->
     (lc_typ A) ->
     (lc_exp (exp_anno e A))
with lc_body : body -> Prop :=    (* defn lc_body *)
 | lc_body_anno : forall (e:exp) (A:typ),
     (lc_exp e) ->
     (lc_typ A) ->
     (lc_body (body_anno e A)).

(* defns LC_cont *)
Inductive lc_cont : cont -> Prop :=    (* defn lc_cont *)
 | lc_cont_infabs : forall (c:cont),
     (lc_cont c) ->
     (lc_cont (cont_infabs c))
 | lc_cont_infabsunion : forall (A1:typ) (c:cont),
     (lc_typ A1) ->
     (lc_cont c) ->
     (lc_cont (cont_infabsunion A1 c))
 | lc_cont_infapp : forall (e:exp) (c:cont),
     (lc_exp e) ->
     (lc_cont c) ->
     (lc_cont (cont_infapp e c))
 | lc_cont_inftapp : forall (A:typ) (c:cont),
     (lc_typ A) ->
     (lc_cont c) ->
     (lc_cont (cont_inftapp A c))
 | lc_cont_inftappunion : forall (A1 A2:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_cont (cont_inftappunion A1 A2 c))
 | lc_cont_unioninftapp : forall (A2:typ) (c:cont),
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_cont (cont_unioninftapp A2 c))
 | lc_cont_unioninfabs : forall (A2:typ) (c:cont),
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_cont (cont_unioninfabs A2 c))
 | lc_cont_sub : forall (A:typ),
     (lc_typ A) ->
     (lc_cont (cont_sub A)).

(* defns LC_dbind *)
Inductive lc_dbind : dbind -> Prop :=    (* defn lc_dbind *)
 | lc_dbind_tvar_empty : 
     (lc_dbind dbind_tvar_empty)
 | lc_dbind_stvar_empty : 
     (lc_dbind dbind_stvar_empty)
 | lc_dbind_typ : forall (A:typ),
     (lc_typ A) ->
     (lc_dbind (dbind_typ A)).

(* defns LC_work *)
Inductive lc_work : work -> Prop :=    (* defn lc_work *)
 | lc_work_infer : forall (e:exp) (c:cont),
     (lc_exp e) ->
     (lc_cont c) ->
     (lc_work (work_infer e c))
 | lc_work_check : forall (e:exp) (A:typ),
     (lc_exp e) ->
     (lc_typ A) ->
     (lc_work (work_check e A))
 | lc_work_infabs : forall (A:typ) (c:cont),
     (lc_typ A) ->
     (lc_cont c) ->
     (lc_work (work_infabs A c))
 | lc_work_infabsunion : forall (A1 A2:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_work (work_infabsunion A1 A2 c))
 | lc_work_infapp : forall (A:typ) (e:exp) (c:cont),
     (lc_typ A) ->
     (lc_exp e) ->
     (lc_cont c) ->
     (lc_work (work_infapp A e c))
 | lc_work_inftapp : forall (A1 A2:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_work (work_inftapp A1 A2 c))
 | lc_work_sub : forall (A1 A2:typ),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_work (work_sub A1 A2))
 | lc_work_inftappunion : forall (A1 A2 B:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_typ B) ->
     (lc_cont c) ->
     (lc_work (work_inftappunion A1 A2 B c))
 | lc_work_unioninftapp : forall (A1 A2:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_work (work_unioninftapp A1 A2 c))
 | lc_work_unioninfabs : forall (A1 A2:typ) (c:cont),
     (lc_typ A1) ->
     (lc_typ A2) ->
     (lc_cont c) ->
     (lc_work (work_unioninfabs A1 A2 c))
 | lc_work_apply : forall (c:cont) (A:typ),
     (lc_cont c) ->
     (lc_typ A) ->
     (lc_work (work_apply c A)).

(* defns LC_abind *)
Inductive lc_abind : abind -> Prop :=    (* defn lc_abind *)
 | lc_abind_tvar_empty : 
     (lc_abind abind_tvar_empty)
 | lc_abind_stvar_empty : 
     (lc_abind abind_stvar_empty)
 | lc_abind_typ : forall (A:typ),
     (lc_typ A) ->
     (lc_abind (abind_typ A))
 | lc_abind_bound : forall (A1 B1:typ),
     (lc_typ A1) ->
     (lc_typ B1) ->
     (lc_abind (abind_bound A1 B1)).

(* defns LC_dvalue *)
Inductive lc_dvalue : dvalue -> Prop :=    (* defn lc_dvalue *)
 | lc_dvalue_unit : 
     (lc_dvalue dvalue_unit)
 | lc_dvalue_abs : forall (e:exp),
      ( forall x , lc_exp  ( open_exp_wrt_exp e (exp_var_f x) )  )  ->
     (lc_dvalue (dvalue_abs e))
 | lc_dvalue_tabs : forall (body5:body),
      ( forall X , lc_body  ( open_body_wrt_typ body5 (typ_var_f X) )  )  ->
     (lc_dvalue (dvalue_tabs body5)).

(* defns LC_dworklist *)
Inductive lc_dworklist : dworklist -> Prop :=    (* defn lc_dworklist *)
 | lc_dworklist_empty : 
     (lc_dworklist dworklist_empty)
 | lc_dworklist_consvar : forall (Ω:dworklist) (x:expvar) (db:dbind),
     (lc_dworklist Ω) ->
     (lc_dbind db) ->
     (lc_dworklist (dworklist_consvar Ω x db))
 | lc_dworklist_constvar : forall (Ω:dworklist) (X:typvar) (db:dbind),
     (lc_dworklist Ω) ->
     (lc_dbind db) ->
     (lc_dworklist (dworklist_constvar Ω X db))
 | lc_dworklist_conswork : forall (Ω:dworklist) (w:work),
     (lc_dworklist Ω) ->
     (lc_work w) ->
     (lc_dworklist (dworklist_conswork Ω w)).

(* defns LC_aworklist *)
Inductive lc_aworklist : aworklist -> Prop :=    (* defn lc_aworklist *)
 | lc_aworklist_empty : 
     (lc_aworklist aworklist_empty)
 | lc_aworklist_consvar : forall (aW:aworklist) (x:expvar) (ab:abind),
     (lc_aworklist aW) ->
     (lc_abind ab) ->
     (lc_aworklist (aworklist_consvar aW x ab))
 | lc_aworklist_constvar : forall (aW:aworklist) (X:typvar) (ab:abind),
     (lc_aworklist aW) ->
     (lc_abind ab) ->
     (lc_aworklist (aworklist_constvar aW X ab))
 | lc_aworklist_conswork : forall (aW:aworklist) (w:work),
     (lc_aworklist aW) ->
     (lc_work w) ->
     (lc_aworklist (aworklist_conswork aW w)).
(** free variables *)
Fixpoint ftvar_in_typ (A_5:typ) : vars :=
  match A_5 with
  | typ_unit => {}
  | typ_top => {}
  | typ_bot => {}
  | (typ_var_b nat) => {}
  | (typ_var_f X) => {{X}}
  | (typ_arrow A1 A2) => (ftvar_in_typ A1) \u (ftvar_in_typ A2)
  | (typ_all A) => (ftvar_in_typ A)
  | (typ_union A1 A2) => (ftvar_in_typ A1) \u (ftvar_in_typ A2)
  | (typ_intersection A1 A2) => (ftvar_in_typ A1) \u (ftvar_in_typ A2)
end.

Fixpoint ftvar_in_exp (e_5:exp) : vars :=
  match e_5 with
  | exp_unit => {}
  | (exp_var_b nat) => {}
  | (exp_var_f x) => {}
  | (exp_abs e) => (ftvar_in_exp e)
  | (exp_app e1 e2) => (ftvar_in_exp e1) \u (ftvar_in_exp e2)
  | (exp_tabs body5) => (ftvar_in_body body5)
  | (exp_tapp e A) => (ftvar_in_exp e) \u (ftvar_in_typ A)
  | (exp_anno e A) => (ftvar_in_exp e) \u (ftvar_in_typ A)
end
with ftvar_in_body (body5:body) : vars :=
  match body5 with
  | (body_anno e A) => (ftvar_in_exp e) \u (ftvar_in_typ A)
end.

Fixpoint fvar_in_exp (e_5:exp) : vars :=
  match e_5 with
  | exp_unit => {}
  | (exp_var_b nat) => {}
  | (exp_var_f x) => {{x}}
  | (exp_abs e) => (fvar_in_exp e)
  | (exp_app e1 e2) => (fvar_in_exp e1) \u (fvar_in_exp e2)
  | (exp_tabs body5) => (fvar_in_body body5)
  | (exp_tapp e A) => (fvar_in_exp e)
  | (exp_anno e A) => (fvar_in_exp e)
end
with fvar_in_body (body5:body) : vars :=
  match body5 with
  | (body_anno e A) => (fvar_in_exp e)
end.

Fixpoint ftvar_in_cont (c5:cont) : vars :=
  match c5 with
  | (cont_infabs c) => (ftvar_in_cont c)
  | (cont_infabsunion A1 c) => (ftvar_in_typ A1) \u (ftvar_in_cont c)
  | (cont_infapp e c) => (ftvar_in_exp e) \u (ftvar_in_cont c)
  | (cont_inftapp A c) => (ftvar_in_typ A) \u (ftvar_in_cont c)
  | (cont_inftappunion A1 A2 c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (cont_unioninftapp A2 c) => (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (cont_unioninfabs A2 c) => (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (cont_sub A) => (ftvar_in_typ A)
end.

Fixpoint fvar_in_cont (c5:cont) : vars :=
  match c5 with
  | (cont_infabs c) => (fvar_in_cont c)
  | (cont_infabsunion A1 c) => (fvar_in_cont c)
  | (cont_infapp e c) => (fvar_in_exp e) \u (fvar_in_cont c)
  | (cont_inftapp A c) => (fvar_in_cont c)
  | (cont_inftappunion A1 A2 c) => (fvar_in_cont c)
  | (cont_unioninftapp A2 c) => (fvar_in_cont c)
  | (cont_unioninfabs A2 c) => (fvar_in_cont c)
  | (cont_sub A) => {}
end.

Definition ftvar_in_dbind (db5:dbind) : vars :=
  match db5 with
  | dbind_tvar_empty => {}
  | dbind_stvar_empty => {}
  | (dbind_typ A) => (ftvar_in_typ A)
end.

Definition ftvar_in_work (w5:work) : vars :=
  match w5 with
  | (work_infer e c) => (ftvar_in_exp e) \u (ftvar_in_cont c)
  | (work_check e A) => (ftvar_in_exp e) \u (ftvar_in_typ A)
  | (work_infabs A c) => (ftvar_in_typ A) \u (ftvar_in_cont c)
  | (work_infabsunion A1 A2 c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (work_infapp A e c) => (ftvar_in_typ A) \u (ftvar_in_exp e) \u (ftvar_in_cont c)
  | (work_inftapp A1 A2 c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (work_sub A1 A2) => (ftvar_in_typ A1) \u (ftvar_in_typ A2)
  | (work_inftappunion A1 A2 B c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_typ B) \u (ftvar_in_cont c)
  | (work_unioninftapp A1 A2 c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (work_unioninfabs A1 A2 c) => (ftvar_in_typ A1) \u (ftvar_in_typ A2) \u (ftvar_in_cont c)
  | (work_apply c A) => (ftvar_in_cont c) \u (ftvar_in_typ A)
end.

Definition fvar_in_work (w5:work) : vars :=
  match w5 with
  | (work_infer e c) => (fvar_in_exp e) \u (fvar_in_cont c)
  | (work_check e A) => (fvar_in_exp e)
  | (work_infabs A c) => (fvar_in_cont c)
  | (work_infabsunion A1 A2 c) => (fvar_in_cont c)
  | (work_infapp A e c) => (fvar_in_exp e) \u (fvar_in_cont c)
  | (work_inftapp A1 A2 c) => (fvar_in_cont c)
  | (work_sub A1 A2) => {}
  | (work_inftappunion A1 A2 B c) => (fvar_in_cont c)
  | (work_unioninftapp A1 A2 c) => (fvar_in_cont c)
  | (work_unioninfabs A1 A2 c) => (fvar_in_cont c)
  | (work_apply c A) => (fvar_in_cont c)
end.

Definition ftvar_in_abind (ab5:abind) : vars :=
  match ab5 with
  | abind_tvar_empty => {}
  | abind_stvar_empty => {}
  | (abind_typ A) => (ftvar_in_typ A)
  | (abind_bound A1 B1) => (ftvar_in_typ A1) \u (ftvar_in_typ B1)
end.

Fixpoint ftvar_in_dworklist (Ω5:dworklist) : vars :=
  match Ω5 with
  | dworklist_empty => {}
  | (dworklist_consvar Ω x db) => (ftvar_in_dworklist Ω) \u (ftvar_in_dbind db)
  | (dworklist_constvar Ω X db) => (ftvar_in_dworklist Ω) \u (ftvar_in_dbind db)
  | (dworklist_conswork Ω w) => (ftvar_in_dworklist Ω) \u (ftvar_in_work w)
end.

Definition fvar_in_dvalue (v5:dvalue) : vars :=
  match v5 with
  | dvalue_unit => {}
  | (dvalue_abs e) => (fvar_in_exp e)
  | (dvalue_tabs body5) => (fvar_in_body body5)
end.

Fixpoint fvar_in_dworklist (Ω5:dworklist) : vars :=
  match Ω5 with
  | dworklist_empty => {}
  | (dworklist_consvar Ω x db) => (fvar_in_dworklist Ω)
  | (dworklist_constvar Ω X db) => (fvar_in_dworklist Ω)
  | (dworklist_conswork Ω w) => (fvar_in_dworklist Ω) \u (fvar_in_work w)
end.

Fixpoint ftvar_in_aworklist (aW_5:aworklist) : vars :=
  match aW_5 with
  | aworklist_empty => {}
  | (aworklist_consvar aW x ab) => (ftvar_in_aworklist aW) \u (ftvar_in_abind ab)
  | (aworklist_constvar aW X ab) => (ftvar_in_aworklist aW) \u (ftvar_in_abind ab)
  | (aworklist_conswork aW w) => (ftvar_in_aworklist aW) \u (ftvar_in_work w)
end.

Fixpoint fvar_in_aworklist (aW_5:aworklist) : vars :=
  match aW_5 with
  | aworklist_empty => {}
  | (aworklist_consvar aW x ab) => (fvar_in_aworklist aW)
  | (aworklist_constvar aW X ab) => (fvar_in_aworklist aW)
  | (aworklist_conswork aW w) => (fvar_in_aworklist aW) \u (fvar_in_work w)
end.

Definition ftvar_in_dvalue (v5:dvalue) : vars :=
  match v5 with
  | dvalue_unit => {}
  | (dvalue_abs e) => (ftvar_in_exp e)
  | (dvalue_tabs body5) => (ftvar_in_body body5)
end.

(** substitutions *)
Fixpoint subst_tvar_in_typ (A_5:typ) (X5:typvar) (A__6:typ) {struct A__6} : typ :=
  match A__6 with
  | typ_unit => typ_unit 
  | typ_top => typ_top 
  | typ_bot => typ_bot 
  | (typ_var_b nat) => typ_var_b nat
  | (typ_var_f X) => (if eq_var X X5 then A_5 else (typ_var_f X))
  | (typ_arrow A1 A2) => typ_arrow (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2)
  | (typ_all A) => typ_all (subst_tvar_in_typ A_5 X5 A)
  | (typ_union A1 A2) => typ_union (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2)
  | (typ_intersection A1 A2) => typ_intersection (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2)
end.

Fixpoint subst_tvar_in_exp (A_5:typ) (X5:typvar) (e_5:exp) {struct e_5} : exp :=
  match e_5 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => exp_var_f x
  | (exp_abs e) => exp_abs (subst_tvar_in_exp A_5 X5 e)
  | (exp_app e1 e2) => exp_app (subst_tvar_in_exp A_5 X5 e1) (subst_tvar_in_exp A_5 X5 e2)
  | (exp_tabs body5) => exp_tabs (subst_tvar_in_body A_5 X5 body5)
  | (exp_tapp e A) => exp_tapp (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_typ A_5 X5 A)
  | (exp_anno e A) => exp_anno (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_typ A_5 X5 A)
end
with subst_tvar_in_body (A5:typ) (X5:typvar) (body5:body) {struct body5} : body :=
  match body5 with
  | (body_anno e A) => body_anno (subst_tvar_in_exp A5 X5 e) (subst_tvar_in_typ A5 X5 A)
end.

Fixpoint subst_var_in_exp (e_5:exp) (x5:expvar) (e__6:exp) {struct e__6} : exp :=
  match e__6 with
  | exp_unit => exp_unit 
  | (exp_var_b nat) => exp_var_b nat
  | (exp_var_f x) => (if eq_var x x5 then e_5 else (exp_var_f x))
  | (exp_abs e) => exp_abs (subst_var_in_exp e_5 x5 e)
  | (exp_app e1 e2) => exp_app (subst_var_in_exp e_5 x5 e1) (subst_var_in_exp e_5 x5 e2)
  | (exp_tabs body5) => exp_tabs (subst_var_in_body e_5 x5 body5)
  | (exp_tapp e A) => exp_tapp (subst_var_in_exp e_5 x5 e) A
  | (exp_anno e A) => exp_anno (subst_var_in_exp e_5 x5 e) A
end
with subst_var_in_body (e5:exp) (x5:expvar) (body5:body) {struct body5} : body :=
  match body5 with
  | (body_anno e A) => body_anno (subst_var_in_exp e5 x5 e) A
end.

Fixpoint subst_tvar_in_cont (A_5:typ) (X5:typvar) (c5:cont) {struct c5} : cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (subst_tvar_in_cont A_5 X5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_cont A_5 X5 c)
  | (cont_infapp e c) => cont_infapp (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_cont A_5 X5 c)
  | (cont_inftapp A c) => cont_inftapp (subst_tvar_in_typ A_5 X5 A) (subst_tvar_in_cont A_5 X5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (cont_sub A) => cont_sub (subst_tvar_in_typ A_5 X5 A)
end.

Fixpoint subst_var_in_cont (e5:exp) (x5:expvar) (c5:cont) {struct c5} : cont :=
  match c5 with
  | (cont_infabs c) => cont_infabs (subst_var_in_cont e5 x5 c)
  | (cont_infabsunion A1 c) => cont_infabsunion A1 (subst_var_in_cont e5 x5 c)
  | (cont_infapp e c) => cont_infapp (subst_var_in_exp e5 x5 e) (subst_var_in_cont e5 x5 c)
  | (cont_inftapp A c) => cont_inftapp A (subst_var_in_cont e5 x5 c)
  | (cont_inftappunion A1 A2 c) => cont_inftappunion A1 A2 (subst_var_in_cont e5 x5 c)
  | (cont_unioninftapp A2 c) => cont_unioninftapp A2 (subst_var_in_cont e5 x5 c)
  | (cont_unioninfabs A2 c) => cont_unioninfabs A2 (subst_var_in_cont e5 x5 c)
  | (cont_sub A) => cont_sub A
end.

Definition subst_tvar_in_abind (A_5:typ) (X5:typvar) (ab5:abind) : abind :=
  match ab5 with
  | abind_tvar_empty => abind_tvar_empty 
  | abind_stvar_empty => abind_stvar_empty 
  | (abind_typ A) => abind_typ (subst_tvar_in_typ A_5 X5 A)
  | (abind_bound A1 B1) => abind_bound (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 B1)
end.

Definition subst_tvar_in_work (A_5:typ) (X5:typvar) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_cont A_5 X5 c)
  | (work_check e A) => work_check (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_typ A_5 X5 A)
  | (work_infabs A c) => work_infabs (subst_tvar_in_typ A_5 X5 A) (subst_tvar_in_cont A_5 X5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (work_infapp A e c) => work_infapp (subst_tvar_in_typ A_5 X5 A) (subst_tvar_in_exp A_5 X5 e) (subst_tvar_in_cont A_5 X5 c)
  | (work_inftapp A1 A2 c) => work_inftapp (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (work_sub A1 A2) => work_sub (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2)
  | (work_inftappunion A1 A2 B c) => work_inftappunion (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_typ A_5 X5 B) (subst_tvar_in_cont A_5 X5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs (subst_tvar_in_typ A_5 X5 A1) (subst_tvar_in_typ A_5 X5 A2) (subst_tvar_in_cont A_5 X5 c)
  | (work_apply c A) => work_apply (subst_tvar_in_cont A_5 X5 c) (subst_tvar_in_typ A_5 X5 A)
end.

Definition subst_tvar_in_dbind (A5:typ) (X5:typvar) (db5:dbind) : dbind :=
  match db5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ A) => dbind_typ (subst_tvar_in_typ A5 X5 A)
end.

Definition subst_var_in_work (e5:exp) (x5:expvar) (w5:work) : work :=
  match w5 with
  | (work_infer e c) => work_infer (subst_var_in_exp e5 x5 e) (subst_var_in_cont e5 x5 c)
  | (work_check e A) => work_check (subst_var_in_exp e5 x5 e) A
  | (work_infabs A c) => work_infabs A (subst_var_in_cont e5 x5 c)
  | (work_infabsunion A1 A2 c) => work_infabsunion A1 A2 (subst_var_in_cont e5 x5 c)
  | (work_infapp A e c) => work_infapp A (subst_var_in_exp e5 x5 e) (subst_var_in_cont e5 x5 c)
  | (work_inftapp A1 A2 c) => work_inftapp A1 A2 (subst_var_in_cont e5 x5 c)
  | (work_sub A1 A2) => work_sub A1 A2
  | (work_inftappunion A1 A2 B c) => work_inftappunion A1 A2 B (subst_var_in_cont e5 x5 c)
  | (work_unioninftapp A1 A2 c) => work_unioninftapp A1 A2 (subst_var_in_cont e5 x5 c)
  | (work_unioninfabs A1 A2 c) => work_unioninfabs A1 A2 (subst_var_in_cont e5 x5 c)
  | (work_apply c A) => work_apply (subst_var_in_cont e5 x5 c) A
end.

Fixpoint subst_tvar_in_aworklist (A5:typ) (X5:typvar) (aW_5:aworklist) {struct aW_5} : aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (subst_tvar_in_aworklist A5 X5 aW) x (subst_tvar_in_abind A5 X5 ab)
  | (aworklist_constvar aW X ab) => aworklist_constvar (subst_tvar_in_aworklist A5 X5 aW) X (subst_tvar_in_abind A5 X5 ab)
  | (aworklist_conswork aW w) => aworklist_conswork (subst_tvar_in_aworklist A5 X5 aW) (subst_tvar_in_work A5 X5 w)
end.

Fixpoint subst_tvar_in_dworklist (A5:typ) (X5:typvar) (Ω5:dworklist) {struct Ω5} : dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (subst_tvar_in_dworklist A5 X5 Ω) x (subst_tvar_in_dbind A5 X5 db)
  | (dworklist_constvar Ω X db) => dworklist_constvar (subst_tvar_in_dworklist A5 X5 Ω) X (subst_tvar_in_dbind A5 X5 db)
  | (dworklist_conswork Ω w) => dworklist_conswork (subst_tvar_in_dworklist A5 X5 Ω) (subst_tvar_in_work A5 X5 w)
end.

Fixpoint subst_var_in_aworklist (e5:exp) (x5:expvar) (aW_5:aworklist) {struct aW_5} : aworklist :=
  match aW_5 with
  | aworklist_empty => aworklist_empty 
  | (aworklist_consvar aW x ab) => aworklist_consvar (subst_var_in_aworklist e5 x5 aW) x ab
  | (aworklist_constvar aW X ab) => aworklist_constvar (subst_var_in_aworklist e5 x5 aW) X ab
  | (aworklist_conswork aW w) => aworklist_conswork (subst_var_in_aworklist e5 x5 aW) (subst_var_in_work e5 x5 w)
end.

Definition subst_var_in_dvalue (e5:exp) (x5:expvar) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (subst_var_in_exp e5 x5 e)
  | (dvalue_tabs body5) => dvalue_tabs (subst_var_in_body e5 x5 body5)
end.

Fixpoint subst_var_in_dworklist (e5:exp) (x5:expvar) (Ω5:dworklist) {struct Ω5} : dworklist :=
  match Ω5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar Ω x db) => dworklist_consvar (subst_var_in_dworklist e5 x5 Ω) x db
  | (dworklist_constvar Ω X db) => dworklist_constvar (subst_var_in_dworklist e5 x5 Ω) X db
  | (dworklist_conswork Ω w) => dworklist_conswork (subst_var_in_dworklist e5 x5 Ω) (subst_var_in_work e5 x5 w)
end.

Definition subst_tvar_in_dvalue (A5:typ) (X5:typvar) (v5:dvalue) : dvalue :=
  match v5 with
  | dvalue_unit => dvalue_unit 
  | (dvalue_abs e) => dvalue_abs (subst_tvar_in_exp A5 X5 e)
  | (dvalue_tabs body5) => dvalue_tabs (subst_tvar_in_body A5 X5 body5)
end.



Fixpoint dwl_to_denv (Ω : dworklist) : denv :=
  match Ω with 
  | dworklist_empty => nil
  | dworklist_conswork Ω' _ => dwl_to_denv Ω'
  | dworklist_constvar Ω' X b => X ~ b ++ dwl_to_denv Ω'
  | dworklist_consvar Ω' x b => x ~ b ++ dwl_to_denv Ω'
  end.

Fixpoint awl_to_aenv (aW : aworklist) : aenv :=
  match aW with 
  | aworklist_empty => nil
  | aworklist_conswork aW' _ => awl_to_aenv aW'
  | aworklist_constvar aW' X b => X ~ b ++ awl_to_aenv aW'
  | aworklist_consvar aW' x b => x ~ b ++ awl_to_aenv aW'
  end.




(** definitions *)

(* defns J_strong_in *)
Inductive s_in : typvar -> typ -> Prop :=    (* defn s_in *)
 | s_in__var : forall (X:typvar),
     s_in X (typ_var_f X)
 | s_in__arrow1 : forall (X:typvar) (A1 A2:typ),
     lc_typ A2 ->
     s_in X A1 ->
     s_in X (typ_arrow A1 A2)
 | s_in__arrow2 : forall (X:typvar) (A1 A2:typ),
     lc_typ A1 ->
     s_in X A2 ->
     s_in X (typ_arrow A1 A2)
 | s_in__all : forall (L:vars) (X:typvar) (A:typ),
      ( forall Y , Y \notin  L  -> s_in X  ( open_typ_wrt_typ A (typ_var_f Y) )  )  ->
     s_in X (typ_all A)
 | s_in__union : forall (X:typvar) (A1 A2:typ),
     s_in X A1 ->
     s_in X A2 ->
     s_in X (typ_union A1 A2)
 | s_in__intersection : forall (X:typvar) (A1 A2:typ),
     s_in X A1 ->
     s_in X A2 ->
     s_in X (typ_intersection A1 A2).

(* defns J_neq_abs *)
Inductive neq_abs : exp -> Prop :=    (* defn neq_abs *)
 | neq_abs__unit : 
     neq_abs exp_unit
 | neq_abs__var : forall (x:expvar),
     neq_abs (exp_var_f x)
 | neq_abs__app : forall (e1 e2:exp),
     lc_exp e1 ->
     lc_exp e2 ->
     neq_abs (exp_app e1 e2)
 | neq_abs__tabs : forall (e:exp) (A:typ),
     lc_exp (exp_tabs (body_anno e A)) ->
     neq_abs (exp_tabs (body_anno e A))
 | neq_abs__tapp : forall (e:exp) (A:typ),
     lc_exp e ->
     lc_typ A ->
     neq_abs (exp_tapp e A)
 | neq_abs__anno : forall (e:exp) (A:typ),
     lc_exp e ->
     lc_typ A ->
     neq_abs (exp_anno e A).

(* defns J_neq_all *)
Inductive neq_all : typ -> Prop :=    (* defn neq_all *)
 | neq_all__unit : 
     neq_all typ_unit
 | neq_all__top : 
     neq_all typ_top
 | neq_all__bot : 
     neq_all typ_bot
 | neq_all__var : forall (X:typvar),
     neq_all (typ_var_f X)
 | neq_all__arrow : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_all (typ_arrow A1 A2)
 | neq_all__union : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_all (typ_union A1 A2)
 | neq_all__intersection : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_all (typ_intersection A1 A2).

(* defns J_neq_intersection *)
Inductive neq_intersection : typ -> Prop :=    (* defn neq_intersection *)
 | neq_intersection__unit : 
     neq_intersection typ_unit
 | neq_intersection__top : 
     neq_intersection typ_top
 | neq_intersection__bot : 
     neq_intersection typ_bot
 | neq_intersection__var : forall (X:typvar),
     neq_intersection (typ_var_f X)
 | neq_intersection__arrow : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_intersection (typ_arrow A1 A2)
 | neq_intersection__all : forall (A:typ),
     lc_typ (typ_all A) ->
     neq_intersection (typ_all A)
 | neq_intersection__union : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_intersection (typ_union A1 A2).

(* defns J_neq_union *)
Inductive neq_union : typ -> Prop :=    (* defn neq_union *)
 | neq_union__unit : 
     neq_union typ_unit
 | neq_union__top : 
     neq_union typ_top
 | neq_union__bot : 
     neq_union typ_bot
 | neq_union__var : forall (X:typvar),
     neq_union (typ_var_f X)
 | neq_union__arrow : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_union (typ_arrow A1 A2)
 | neq_union__all : forall (A:typ),
     lc_typ (typ_all A) ->
     neq_union (typ_all A)
 | neq_union__intersection : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_union (typ_intersection A1 A2).

(* defns J_neq_bot *)
Inductive neq_bot : typ -> Prop :=    (* defn neq_bot *)
 | neq_bot__unit : 
     neq_bot typ_unit
 | neq_bot__top : 
     neq_bot typ_top
 | neq_bot__var : forall (X:typvar),
     neq_bot (typ_var_f X)
 | neq_bot__arrow : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_bot (typ_arrow A1 A2)
 | neq_bot__union : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_bot (typ_union A1 A2)
 | neq_bot__intersection : forall (A1 A2:typ),
     lc_typ A1 ->
     lc_typ A2 ->
     neq_bot (typ_intersection A1 A2)
 | neq_bot__all : forall (A:typ),
     lc_typ (typ_all A) ->
     neq_bot (typ_all A).

(* defns J_d_wf_typ *)
Inductive d_wf_typ : denv -> typ -> Prop :=    (* defn d_wf_typ *)
 | d_wf_typ__unit : forall (Ψ:denv),
     d_wf_typ Ψ typ_unit
 | d_wf_typ__bot : forall (Ψ:denv),
     d_wf_typ Ψ typ_bot
 | d_wf_typ__top : forall (Ψ:denv),
     d_wf_typ Ψ typ_top
 | d_wf_typ__tvar : forall (Ψ:denv) (X:typvar),
      binds ( X )  ( dbind_tvar_empty ) ( Ψ )  ->
     d_wf_typ Ψ (typ_var_f X)
 | d_wf_typ__stvar : forall (Ψ:denv) (X:typvar),
      binds ( X )  ( dbind_stvar_empty ) ( Ψ )  ->
     d_wf_typ Ψ (typ_var_f X)
 | d_wf_typ__arrow : forall (Ψ:denv) (A1 A2:typ),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_typ Ψ (typ_arrow A1 A2)
 | d_wf_typ__all : forall (L:vars) (Ψ:denv) (A:typ),
      ( forall X , X \notin  L  -> s_in X  ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
      ( forall X , X \notin  L  -> d_wf_typ  ( X ~ dbind_tvar_empty  ++  Ψ )   ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
     d_wf_typ Ψ (typ_all A)
 | d_wf_typ__union : forall (Ψ:denv) (A1 A2:typ),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_typ Ψ (typ_union A1 A2)
 | d_wf_typ__intersection : forall (Ψ:denv) (A1 A2:typ),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_typ Ψ (typ_intersection A1 A2).

(* defns J_d_wf_exp *)
Inductive d_wf_exp : denv -> exp -> Prop :=    (* defn d_wf_exp *)
 | d_wf_exp__unit : forall (Ψ:denv),
     d_wf_exp Ψ exp_unit
 | d_wf_exp__var : forall (Ψ:denv) (x:expvar) (A:typ),
      binds ( x )  ( (dbind_typ A) ) ( Ψ )  ->
     d_wf_exp Ψ (exp_var_f x)
 | d_wf_exp__abs : forall (L:vars) (Ψ:denv) (e:exp) (T:typ),
     d_wf_typ Ψ T ->
      ( forall x , x \notin  L  -> d_wf_exp  ( x ~ (dbind_typ T)  ++  Ψ )   ( open_exp_wrt_exp e (exp_var_f x) )  )  ->
     d_wf_exp Ψ (exp_abs e)
 | d_wf_exp__app : forall (Ψ:denv) (e1 e2:exp),
     d_wf_exp Ψ e1 ->
     d_wf_exp Ψ e2 ->
     d_wf_exp Ψ (exp_app e1 e2)
 | d_wf_exp__tabs : forall (L:vars) (Ψ:denv) (body5:body),
      ( forall X , X \notin  L  -> d_wf_body  ( X ~ dbind_tvar_empty  ++  Ψ )   ( open_body_wrt_typ body5 (typ_var_f X) )  )  ->
     d_wf_exp Ψ (exp_tabs body5)
 | d_wf_exp__tapp : forall (Ψ:denv) (e:exp) (A:typ),
     d_wf_typ Ψ A ->
     d_wf_exp Ψ e ->
     d_wf_exp Ψ (exp_tapp e A)
 | d_wf_exp__anno : forall (Ψ:denv) (e:exp) (A:typ),
     d_wf_typ Ψ A ->
     d_wf_exp Ψ e ->
     d_wf_exp Ψ (exp_anno e A)
with d_wf_body : denv -> body -> Prop :=    (* defn d_wf_body *)
 | d_wf_body__anno : forall (Ψ:denv) (e:exp) (A:typ),
     d_wf_typ Ψ A ->
     d_wf_exp Ψ e ->
     d_wf_body Ψ (body_anno e A).

(* defns J_d_wf_env *)
Inductive d_wf_env : denv -> Prop :=    (* defn d_wf_env *)
 | d_wf_env__empty : 
     d_wf_env  nil 
 | d_wf_env__tvar : forall (Ψ:denv) (X:typvar),
     d_wf_env Ψ ->
      ( X   `notin` dom ( Ψ ))  ->
     d_wf_env  ( X ~ dbind_tvar_empty  ++  Ψ ) 
 | d_wf_env__stvar : forall (Ψ:denv) (X:typvar),
     d_wf_env Ψ ->
      ( X   `notin` dom ( Ψ ))  ->
     d_wf_env  ( X ~ dbind_stvar_empty  ++  Ψ ) 
 | d_wf_env__typ : forall (Ψ:denv) (x:expvar) (A:typ),
     d_wf_env Ψ ->
     d_wf_typ Ψ A ->
      ( x   `notin` dom ( Ψ ))  ->
     d_wf_env  ( x ~ (dbind_typ A)  ++  Ψ ) .

(* defns J_d_mono_typ *)
Inductive d_mono_typ : denv -> typ -> Prop :=    (* defn d_mono_typ *)
 | d_mono_typ__unit : forall (Ψ:denv),
     d_mono_typ Ψ typ_unit
 | d_mono_typ__tvar : forall (Ψ:denv) (X:typvar),
      binds ( X )  ( dbind_tvar_empty ) ( Ψ )  ->
     d_mono_typ Ψ (typ_var_f X)
 | d_mono_typ__arrow : forall (Ψ:denv) (A1 A2:typ),
     d_mono_typ Ψ A1 ->
     d_mono_typ Ψ A2 ->
     d_mono_typ Ψ (typ_arrow A1 A2).

(* defns J_d_wf_cont *)
Inductive d_wf_cont : denv -> cont -> Prop :=    (* defn d_wf_cont *)
 | d_wf_cont__infabs : forall (Ψ:denv) (c:cont),
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_infabs c)
 | d_wf_cont__infabsunion : forall (Ψ:denv) (A:typ) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_infabsunion A c)
 | d_wf_cont__infapp : forall (Ψ:denv) (e:exp) (c:cont),
     d_wf_exp Ψ e ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_infapp e c)
 | d_wf_cont__inftapp : forall (Ψ:denv) (A:typ) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_inftapp A c)
 | d_wf_cont__inftappunion : forall (Ψ:denv) (A1 A2:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_inftappunion A1 A2 c)
 | d_wf_cont__unioninftapp : forall (Ψ:denv) (A:typ) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_unioninftapp A c)
 | d_wf_cont__unioninfabs : forall (Ψ:denv) (A:typ) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_cont Ψ (cont_unioninfabs A c)
 | d_wf_cont__sub : forall (Ψ:denv) (A:typ),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ (cont_sub A).

(* defns J_d_wf_work *)
Inductive d_wf_work : denv -> work -> Prop :=    (* defn d_wf_work *)
 | d_wf_work__infer : forall (Ψ:denv) (e:exp) (c:cont),
     d_wf_exp Ψ e ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_infer e c)
 | d_wf_work__check : forall (Ψ:denv) (e:exp) (A:typ),
     d_wf_exp Ψ e ->
     d_wf_typ Ψ A ->
     d_wf_work Ψ (work_check e A)
 | d_wf_work__infabs : forall (Ψ:denv) (A:typ) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_infabs A c)
 | d_wf_work__infabsunion : forall (Ψ:denv) (A1 A2:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_infabsunion A1 A2 c)
 | d_wf_work__infapp : forall (Ψ:denv) (A:typ) (e:exp) (c:cont),
     d_wf_typ Ψ A ->
     d_wf_exp Ψ e ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_infapp A e c)
 | d_wf_work__inftapp : forall (Ψ:denv) (A1 A2:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_inftapp A1 A2 c)
 | d_wf_work__inftappunion : forall (Ψ:denv) (A1 A2 B:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_typ Ψ B ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_inftappunion A1 A2 B c)
 | d_wf_work__unioninftapp : forall (Ψ:denv) (A1 A2:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_unioninftapp A1 A2 c)
 | d_wf_work__unioninfabs : forall (Ψ:denv) (A1 A2:typ) (c:cont),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_unioninfabs A1 A2 c)
 | d_wf_work__sub : forall (Ψ:denv) (A1 A2:typ),
     d_wf_typ Ψ A1 ->
     d_wf_typ Ψ A2 ->
     d_wf_work Ψ (work_sub A1 A2)
 | d_wf_work__apply : forall (Ψ:denv) (c:cont) (A:typ),
     d_wf_typ Ψ A ->
     d_wf_cont Ψ c ->
     d_wf_work Ψ (work_apply c A).

(* defns Jd_wf_wl *)
Inductive d_wf_wl : dworklist -> Prop :=    (* defn d_wf_wl *)
 | d_wf_wl__empty : 
     d_wf_wl dworklist_empty
 | d_wf_wl__consvar : forall (Ω:dworklist) (x:expvar) (A:typ),
      ( x   `notin` dom (  ( dwl_to_denv  Ω  )  ))  ->
     d_wf_typ  ( dwl_to_denv  Ω  )  A ->
     d_wf_wl Ω ->
     d_wf_wl (dworklist_consvar Ω x (dbind_typ A))
 | d_wf_wl__constvar : forall (Ω:dworklist) (X:typvar),
      ( X   `notin` dom (  ( dwl_to_denv  Ω  )  ))  ->
     d_wf_wl Ω ->
     d_wf_wl (dworklist_constvar Ω X dbind_tvar_empty)
 | d_wf_wl__consstvar : forall (Ω:dworklist) (X:typvar),
      ( X   `notin` dom (  ( dwl_to_denv  Ω  )  ))  ->
     d_wf_wl Ω ->
     d_wf_wl (dworklist_constvar Ω X dbind_stvar_empty)
 | d_wf_wl__conswork : forall (Ω:dworklist) (w:work),
     d_wf_work  ( dwl_to_denv  Ω  )  w ->
     d_wf_wl Ω ->
     d_wf_wl (dworklist_conswork Ω w).

(* defns J_d_sub *)
Inductive d_sub : denv -> typ -> typ -> Prop :=    (* defn d_sub *)
 | d_sub__top : forall (Ψ:denv) (A:typ),
     d_wf_env Ψ ->
     d_wf_typ Ψ A ->
     d_sub Ψ A typ_top
 | d_sub__bot : forall (Ψ:denv) (B:typ),
     d_wf_env Ψ ->
     d_wf_typ Ψ B ->
     d_sub Ψ typ_bot B
 | d_sub__unit : forall (Ψ:denv),
     d_wf_env Ψ ->
     d_sub Ψ typ_unit typ_unit
 | d_sub__tvar : forall (Ψ:denv) (X:typvar),
     d_wf_env Ψ ->
     d_wf_typ Ψ (typ_var_f X) ->
     d_sub Ψ (typ_var_f X) (typ_var_f X)
 | d_sub__arrow : forall (Ψ:denv) (A1 A2 B1 B2:typ),
     d_sub Ψ B1 A1 ->
     d_sub Ψ A2 B2 ->
     d_sub Ψ (typ_arrow A1 A2) (typ_arrow B1 B2)
 | d_sub__all : forall (L:vars) (Ψ:denv) (A B:typ),
      ( forall X , X \notin  L  -> s_in X  ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
      ( forall X , X \notin  L  -> s_in X  ( open_typ_wrt_typ B (typ_var_f X) )  )  ->
      ( forall X , X \notin  L  -> d_sub  ( X ~ dbind_stvar_empty  ++  Ψ )   ( open_typ_wrt_typ A (typ_var_f X) )   ( open_typ_wrt_typ B (typ_var_f X) )  )  ->
     d_sub Ψ (typ_all A) (typ_all B)
 | d_sub__alll : forall (L:vars) (Ψ:denv) (A B T:typ),
     neq_all B ->
     neq_intersection B ->
     neq_union B ->
      ( forall X , X \notin  L  -> s_in X  ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
     d_mono_typ Ψ T ->
     d_sub Ψ  (open_typ_wrt_typ  A   T )  B ->
     d_sub Ψ (typ_all A) B
 | d_sub__intersection1 : forall (Ψ:denv) (A B1 B2:typ),
     d_sub Ψ A B1 ->
     d_sub Ψ A B2 ->
     d_sub Ψ A (typ_intersection B1 B2)
 | d_sub__intersection2 : forall (Ψ:denv) (A1 A2 B:typ),
     d_sub Ψ A1 B ->
     d_wf_typ Ψ A2 ->
     d_sub Ψ (typ_intersection A1 A2) B
 | d_sub__intersection3 : forall (Ψ:denv) (A1 A2 B:typ),
     d_sub Ψ A2 B ->
     d_wf_typ Ψ A1 ->
     d_sub Ψ (typ_intersection A1 A2) B
 | d_sub__union1 : forall (Ψ:denv) (A B1 B2:typ),
     d_sub Ψ A B1 ->
     d_wf_typ Ψ B2 ->
     d_sub Ψ A (typ_union B1 B2)
 | d_sub__union2 : forall (Ψ:denv) (A B1 B2:typ),
     d_sub Ψ A B2 ->
     d_wf_typ Ψ B1 ->
     d_sub Ψ A (typ_union B1 B2)
 | d_sub__union3 : forall (Ψ:denv) (A1 A2 B:typ),
     d_sub Ψ A1 B ->
     d_sub Ψ A2 B ->
     d_sub Ψ (typ_union A1 A2) B.

(* defns J_a_etvars_in_worklist *)
Inductive a_evs_in_wl : aworklist -> typvar -> typvar -> Prop :=    (* defn a_evs_in_wl *)
 | a_etvars_in_wl__in : forall (aW:aworklist) (X2:typvar) (B2 A2:typ) (X1:typvar) (B1 A1:typ),
     lc_typ B2 ->
     lc_typ A2 ->
      binds ( X1 )  ( (abind_bound B1 A1) ) (  ( awl_to_aenv  aW  )  )  ->
     a_evs_in_wl (aworklist_constvar aW X2 (abind_bound B2 A2)) X1 X2
 | a_etvars_in_wl__var : forall (aW:aworklist) (X:typvar) (ab:abind) (X1 X2:typvar),
     lc_abind ab ->
     a_evs_in_wl aW X1 X2 ->
     a_evs_in_wl (aworklist_constvar aW X ab) X1 X2
 | a_etvars_in_wl__work : forall (aW:aworklist) (w:work) (X1 X2:typvar),
     lc_work w ->
     a_evs_in_wl aW X1 X2 ->
     a_evs_in_wl (aworklist_conswork aW w) X1 X2.

(* defns J_a_wf_typ *)
Inductive a_wf_typ : aenv -> typ -> Prop :=    (* defn a_wf_typ *)
 | a_wf_typ__unit : forall (aE:aenv),
     a_wf_typ aE typ_unit
 | a_wf_typ__bot : forall (aE:aenv),
     a_wf_typ aE typ_bot
 | a_wf_typ__top : forall (aE:aenv),
     a_wf_typ aE typ_top
 | a_wf_typ__tvar : forall (aE:aenv) (X:typvar),
      binds ( X )  ( abind_tvar_empty ) ( aE )  ->
     a_wf_typ aE (typ_var_f X)
 | a_wf_typ__stvar : forall (aE:aenv) (X:typvar),
      binds ( X )  ( abind_stvar_empty ) ( aE )  ->
     a_wf_typ aE (typ_var_f X)
 | a_wf_typ__etvar : forall (aE:aenv) (X:typvar) (A B:typ),
      binds ( X )  ( (abind_bound A B) ) ( aE )  ->
     a_wf_typ aE (typ_var_f X)
 | a_wf_typ__arrow : forall (aE:aenv) (A1 A2:typ),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_typ aE (typ_arrow A1 A2)
 | a_wf_typ__all : forall (L:vars) (aE:aenv) (A:typ),
      ( forall X , X \notin  L  -> s_in X  ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
      ( forall X , X \notin  L  -> a_wf_typ  ( X ~ abind_tvar_empty  ++  aE )   ( open_typ_wrt_typ A (typ_var_f X) )  )  ->
     a_wf_typ aE (typ_all A)
 | a_wf_typ__union : forall (aE:aenv) (A1 A2:typ),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_typ aE (typ_union A1 A2)
 | a_wf_typ__intersection : forall (aE:aenv) (A1 A2:typ),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_typ aE (typ_intersection A1 A2).

(* defns J_a_mono_typ *)
Inductive a_mono_typ : aenv -> typ -> Prop :=    (* defn a_mono_typ *)
 | a_mono_typ__unit : forall (aE:aenv),
     a_mono_typ aE typ_unit
 | a_mono_typ__tvar : forall (aE:aenv) (X:typvar),
      binds ( X )  ( abind_tvar_empty ) ( aE )  ->
     a_mono_typ aE (typ_var_f X)
 | a_mono_typ__etvar : forall (aE:aenv) (X:typvar) (A B:typ),
     a_wf_typ aE A ->
     a_wf_typ aE B ->
      binds ( X )  ( (abind_bound A B) ) ( aE )  ->
     a_mono_typ aE (typ_var_f X)
 | a_mono_typ__arrow : forall (aE:aenv) (A1 A2:typ),
     a_mono_typ aE A1 ->
     a_mono_typ aE A2 ->
     a_mono_typ aE (typ_arrow A1 A2).

(* defns J_a_wf_exp *)
Inductive a_wf_exp : aenv -> exp -> Prop :=    (* defn a_wf_exp *)
 | a_wf_exp__unit : forall (aE:aenv),
     a_wf_exp aE exp_unit
 | a_wf_exp__var : forall (aE:aenv) (x:expvar) (A:typ),
      binds ( x )  ( (abind_typ A) ) ( aE )  ->
     a_wf_exp aE (exp_var_f x)
 | a_wf_exp__abs : forall (L:vars) (aE:aenv) (e:exp) (T:typ),
     a_wf_typ aE T ->
      ( forall x , x \notin  L  -> a_wf_exp  ( x ~ (abind_typ T)  ++  aE )   ( open_exp_wrt_exp e (exp_var_f x) )  )  ->
     a_wf_exp aE (exp_abs e)
 | a_wf_exp__app : forall (aE:aenv) (e1 e2:exp),
     a_wf_exp aE e1 ->
     a_wf_exp aE e2 ->
     a_wf_exp aE (exp_app e1 e2)
 | a_wf_exp__tabs : forall (L:vars) (aE:aenv) (body5:body),
      ( forall X , X \notin  L  -> a_wf_body  ( X ~ abind_tvar_empty  ++  aE )   ( open_body_wrt_typ body5 (typ_var_f X) )  )  ->
     a_wf_exp aE (exp_tabs body5)
 | a_wf_exp__tapp : forall (aE:aenv) (e:exp) (A:typ),
     a_wf_typ aE A ->
     a_wf_exp aE e ->
     a_wf_exp aE (exp_tapp e A)
 | a_wf_exp__anno : forall (aE:aenv) (e:exp) (A:typ),
     a_wf_typ aE A ->
     a_wf_exp aE e ->
     a_wf_exp aE (exp_anno e A)
with a_wf_body : aenv -> body -> Prop :=    (* defn a_wf_body *)
 | a_wf_body__anno : forall (aE:aenv) (e:exp) (A:typ),
     a_wf_typ aE A ->
     a_wf_exp aE e ->
     a_wf_body aE (body_anno e A).

(* defns J_a_wf_cont *)
Inductive a_wf_cont : aenv -> cont -> Prop :=    (* defn a_wf_cont *)
 | a_wf_cont__infabs : forall (aE:aenv) (c:cont),
     a_wf_cont aE c ->
     a_wf_cont aE (cont_infabs c)
 | a_wf_cont__infabsunion : forall (aE:aenv) (A:typ) (c:cont),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_infabsunion A c)
 | a_wf_cont__infapp : forall (aE:aenv) (e:exp) (c:cont),
     a_wf_exp aE e ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_infapp e c)
 | a_wf_cont__inftapp : forall (aE:aenv) (A:typ) (c:cont),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_inftapp A c)
 | a_wf_cont__inftappunion : forall (aE:aenv) (A1 A2:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_inftappunion A1 A2 c)
 | a_wf_cont__unioninftapp : forall (aE:aenv) (A:typ) (c:cont),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_unioninftapp A c)
 | a_wf_cont__unioninfabs : forall (aE:aenv) (A:typ) (c:cont),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_cont aE (cont_unioninfabs A c)
 | a_wf_cont__sub : forall (aE:aenv) (A:typ),
     a_wf_typ aE A ->
     a_wf_cont aE (cont_sub A).

(* defns J_a_wf_work *)
Inductive a_wf_work : aenv -> work -> Prop :=    (* defn a_wf_work *)
 | a_wf_work__infer : forall (aE:aenv) (e:exp) (c:cont),
     a_wf_exp aE e ->
     a_wf_cont aE c ->
     a_wf_work aE (work_infer e c)
 | a_wf_work__check : forall (aE:aenv) (e:exp) (A:typ),
     a_wf_exp aE e ->
     a_wf_typ aE A ->
     a_wf_work aE (work_check e A)
 | a_wf_work__infabs : forall (aE:aenv) (A:typ) (c:cont),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_work aE (work_infabs A c)
 | a_wf_work__infabsunion : forall (aE:aenv) (A1 A2:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_cont aE c ->
     a_wf_work aE (work_infabsunion A1 A2 c)
 | a_wf_work__infapp : forall (aE:aenv) (A:typ) (e:exp) (c:cont),
     a_wf_typ aE A ->
     a_wf_exp aE e ->
     a_wf_cont aE c ->
     a_wf_work aE (work_infapp A e c)
 | a_wf_work__inftapp : forall (aE:aenv) (A1 A2:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_cont aE c ->
     a_wf_work aE (work_inftapp A1 A2 c)
 | a_wf_work__inftappunion : forall (aE:aenv) (A1 A2 B:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_typ aE B ->
     a_wf_cont aE c ->
     a_wf_work aE (work_inftappunion A1 A2 B c)
 | a_wf_work__unioninftapp : forall (aE:aenv) (A1 A2:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_cont aE c ->
     a_wf_work aE (work_unioninftapp A1 A2 c)
 | a_wf_work__unioninfabs : forall (aE:aenv) (A1 A2:typ) (c:cont),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_cont aE c ->
     a_wf_work aE (work_unioninfabs A1 A2 c)
 | a_wf_work__sub : forall (aE:aenv) (A1 A2:typ),
     a_wf_typ aE A1 ->
     a_wf_typ aE A2 ->
     a_wf_work aE (work_sub A1 A2)
 | a_wf_work__apply : forall (aE:aenv) (c:cont) (A:typ),
     a_wf_typ aE A ->
     a_wf_cont aE c ->
     a_wf_work aE (work_apply c A).

(* defns J_a_wf_wl *)
Inductive a_wf_wl : aworklist -> Prop :=    (* defn a_wf_wl *)
 | a_wf_wl__empty : 
     a_wf_wl aworklist_empty
 | a_wf_wl__consvar : forall (aW:aworklist) (x:expvar) (A:typ),
      ( x   `notin` dom (  ( awl_to_aenv  aW  )  ))  ->
     a_wf_typ  ( awl_to_aenv  aW  )  A ->
     a_wf_wl aW ->
     a_wf_wl (aworklist_consvar aW x (abind_typ A))
 | a_wf_wl__constvar : forall (aW:aworklist) (X:typvar),
      ( X   `notin` dom (  ( awl_to_aenv  aW  )  ))  ->
     a_wf_wl aW ->
     a_wf_wl (aworklist_constvar aW X abind_tvar_empty)
 | a_wf_wl__consstvar : forall (aW:aworklist) (X:typvar),
      ( X   `notin` dom (  ( awl_to_aenv  aW  )  ))  ->
     a_wf_wl aW ->
     a_wf_wl (aworklist_constvar aW X abind_stvar_empty)
 | a_wf_wl__consetvar : forall (aW:aworklist) (X:typvar) (A B:typ),
      ( X   `notin` dom (  ( awl_to_aenv  aW  )  ))  ->
      ( a_mono_typ  ( awl_to_aenv  aW  )  A ) \/ (  ( A  = typ_bot)  )  ->
      ( a_mono_typ  ( awl_to_aenv  aW  )  B ) \/ (  ( B  = typ_top)  )  ->
     a_wf_wl aW ->
     a_wf_wl (aworklist_constvar aW X (abind_bound A B))
 | a_wf_wl__conswork : forall (aW:aworklist) (w:work),
     a_wf_work  ( awl_to_aenv  aW  )  w ->
     a_wf_wl aW ->
     a_wf_wl (aworklist_conswork aW w).


(** infrastructure *)
#[export] Hint Constructors s_in neq_abs neq_all neq_intersection neq_union neq_bot d_wf_typ d_wf_exp d_wf_body d_wf_env d_mono_typ d_wf_cont d_wf_work d_wf_wl d_sub a_evs_in_wl a_wf_typ a_mono_typ a_wf_exp a_wf_body a_wf_cont a_wf_work a_wf_wl lc_typ lc_exp lc_body lc_cont lc_dbind lc_work lc_abind lc_dvalue lc_dworklist lc_aworklist : core.


