(* generated by Ott 0.32, locally-nameless lngen from: algo/language.ott *)
Require Import Bool.
Require Import Metalib.Metatheory.
Require Import List.
(** syntax *)
Definition typvar : Set := var.
Definition stypvar : Set := var.
Definition etypvar : Set := var.
Definition expvar : Set := var.

Inductive a_typ : Set := 
 | a_typ_unit : a_typ
 | a_typ_top : a_typ
 | a_typ_bot : a_typ
 | a_typ_tvar_b (_:nat)
 | a_typ_tvar_f (X:typvar)
 | a_typ_stvar (SX:stypvar)
 | a_typ_etvar (EX:etypvar)
 | a_typ_arrow (T1:a_typ) (T2:a_typ)
 | a_typ_all (T:a_typ)
 | a_typ_union (T1:a_typ) (T2:a_typ)
 | a_typ_intersection (T1:a_typ) (T2:a_typ).

Inductive a_body : Set := 
 | a_body_anno (e:a_exp) (T:a_typ)
with a_exp : Set := 
 | a_exp_unit : a_exp
 | a_exp_top : a_exp
 | a_exp_var_b (_:nat)
 | a_exp_var_f (x:expvar)
 | a_exp_abs (e:a_exp)
 | a_exp_app (e1:a_exp) (e2:a_exp)
 | a_exp_tabs (a_body5:a_body)
 | a_exp_tapp (e:a_exp) (T:a_typ)
 | a_exp_anno (e:a_exp) (T:a_typ).

Inductive a_cont : Set := 
 | a_cont_done : a_cont
 | a_cont_app (e:a_exp) (c:a_cont)
 | a_cont_tapp (T:a_typ) (c:a_cont)
 | a_cont_sub (T:a_typ).

Inductive a_binding : Set := 
 | a_bind_tvarempty : a_binding
 | a_bind_stvarempty : a_binding
 | a_bind_typ (T:a_typ)
 | a_bind_bound (T1:a_typ) (T2:a_typ).

Inductive a_work : Set := 
 | a_work_infer (e:a_exp) (c:a_cont)
 | a_work_check (e:a_exp) (T:a_typ)
 | a_work_infapp (T:a_typ) (e:a_exp) (c:a_cont)
 | a_work_inftapp (T1:a_typ) (T2:a_typ) (c:a_cont)
 | a_work_sub (T1:a_typ) (T2:a_typ)
 | a_work_apply (c:a_cont) (T:a_typ).

Inductive a_worklist : Set := 
 | a_wl_nil : a_worklist
 | a_wl_consvar (W:a_worklist) (x:expvar) (b:a_binding)
 | a_wl_constvar (W:a_worklist) (X:typvar) (b:a_binding)
 | a_wl_consstvar (W:a_worklist) (SX:stypvar) (b:a_binding)
 | a_wl_consetvar (W:a_worklist) (EX:etypvar) (b:a_binding)
 | a_wl_consw (W:a_worklist) (w:a_work).

Inductive a_mode_addbound : Set := 
 | a_modeab_upper : a_mode_addbound
 | a_modeab_lower : a_mode_addbound
 | a_modeab_both : a_mode_addbound.

Definition a_env : Set := list (atom*a_binding).

(* EXPERIMENTAL *)
(** auxiliary functions on the new list types *)
(** library functions *)
(** subrules *)
(** arities *)
(** opening up abstractions *)
Fixpoint open_a_typ_wrt_a_typ_rec (k:nat) (T_5:a_typ) (T__6:a_typ) {struct T__6}: a_typ :=
  match T__6 with
  | a_typ_unit => a_typ_unit 
  | a_typ_top => a_typ_top 
  | a_typ_bot => a_typ_bot 
  | (a_typ_tvar_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => a_typ_tvar_b nat
        | inleft (right _) => T_5
        | inright _ => a_typ_tvar_b (nat - 1)
      end
  | (a_typ_tvar_f X) => a_typ_tvar_f X
  | (a_typ_stvar SX) => a_typ_stvar SX
  | (a_typ_etvar EX) => a_typ_etvar EX
  | (a_typ_arrow T1 T2) => a_typ_arrow (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_typ_all T) => a_typ_all (open_a_typ_wrt_a_typ_rec (S k) T_5 T)
  | (a_typ_union T1 T2) => a_typ_union (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_typ_intersection T1 T2) => a_typ_intersection (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2)
end.

Fixpoint open_a_exp_wrt_a_typ_rec (k:nat) (T_5:a_typ) (e_5:a_exp) {struct e_5}: a_exp :=
  match e_5 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (open_a_exp_wrt_a_typ_rec k T_5 e)
  | (a_exp_app e1 e2) => a_exp_app (open_a_exp_wrt_a_typ_rec k T_5 e1) (open_a_exp_wrt_a_typ_rec k T_5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (open_a_body_wrt_a_typ_rec (S k) T_5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (open_a_exp_wrt_a_typ_rec k T_5 e) (open_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_exp_anno e T) => a_exp_anno (open_a_exp_wrt_a_typ_rec k T_5 e) (open_a_typ_wrt_a_typ_rec k T_5 T)
end
with open_a_body_wrt_a_typ_rec (k:nat) (T5:a_typ) (a_body5:a_body) : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (open_a_exp_wrt_a_typ_rec k T5 e) (open_a_typ_wrt_a_typ_rec k T5 T)
end.

Fixpoint open_a_exp_wrt_a_exp_rec (k:nat) (e_5:a_exp) (e__6:a_exp) {struct e__6}: a_exp :=
  match e__6 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => a_exp_var_b nat
        | inleft (right _) => e_5
        | inright _ => a_exp_var_b (nat - 1)
      end
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (open_a_exp_wrt_a_exp_rec (S k) e_5 e)
  | (a_exp_app e1 e2) => a_exp_app (open_a_exp_wrt_a_exp_rec k e_5 e1) (open_a_exp_wrt_a_exp_rec k e_5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (open_a_body_wrt_a_exp_rec k e_5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (open_a_exp_wrt_a_exp_rec k e_5 e) T
  | (a_exp_anno e T) => a_exp_anno (open_a_exp_wrt_a_exp_rec k e_5 e) T
end
with open_a_body_wrt_a_exp_rec (k:nat) (e5:a_exp) (a_body5:a_body) : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (open_a_exp_wrt_a_exp_rec k e5 e) T
end.

Fixpoint open_a_cont_wrt_a_typ_rec (k:nat) (T5:a_typ) (c5:a_cont) {struct c5}: a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (open_a_exp_wrt_a_typ_rec k T5 e) (open_a_cont_wrt_a_typ_rec k T5 c)
  | (a_cont_tapp T c) => a_cont_tapp (open_a_typ_wrt_a_typ_rec k T5 T) (open_a_cont_wrt_a_typ_rec k T5 c)
  | (a_cont_sub T) => a_cont_sub (open_a_typ_wrt_a_typ_rec k T5 T)
end.

Fixpoint open_a_cont_wrt_a_exp_rec (k:nat) (e5:a_exp) (c5:a_cont) {struct c5}: a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (open_a_exp_wrt_a_exp_rec k e5 e) (open_a_cont_wrt_a_exp_rec k e5 c)
  | (a_cont_tapp T c) => a_cont_tapp T (open_a_cont_wrt_a_exp_rec k e5 c)
  | (a_cont_sub T) => a_cont_sub T
end.

Definition open_a_binding_wrt_a_typ_rec (k:nat) (T_5:a_typ) (b5:a_binding) : a_binding :=
  match b5 with
  | a_bind_tvarempty => a_bind_tvarempty 
  | a_bind_stvarempty => a_bind_stvarempty 
  | (a_bind_typ T) => a_bind_typ (open_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_bind_bound T1 T2) => a_bind_bound (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2)
end.

Definition open_a_work_wrt_a_typ_rec (k:nat) (T_5:a_typ) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (open_a_exp_wrt_a_typ_rec k T_5 e) (open_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_check e T) => a_work_check (open_a_exp_wrt_a_typ_rec k T_5 e) (open_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_work_infapp T e c) => a_work_infapp (open_a_typ_wrt_a_typ_rec k T_5 T) (open_a_exp_wrt_a_typ_rec k T_5 e) (open_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2) (open_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_sub T1 T2) => a_work_sub (open_a_typ_wrt_a_typ_rec k T_5 T1) (open_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_work_apply c T) => a_work_apply (open_a_cont_wrt_a_typ_rec k T_5 c) (open_a_typ_wrt_a_typ_rec k T_5 T)
end.

Definition open_a_work_wrt_a_exp_rec (k:nat) (e5:a_exp) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (open_a_exp_wrt_a_exp_rec k e5 e) (open_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_check e T) => a_work_check (open_a_exp_wrt_a_exp_rec k e5 e) T
  | (a_work_infapp T e c) => a_work_infapp T (open_a_exp_wrt_a_exp_rec k e5 e) (open_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp T1 T2 (open_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_sub T1 T2) => a_work_sub T1 T2
  | (a_work_apply c T) => a_work_apply (open_a_cont_wrt_a_exp_rec k e5 c) T
end.

Fixpoint open_a_worklist_wrt_a_typ_rec (k:nat) (T5:a_typ) (W_5:a_worklist) {struct W_5}: a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (open_a_worklist_wrt_a_typ_rec k T5 W) x (open_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_constvar W X b) => a_wl_constvar (open_a_worklist_wrt_a_typ_rec k T5 W) X (open_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consstvar W SX b) => a_wl_consstvar (open_a_worklist_wrt_a_typ_rec k T5 W) SX (open_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consetvar W EX b) => a_wl_consetvar (open_a_worklist_wrt_a_typ_rec k T5 W) EX (open_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consw W w) => a_wl_consw (open_a_worklist_wrt_a_typ_rec k T5 W) (open_a_work_wrt_a_typ_rec k T5 w)
end.

Fixpoint open_a_worklist_wrt_a_exp_rec (k:nat) (e5:a_exp) (W_5:a_worklist) {struct W_5}: a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (open_a_worklist_wrt_a_exp_rec k e5 W) x b
  | (a_wl_constvar W X b) => a_wl_constvar (open_a_worklist_wrt_a_exp_rec k e5 W) X b
  | (a_wl_consstvar W SX b) => a_wl_consstvar (open_a_worklist_wrt_a_exp_rec k e5 W) SX b
  | (a_wl_consetvar W EX b) => a_wl_consetvar (open_a_worklist_wrt_a_exp_rec k e5 W) EX b
  | (a_wl_consw W w) => a_wl_consw (open_a_worklist_wrt_a_exp_rec k e5 W) (open_a_work_wrt_a_exp_rec k e5 w)
end.

Definition open_a_exp_wrt_a_exp e_5 e__6 := open_a_exp_wrt_a_exp_rec 0 e__6 e_5.

Definition open_a_body_wrt_a_exp e5 a_body5 := open_a_body_wrt_a_exp_rec 0 a_body5 e5.

Definition open_a_exp_wrt_a_typ T_5 e_5 := open_a_exp_wrt_a_typ_rec 0 e_5 T_5.

Definition open_a_work_wrt_a_exp e5 w5 := open_a_work_wrt_a_exp_rec 0 w5 e5.

Definition open_a_worklist_wrt_a_typ T5 W_5 := open_a_worklist_wrt_a_typ_rec 0 W_5 T5.

Definition open_a_cont_wrt_a_exp e5 c5 := open_a_cont_wrt_a_exp_rec 0 c5 e5.

Definition open_a_binding_wrt_a_typ T_5 b5 := open_a_binding_wrt_a_typ_rec 0 b5 T_5.

Definition open_a_cont_wrt_a_typ T5 c5 := open_a_cont_wrt_a_typ_rec 0 c5 T5.

Definition open_a_worklist_wrt_a_exp e5 W_5 := open_a_worklist_wrt_a_exp_rec 0 W_5 e5.

Definition open_a_body_wrt_a_typ T5 a_body5 := open_a_body_wrt_a_typ_rec 0 a_body5 T5.

Definition open_a_typ_wrt_a_typ T_5 T__6 := open_a_typ_wrt_a_typ_rec 0 T__6 T_5.

Definition open_a_work_wrt_a_typ T_5 w5 := open_a_work_wrt_a_typ_rec 0 w5 T_5.

(** closing up abstractions *)
Fixpoint close_a_typ_wrt_a_typ_rec (k:nat) (T_5:var) (T__6:a_typ) {struct T__6}: a_typ :=
  match T__6 with
  | a_typ_unit => a_typ_unit 
  | a_typ_top => a_typ_top 
  | a_typ_bot => a_typ_bot 
  | (a_typ_tvar_b nat) => 
       if (lt_dec nat k) 
         then a_typ_tvar_b nat
         else a_typ_tvar_b (S nat)
  | (a_typ_tvar_f X) => if (T_5 === X) then (a_typ_tvar_b k) else (a_typ_tvar_f X)
  | (a_typ_stvar SX) => a_typ_stvar SX
  | (a_typ_etvar EX) => a_typ_etvar EX
  | (a_typ_arrow T1 T2) => a_typ_arrow (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_typ_all T) => a_typ_all (close_a_typ_wrt_a_typ_rec (S k) T_5 T)
  | (a_typ_union T1 T2) => a_typ_union (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_typ_intersection T1 T2) => a_typ_intersection (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2)
end.

Fixpoint close_a_exp_wrt_a_typ_rec (k:nat) (T_5:var) (e_5:a_exp) {struct e_5}: a_exp :=
  match e_5 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (close_a_exp_wrt_a_typ_rec k T_5 e)
  | (a_exp_app e1 e2) => a_exp_app (close_a_exp_wrt_a_typ_rec k T_5 e1) (close_a_exp_wrt_a_typ_rec k T_5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (close_a_body_wrt_a_typ_rec (S k) T_5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (close_a_exp_wrt_a_typ_rec k T_5 e) (close_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_exp_anno e T) => a_exp_anno (close_a_exp_wrt_a_typ_rec k T_5 e) (close_a_typ_wrt_a_typ_rec k T_5 T)
end
with close_a_body_wrt_a_typ_rec (k:nat) (T5:var) (a_body5:a_body) : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (close_a_exp_wrt_a_typ_rec k T5 e) (close_a_typ_wrt_a_typ_rec k T5 T)
end.

Fixpoint close_a_exp_wrt_a_exp_rec (k:nat) (e_5:var) (e__6:a_exp) {struct e__6}: a_exp :=
  match e__6 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => 
       if (lt_dec nat k) 
         then a_exp_var_b nat
         else a_exp_var_b (S nat)
  | (a_exp_var_f x) => if (e_5 === x) then (a_exp_var_b k) else (a_exp_var_f x)
  | (a_exp_abs e) => a_exp_abs (close_a_exp_wrt_a_exp_rec (S k) e_5 e)
  | (a_exp_app e1 e2) => a_exp_app (close_a_exp_wrt_a_exp_rec k e_5 e1) (close_a_exp_wrt_a_exp_rec k e_5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (close_a_body_wrt_a_exp_rec k e_5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (close_a_exp_wrt_a_exp_rec k e_5 e) T
  | (a_exp_anno e T) => a_exp_anno (close_a_exp_wrt_a_exp_rec k e_5 e) T
end
with close_a_body_wrt_a_exp_rec (k:nat) (e5:var) (a_body5:a_body) : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (close_a_exp_wrt_a_exp_rec k e5 e) T
end.

Fixpoint close_a_cont_wrt_a_typ_rec (k:nat) (T5:var) (c5:a_cont) {struct c5}: a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (close_a_exp_wrt_a_typ_rec k T5 e) (close_a_cont_wrt_a_typ_rec k T5 c)
  | (a_cont_tapp T c) => a_cont_tapp (close_a_typ_wrt_a_typ_rec k T5 T) (close_a_cont_wrt_a_typ_rec k T5 c)
  | (a_cont_sub T) => a_cont_sub (close_a_typ_wrt_a_typ_rec k T5 T)
end.

Fixpoint close_a_cont_wrt_a_exp_rec (k:nat) (e5:var) (c5:a_cont) {struct c5}: a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (close_a_exp_wrt_a_exp_rec k e5 e) (close_a_cont_wrt_a_exp_rec k e5 c)
  | (a_cont_tapp T c) => a_cont_tapp T (close_a_cont_wrt_a_exp_rec k e5 c)
  | (a_cont_sub T) => a_cont_sub T
end.

Definition close_a_binding_wrt_a_typ_rec (k:nat) (T_5:var) (b5:a_binding) : a_binding :=
  match b5 with
  | a_bind_tvarempty => a_bind_tvarempty 
  | a_bind_stvarempty => a_bind_stvarempty 
  | (a_bind_typ T) => a_bind_typ (close_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_bind_bound T1 T2) => a_bind_bound (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2)
end.

Definition close_a_work_wrt_a_typ_rec (k:nat) (T_5:var) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (close_a_exp_wrt_a_typ_rec k T_5 e) (close_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_check e T) => a_work_check (close_a_exp_wrt_a_typ_rec k T_5 e) (close_a_typ_wrt_a_typ_rec k T_5 T)
  | (a_work_infapp T e c) => a_work_infapp (close_a_typ_wrt_a_typ_rec k T_5 T) (close_a_exp_wrt_a_typ_rec k T_5 e) (close_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2) (close_a_cont_wrt_a_typ_rec k T_5 c)
  | (a_work_sub T1 T2) => a_work_sub (close_a_typ_wrt_a_typ_rec k T_5 T1) (close_a_typ_wrt_a_typ_rec k T_5 T2)
  | (a_work_apply c T) => a_work_apply (close_a_cont_wrt_a_typ_rec k T_5 c) (close_a_typ_wrt_a_typ_rec k T_5 T)
end.

Definition close_a_work_wrt_a_exp_rec (k:nat) (e5:var) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (close_a_exp_wrt_a_exp_rec k e5 e) (close_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_check e T) => a_work_check (close_a_exp_wrt_a_exp_rec k e5 e) T
  | (a_work_infapp T e c) => a_work_infapp T (close_a_exp_wrt_a_exp_rec k e5 e) (close_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp T1 T2 (close_a_cont_wrt_a_exp_rec k e5 c)
  | (a_work_sub T1 T2) => a_work_sub T1 T2
  | (a_work_apply c T) => a_work_apply (close_a_cont_wrt_a_exp_rec k e5 c) T
end.

Fixpoint close_a_worklist_wrt_a_typ_rec (k:nat) (T5:var) (W_5:a_worklist) {struct W_5}: a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (close_a_worklist_wrt_a_typ_rec k T5 W) x (close_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_constvar W X b) => a_wl_constvar (close_a_worklist_wrt_a_typ_rec k T5 W) X (close_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consstvar W SX b) => a_wl_consstvar (close_a_worklist_wrt_a_typ_rec k T5 W) SX (close_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consetvar W EX b) => a_wl_consetvar (close_a_worklist_wrt_a_typ_rec k T5 W) EX (close_a_binding_wrt_a_typ_rec k T5 b)
  | (a_wl_consw W w) => a_wl_consw (close_a_worklist_wrt_a_typ_rec k T5 W) (close_a_work_wrt_a_typ_rec k T5 w)
end.

Fixpoint close_a_worklist_wrt_a_exp_rec (k:nat) (e5:var) (W_5:a_worklist) {struct W_5}: a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (close_a_worklist_wrt_a_exp_rec k e5 W) x b
  | (a_wl_constvar W X b) => a_wl_constvar (close_a_worklist_wrt_a_exp_rec k e5 W) X b
  | (a_wl_consstvar W SX b) => a_wl_consstvar (close_a_worklist_wrt_a_exp_rec k e5 W) SX b
  | (a_wl_consetvar W EX b) => a_wl_consetvar (close_a_worklist_wrt_a_exp_rec k e5 W) EX b
  | (a_wl_consw W w) => a_wl_consw (close_a_worklist_wrt_a_exp_rec k e5 W) (close_a_work_wrt_a_exp_rec k e5 w)
end.

Definition close_a_exp_wrt_a_exp e__6 e_5 := close_a_exp_wrt_a_exp_rec 0 e__6 e_5.

Definition close_a_body_wrt_a_exp a_body5 e5 := close_a_body_wrt_a_exp_rec 0 a_body5 e5.

Definition close_a_exp_wrt_a_typ e_5 T_5 := close_a_exp_wrt_a_typ_rec 0 e_5 T_5.

Definition close_a_work_wrt_a_exp w5 e5 := close_a_work_wrt_a_exp_rec 0 w5 e5.

Definition close_a_worklist_wrt_a_typ W_5 T5 := close_a_worklist_wrt_a_typ_rec 0 W_5 T5.

Definition close_a_cont_wrt_a_exp c5 e5 := close_a_cont_wrt_a_exp_rec 0 c5 e5.

Definition close_a_binding_wrt_a_typ b5 T_5 := close_a_binding_wrt_a_typ_rec 0 b5 T_5.

Definition close_a_cont_wrt_a_typ c5 T5 := close_a_cont_wrt_a_typ_rec 0 c5 T5.

Definition close_a_worklist_wrt_a_exp W_5 e5 := close_a_worklist_wrt_a_exp_rec 0 W_5 e5.

Definition close_a_body_wrt_a_typ a_body5 T5 := close_a_body_wrt_a_typ_rec 0 a_body5 T5.

Definition close_a_typ_wrt_a_typ T__6 T_5 := close_a_typ_wrt_a_typ_rec 0 T__6 T_5.

Definition close_a_work_wrt_a_typ w5 T_5 := close_a_work_wrt_a_typ_rec 0 w5 T_5.

(** terms are locally-closed pre-terms *)
(** definitions *)

(* defns LC_a_typ *)
Inductive lc_a_typ : a_typ -> Prop :=    (* defn lc_a_typ *)
 | lc_a_typ_unit : 
     (lc_a_typ a_typ_unit)
 | lc_a_typ_top : 
     (lc_a_typ a_typ_top)
 | lc_a_typ_bot : 
     (lc_a_typ a_typ_bot)
 | lc_a_typ_tvar_f : forall (X:typvar),
     (lc_a_typ (a_typ_tvar_f X))
 | lc_a_typ_stvar : forall (SX:stypvar),
     (lc_a_typ (a_typ_stvar SX))
 | lc_a_typ_etvar : forall (EX:etypvar),
     (lc_a_typ (a_typ_etvar EX))
 | lc_a_typ_arrow : forall (T1 T2:a_typ),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_typ (a_typ_arrow T1 T2))
 | lc_a_typ_all : forall (T:a_typ),
      ( forall X , lc_a_typ  ( open_a_typ_wrt_a_typ T (a_typ_tvar_f X) )  )  ->
     (lc_a_typ (a_typ_all T))
 | lc_a_typ_union : forall (T1 T2:a_typ),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_typ (a_typ_union T1 T2))
 | lc_a_typ_intersection : forall (T1 T2:a_typ),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_typ (a_typ_intersection T1 T2)).

(* defns LC_a_exp_a_body *)
Inductive lc_a_exp : a_exp -> Prop :=    (* defn lc_a_exp *)
 | lc_a_exp_unit : 
     (lc_a_exp a_exp_unit)
 | lc_a_exp_top : 
     (lc_a_exp a_exp_top)
 | lc_a_exp_var_f : forall (x:expvar),
     (lc_a_exp (a_exp_var_f x))
 | lc_a_exp_abs : forall (e:a_exp),
      ( forall x , lc_a_exp  ( open_a_exp_wrt_a_exp e (a_exp_var_f x) )  )  ->
     (lc_a_exp (a_exp_abs e))
 | lc_a_exp_app : forall (e1 e2:a_exp),
     (lc_a_exp e1) ->
     (lc_a_exp e2) ->
     (lc_a_exp (a_exp_app e1 e2))
 | lc_a_exp_tabs : forall (a_body5:a_body),
      ( forall X , lc_a_body  ( open_a_body_wrt_a_typ a_body5 (a_typ_tvar_f X) )  )  ->
     (lc_a_exp (a_exp_tabs a_body5))
 | lc_a_exp_tapp : forall (e:a_exp) (T:a_typ),
     (lc_a_exp e) ->
     (lc_a_typ T) ->
     (lc_a_exp (a_exp_tapp e T))
 | lc_a_exp_anno : forall (e:a_exp) (T:a_typ),
     (lc_a_exp e) ->
     (lc_a_typ T) ->
     (lc_a_exp (a_exp_anno e T))
with lc_a_body : a_body -> Prop :=    (* defn lc_a_body *)
 | lc_a_body_anno : forall (e:a_exp) (T:a_typ),
     (lc_a_exp e) ->
     (lc_a_typ T) ->
     (lc_a_body (a_body_anno e T)).

(* defns LC_a_cont *)
Inductive lc_a_cont : a_cont -> Prop :=    (* defn lc_a_cont *)
 | lc_a_cont_done : 
     (lc_a_cont a_cont_done)
 | lc_a_cont_app : forall (e:a_exp) (c:a_cont),
     (lc_a_exp e) ->
     (lc_a_cont c) ->
     (lc_a_cont (a_cont_app e c))
 | lc_a_cont_tapp : forall (T:a_typ) (c:a_cont),
     (lc_a_typ T) ->
     (lc_a_cont c) ->
     (lc_a_cont (a_cont_tapp T c))
 | lc_a_cont_sub : forall (T:a_typ),
     (lc_a_typ T) ->
     (lc_a_cont (a_cont_sub T)).

(* defns LC_a_binding *)
Inductive lc_a_binding : a_binding -> Prop :=    (* defn lc_a_binding *)
 | lc_a_bind_tvarempty : 
     (lc_a_binding a_bind_tvarempty)
 | lc_a_bind_stvarempty : 
     (lc_a_binding a_bind_stvarempty)
 | lc_a_bind_typ : forall (T:a_typ),
     (lc_a_typ T) ->
     (lc_a_binding (a_bind_typ T))
 | lc_a_bind_bound : forall (T1 T2:a_typ),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_binding (a_bind_bound T1 T2)).

(* defns LC_a_work *)
Inductive lc_a_work : a_work -> Prop :=    (* defn lc_a_work *)
 | lc_a_work_infer : forall (e:a_exp) (c:a_cont),
     (lc_a_exp e) ->
     (lc_a_cont c) ->
     (lc_a_work (a_work_infer e c))
 | lc_a_work_check : forall (e:a_exp) (T:a_typ),
     (lc_a_exp e) ->
     (lc_a_typ T) ->
     (lc_a_work (a_work_check e T))
 | lc_a_work_infapp : forall (T:a_typ) (e:a_exp) (c:a_cont),
     (lc_a_typ T) ->
     (lc_a_exp e) ->
     (lc_a_cont c) ->
     (lc_a_work (a_work_infapp T e c))
 | lc_a_work_inftapp : forall (T1 T2:a_typ) (c:a_cont),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_cont c) ->
     (lc_a_work (a_work_inftapp T1 T2 c))
 | lc_a_work_sub : forall (T1 T2:a_typ),
     (lc_a_typ T1) ->
     (lc_a_typ T2) ->
     (lc_a_work (a_work_sub T1 T2))
 | lc_a_work_apply : forall (c:a_cont) (T:a_typ),
     (lc_a_cont c) ->
     (lc_a_typ T) ->
     (lc_a_work (a_work_apply c T)).

(* defns LC_a_worklist *)
Inductive lc_a_worklist : a_worklist -> Prop :=    (* defn lc_a_worklist *)
 | lc_a_wl_nil : 
     (lc_a_worklist a_wl_nil)
 | lc_a_wl_consvar : forall (W:a_worklist) (x:expvar) (b:a_binding),
     (lc_a_worklist W) ->
     (lc_a_binding b) ->
     (lc_a_worklist (a_wl_consvar W x b))
 | lc_a_wl_constvar : forall (W:a_worklist) (X:typvar) (b:a_binding),
     (lc_a_worklist W) ->
     (lc_a_binding b) ->
     (lc_a_worklist (a_wl_constvar W X b))
 | lc_a_wl_consstvar : forall (W:a_worklist) (SX:stypvar) (b:a_binding),
     (lc_a_worklist W) ->
     (lc_a_binding b) ->
     (lc_a_worklist (a_wl_consstvar W SX b))
 | lc_a_wl_consetvar : forall (W:a_worklist) (EX:etypvar) (b:a_binding),
     (lc_a_worklist W) ->
     (lc_a_binding b) ->
     (lc_a_worklist (a_wl_consetvar W EX b))
 | lc_a_wl_consw : forall (W:a_worklist) (w:a_work),
     (lc_a_worklist W) ->
     (lc_a_work w) ->
     (lc_a_worklist (a_wl_consw W w)).
(** free variables *)
Fixpoint ftv_in_a_typ (T_5:a_typ) : vars :=
  match T_5 with
  | a_typ_unit => {}
  | a_typ_top => {}
  | a_typ_bot => {}
  | (a_typ_tvar_b nat) => {}
  | (a_typ_tvar_f X) => {{X}}
  | (a_typ_stvar SX) => {}
  | (a_typ_etvar EX) => {}
  | (a_typ_arrow T1 T2) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2)
  | (a_typ_all T) => (ftv_in_a_typ T)
  | (a_typ_union T1 T2) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2)
  | (a_typ_intersection T1 T2) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2)
end.

Fixpoint fetv_in_a_typ (T_5:a_typ) : vars :=
  match T_5 with
  | a_typ_unit => {}
  | a_typ_top => {}
  | a_typ_bot => {}
  | (a_typ_tvar_b nat) => {}
  | (a_typ_tvar_f X) => {}
  | (a_typ_stvar SX) => {}
  | (a_typ_etvar EX) => {{EX}}
  | (a_typ_arrow T1 T2) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2)
  | (a_typ_all T) => (fetv_in_a_typ T)
  | (a_typ_union T1 T2) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2)
  | (a_typ_intersection T1 T2) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2)
end.

Fixpoint fstv_in_a_typ (T_5:a_typ) : vars :=
  match T_5 with
  | a_typ_unit => {}
  | a_typ_top => {}
  | a_typ_bot => {}
  | (a_typ_tvar_b nat) => {}
  | (a_typ_tvar_f X) => {}
  | (a_typ_stvar SX) => {{SX}}
  | (a_typ_etvar EX) => {}
  | (a_typ_arrow T1 T2) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2)
  | (a_typ_all T) => (fstv_in_a_typ T)
  | (a_typ_union T1 T2) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2)
  | (a_typ_intersection T1 T2) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2)
end.

Fixpoint ftv_in_a_exp (e_5:a_exp) : vars :=
  match e_5 with
  | a_exp_unit => {}
  | a_exp_top => {}
  | (a_exp_var_b nat) => {}
  | (a_exp_var_f x) => {}
  | (a_exp_abs e) => (ftv_in_a_exp e)
  | (a_exp_app e1 e2) => (ftv_in_a_exp e1) \u (ftv_in_a_exp e2)
  | (a_exp_tabs a_body5) => (ftv_in_a_body a_body5)
  | (a_exp_tapp e T) => (ftv_in_a_exp e) \u (ftv_in_a_typ T)
  | (a_exp_anno e T) => (ftv_in_a_exp e) \u (ftv_in_a_typ T)
end
with ftv_in_a_body (a_body5:a_body) : vars :=
  match a_body5 with
  | (a_body_anno e T) => (ftv_in_a_exp e) \u (ftv_in_a_typ T)
end.

Fixpoint fetv_in_a_exp (e_5:a_exp) : vars :=
  match e_5 with
  | a_exp_unit => {}
  | a_exp_top => {}
  | (a_exp_var_b nat) => {}
  | (a_exp_var_f x) => {}
  | (a_exp_abs e) => (fetv_in_a_exp e)
  | (a_exp_app e1 e2) => (fetv_in_a_exp e1) \u (fetv_in_a_exp e2)
  | (a_exp_tabs a_body5) => (fetv_in_a_body a_body5)
  | (a_exp_tapp e T) => (fetv_in_a_exp e) \u (fetv_in_a_typ T)
  | (a_exp_anno e T) => (fetv_in_a_exp e) \u (fetv_in_a_typ T)
end
with fetv_in_a_body (a_body5:a_body) : vars :=
  match a_body5 with
  | (a_body_anno e T) => (fetv_in_a_exp e) \u (fetv_in_a_typ T)
end.

Fixpoint fstv_in_a_exp (e_5:a_exp) : vars :=
  match e_5 with
  | a_exp_unit => {}
  | a_exp_top => {}
  | (a_exp_var_b nat) => {}
  | (a_exp_var_f x) => {}
  | (a_exp_abs e) => (fstv_in_a_exp e)
  | (a_exp_app e1 e2) => (fstv_in_a_exp e1) \u (fstv_in_a_exp e2)
  | (a_exp_tabs a_body5) => (fstv_in_a_body a_body5)
  | (a_exp_tapp e T) => (fstv_in_a_exp e) \u (fstv_in_a_typ T)
  | (a_exp_anno e T) => (fstv_in_a_exp e) \u (fstv_in_a_typ T)
end
with fstv_in_a_body (a_body5:a_body) : vars :=
  match a_body5 with
  | (a_body_anno e T) => (fstv_in_a_exp e) \u (fstv_in_a_typ T)
end.

Fixpoint fv_in_a_exp (e_5:a_exp) : vars :=
  match e_5 with
  | a_exp_unit => {}
  | a_exp_top => {}
  | (a_exp_var_b nat) => {}
  | (a_exp_var_f x) => {{x}}
  | (a_exp_abs e) => (fv_in_a_exp e)
  | (a_exp_app e1 e2) => (fv_in_a_exp e1) \u (fv_in_a_exp e2)
  | (a_exp_tabs a_body5) => (fv_in_a_body a_body5)
  | (a_exp_tapp e T) => (fv_in_a_exp e)
  | (a_exp_anno e T) => (fv_in_a_exp e)
end
with fv_in_a_body (a_body5:a_body) : vars :=
  match a_body5 with
  | (a_body_anno e T) => (fv_in_a_exp e)
end.

Fixpoint ftv_in_a_cont (c5:a_cont) : vars :=
  match c5 with
  | a_cont_done => {}
  | (a_cont_app e c) => (ftv_in_a_exp e) \u (ftv_in_a_cont c)
  | (a_cont_tapp T c) => (ftv_in_a_typ T) \u (ftv_in_a_cont c)
  | (a_cont_sub T) => (ftv_in_a_typ T)
end.

Fixpoint fetv_in_a_cont (c5:a_cont) : vars :=
  match c5 with
  | a_cont_done => {}
  | (a_cont_app e c) => (fetv_in_a_exp e) \u (fetv_in_a_cont c)
  | (a_cont_tapp T c) => (fetv_in_a_typ T) \u (fetv_in_a_cont c)
  | (a_cont_sub T) => (fetv_in_a_typ T)
end.

Fixpoint fstv_in_a_cont (c5:a_cont) : vars :=
  match c5 with
  | a_cont_done => {}
  | (a_cont_app e c) => (fstv_in_a_exp e) \u (fstv_in_a_cont c)
  | (a_cont_tapp T c) => (fstv_in_a_typ T) \u (fstv_in_a_cont c)
  | (a_cont_sub T) => (fstv_in_a_typ T)
end.

Fixpoint fv_in_a_cont (c5:a_cont) : vars :=
  match c5 with
  | a_cont_done => {}
  | (a_cont_app e c) => (fv_in_a_exp e) \u (fv_in_a_cont c)
  | (a_cont_tapp T c) => (fv_in_a_cont c)
  | (a_cont_sub T) => {}
end.

Definition ftv_in_a_binding (b5:a_binding) : vars :=
  match b5 with
  | a_bind_tvarempty => {}
  | a_bind_stvarempty => {}
  | (a_bind_typ T) => (ftv_in_a_typ T)
  | (a_bind_bound T1 T2) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2)
end.

Definition ftv_in_a_work (w5:a_work) : vars :=
  match w5 with
  | (a_work_infer e c) => (ftv_in_a_exp e) \u (ftv_in_a_cont c)
  | (a_work_check e T) => (ftv_in_a_exp e) \u (ftv_in_a_typ T)
  | (a_work_infapp T e c) => (ftv_in_a_typ T) \u (ftv_in_a_exp e) \u (ftv_in_a_cont c)
  | (a_work_inftapp T1 T2 c) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2) \u (ftv_in_a_cont c)
  | (a_work_sub T1 T2) => (ftv_in_a_typ T1) \u (ftv_in_a_typ T2)
  | (a_work_apply c T) => (ftv_in_a_cont c) \u (ftv_in_a_typ T)
end.

Definition fetv_in_a_work (w5:a_work) : vars :=
  match w5 with
  | (a_work_infer e c) => (fetv_in_a_exp e) \u (fetv_in_a_cont c)
  | (a_work_check e T) => (fetv_in_a_exp e) \u (fetv_in_a_typ T)
  | (a_work_infapp T e c) => (fetv_in_a_typ T) \u (fetv_in_a_exp e) \u (fetv_in_a_cont c)
  | (a_work_inftapp T1 T2 c) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2) \u (fetv_in_a_cont c)
  | (a_work_sub T1 T2) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2)
  | (a_work_apply c T) => (fetv_in_a_cont c) \u (fetv_in_a_typ T)
end.

Definition fetv_in_a_binding (b5:a_binding) : vars :=
  match b5 with
  | a_bind_tvarempty => {}
  | a_bind_stvarempty => {}
  | (a_bind_typ T) => (fetv_in_a_typ T)
  | (a_bind_bound T1 T2) => (fetv_in_a_typ T1) \u (fetv_in_a_typ T2)
end.

Definition fstv_in_a_work (w5:a_work) : vars :=
  match w5 with
  | (a_work_infer e c) => (fstv_in_a_exp e) \u (fstv_in_a_cont c)
  | (a_work_check e T) => (fstv_in_a_exp e) \u (fstv_in_a_typ T)
  | (a_work_infapp T e c) => (fstv_in_a_typ T) \u (fstv_in_a_exp e) \u (fstv_in_a_cont c)
  | (a_work_inftapp T1 T2 c) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2) \u (fstv_in_a_cont c)
  | (a_work_sub T1 T2) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2)
  | (a_work_apply c T) => (fstv_in_a_cont c) \u (fstv_in_a_typ T)
end.

Definition fstv_in_a_binding (b5:a_binding) : vars :=
  match b5 with
  | a_bind_tvarempty => {}
  | a_bind_stvarempty => {}
  | (a_bind_typ T) => (fstv_in_a_typ T)
  | (a_bind_bound T1 T2) => (fstv_in_a_typ T1) \u (fstv_in_a_typ T2)
end.

Definition fv_in_a_work (w5:a_work) : vars :=
  match w5 with
  | (a_work_infer e c) => (fv_in_a_exp e) \u (fv_in_a_cont c)
  | (a_work_check e T) => (fv_in_a_exp e)
  | (a_work_infapp T e c) => (fv_in_a_exp e) \u (fv_in_a_cont c)
  | (a_work_inftapp T1 T2 c) => (fv_in_a_cont c)
  | (a_work_sub T1 T2) => {}
  | (a_work_apply c T) => (fv_in_a_cont c)
end.

Fixpoint ftv_in_a_worklist (W_5:a_worklist) : vars :=
  match W_5 with
  | a_wl_nil => {}
  | (a_wl_consvar W x b) => (ftv_in_a_worklist W) \u (ftv_in_a_binding b)
  | (a_wl_constvar W X b) => (ftv_in_a_worklist W) \u (ftv_in_a_binding b)
  | (a_wl_consstvar W SX b) => (ftv_in_a_worklist W) \u (ftv_in_a_binding b)
  | (a_wl_consetvar W EX b) => (ftv_in_a_worklist W) \u (ftv_in_a_binding b)
  | (a_wl_consw W w) => (ftv_in_a_worklist W) \u (ftv_in_a_work w)
end.

Fixpoint fetv_in_a_worklist (W_5:a_worklist) : vars :=
  match W_5 with
  | a_wl_nil => {}
  | (a_wl_consvar W x b) => (fetv_in_a_worklist W) \u (fetv_in_a_binding b)
  | (a_wl_constvar W X b) => (fetv_in_a_worklist W) \u (fetv_in_a_binding b)
  | (a_wl_consstvar W SX b) => (fetv_in_a_worklist W) \u (fetv_in_a_binding b)
  | (a_wl_consetvar W EX b) => (fetv_in_a_worklist W) \u (fetv_in_a_binding b)
  | (a_wl_consw W w) => (fetv_in_a_worklist W) \u (fetv_in_a_work w)
end.

Fixpoint fstv_in_a_worklist (W_5:a_worklist) : vars :=
  match W_5 with
  | a_wl_nil => {}
  | (a_wl_consvar W x b) => (fstv_in_a_worklist W) \u (fstv_in_a_binding b)
  | (a_wl_constvar W X b) => (fstv_in_a_worklist W) \u (fstv_in_a_binding b)
  | (a_wl_consstvar W SX b) => (fstv_in_a_worklist W) \u (fstv_in_a_binding b)
  | (a_wl_consetvar W EX b) => (fstv_in_a_worklist W) \u (fstv_in_a_binding b)
  | (a_wl_consw W w) => (fstv_in_a_worklist W) \u (fstv_in_a_work w)
end.

Fixpoint fv_in_a_worklist (W_5:a_worklist) : vars :=
  match W_5 with
  | a_wl_nil => {}
  | (a_wl_consvar W x b) => (fv_in_a_worklist W)
  | (a_wl_constvar W X b) => (fv_in_a_worklist W)
  | (a_wl_consstvar W SX b) => (fv_in_a_worklist W)
  | (a_wl_consetvar W EX b) => (fv_in_a_worklist W)
  | (a_wl_consw W w) => (fv_in_a_worklist W) \u (fv_in_a_work w)
end.

(** substitutions *)
Fixpoint a_subst_tv_in_a_typ (T_5:a_typ) (X5:typvar) (T__6:a_typ) {struct T__6} : a_typ :=
  match T__6 with
  | a_typ_unit => a_typ_unit 
  | a_typ_top => a_typ_top 
  | a_typ_bot => a_typ_bot 
  | (a_typ_tvar_b nat) => a_typ_tvar_b nat
  | (a_typ_tvar_f X) => (if eq_var X X5 then T_5 else (a_typ_tvar_f X))
  | (a_typ_stvar SX) => a_typ_stvar SX
  | (a_typ_etvar EX) => a_typ_etvar EX
  | (a_typ_arrow T1 T2) => a_typ_arrow (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2)
  | (a_typ_all T) => a_typ_all (a_subst_tv_in_a_typ T_5 X5 T)
  | (a_typ_union T1 T2) => a_typ_union (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2)
  | (a_typ_intersection T1 T2) => a_typ_intersection (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2)
end.

Fixpoint a_subst_etv_in_a_typ (T_5:a_typ) (EX5:etypvar) (T__6:a_typ) {struct T__6} : a_typ :=
  match T__6 with
  | a_typ_unit => a_typ_unit 
  | a_typ_top => a_typ_top 
  | a_typ_bot => a_typ_bot 
  | (a_typ_tvar_b nat) => a_typ_tvar_b nat
  | (a_typ_tvar_f X) => a_typ_tvar_f X
  | (a_typ_stvar SX) => a_typ_stvar SX
  | (a_typ_etvar EX) => (if eq_var EX EX5 then T_5 else (a_typ_etvar EX))
  | (a_typ_arrow T1 T2) => a_typ_arrow (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2)
  | (a_typ_all T) => a_typ_all (a_subst_etv_in_a_typ T_5 EX5 T)
  | (a_typ_union T1 T2) => a_typ_union (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2)
  | (a_typ_intersection T1 T2) => a_typ_intersection (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2)
end.

Fixpoint a_subst_stv_in_a_typ (T_5:a_typ) (SX5:stypvar) (T__6:a_typ) {struct T__6} : a_typ :=
  match T__6 with
  | a_typ_unit => a_typ_unit 
  | a_typ_top => a_typ_top 
  | a_typ_bot => a_typ_bot 
  | (a_typ_tvar_b nat) => a_typ_tvar_b nat
  | (a_typ_tvar_f X) => a_typ_tvar_f X
  | (a_typ_stvar SX) => (if eq_var SX SX5 then T_5 else (a_typ_stvar SX))
  | (a_typ_etvar EX) => a_typ_etvar EX
  | (a_typ_arrow T1 T2) => a_typ_arrow (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2)
  | (a_typ_all T) => a_typ_all (a_subst_stv_in_a_typ T_5 SX5 T)
  | (a_typ_union T1 T2) => a_typ_union (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2)
  | (a_typ_intersection T1 T2) => a_typ_intersection (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2)
end.

Fixpoint a_subst_tv_in_a_exp (T_5:a_typ) (X5:typvar) (e_5:a_exp) {struct e_5} : a_exp :=
  match e_5 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (a_subst_tv_in_a_exp T_5 X5 e)
  | (a_exp_app e1 e2) => a_exp_app (a_subst_tv_in_a_exp T_5 X5 e1) (a_subst_tv_in_a_exp T_5 X5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (a_subst_tv_in_a_body T_5 X5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (a_subst_tv_in_a_exp T_5 X5 e) (a_subst_tv_in_a_typ T_5 X5 T)
  | (a_exp_anno e T) => a_exp_anno (a_subst_tv_in_a_exp T_5 X5 e) (a_subst_tv_in_a_typ T_5 X5 T)
end
with a_subst_tv_in_a_body (T5:a_typ) (X5:typvar) (a_body5:a_body) {struct a_body5} : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (a_subst_tv_in_a_exp T5 X5 e) (a_subst_tv_in_a_typ T5 X5 T)
end.

Fixpoint a_subst_etv_in_a_exp (T_5:a_typ) (EX5:etypvar) (e_5:a_exp) {struct e_5} : a_exp :=
  match e_5 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (a_subst_etv_in_a_exp T_5 EX5 e)
  | (a_exp_app e1 e2) => a_exp_app (a_subst_etv_in_a_exp T_5 EX5 e1) (a_subst_etv_in_a_exp T_5 EX5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (a_subst_etv_in_a_body T_5 EX5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (a_subst_etv_in_a_exp T_5 EX5 e) (a_subst_etv_in_a_typ T_5 EX5 T)
  | (a_exp_anno e T) => a_exp_anno (a_subst_etv_in_a_exp T_5 EX5 e) (a_subst_etv_in_a_typ T_5 EX5 T)
end
with a_subst_etv_in_a_body (T5:a_typ) (EX5:etypvar) (a_body5:a_body) {struct a_body5} : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (a_subst_etv_in_a_exp T5 EX5 e) (a_subst_etv_in_a_typ T5 EX5 T)
end.

Fixpoint a_subst_stv_in_a_exp (T_5:a_typ) (SX5:stypvar) (e_5:a_exp) {struct e_5} : a_exp :=
  match e_5 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => a_exp_var_f x
  | (a_exp_abs e) => a_exp_abs (a_subst_stv_in_a_exp T_5 SX5 e)
  | (a_exp_app e1 e2) => a_exp_app (a_subst_stv_in_a_exp T_5 SX5 e1) (a_subst_stv_in_a_exp T_5 SX5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (a_subst_stv_in_a_body T_5 SX5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (a_subst_stv_in_a_exp T_5 SX5 e) (a_subst_stv_in_a_typ T_5 SX5 T)
  | (a_exp_anno e T) => a_exp_anno (a_subst_stv_in_a_exp T_5 SX5 e) (a_subst_stv_in_a_typ T_5 SX5 T)
end
with a_subst_stv_in_a_body (T5:a_typ) (SX5:stypvar) (a_body5:a_body) {struct a_body5} : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (a_subst_stv_in_a_exp T5 SX5 e) (a_subst_stv_in_a_typ T5 SX5 T)
end.

Fixpoint a_subst_v_in_a_exp (e_5:a_exp) (x5:expvar) (e__6:a_exp) {struct e__6} : a_exp :=
  match e__6 with
  | a_exp_unit => a_exp_unit 
  | a_exp_top => a_exp_top 
  | (a_exp_var_b nat) => a_exp_var_b nat
  | (a_exp_var_f x) => (if eq_var x x5 then e_5 else (a_exp_var_f x))
  | (a_exp_abs e) => a_exp_abs (a_subst_v_in_a_exp e_5 x5 e)
  | (a_exp_app e1 e2) => a_exp_app (a_subst_v_in_a_exp e_5 x5 e1) (a_subst_v_in_a_exp e_5 x5 e2)
  | (a_exp_tabs a_body5) => a_exp_tabs (a_subst_v_in_a_body e_5 x5 a_body5)
  | (a_exp_tapp e T) => a_exp_tapp (a_subst_v_in_a_exp e_5 x5 e) T
  | (a_exp_anno e T) => a_exp_anno (a_subst_v_in_a_exp e_5 x5 e) T
end
with a_subst_v_in_a_body (e5:a_exp) (x5:expvar) (a_body5:a_body) {struct a_body5} : a_body :=
  match a_body5 with
  | (a_body_anno e T) => a_body_anno (a_subst_v_in_a_exp e5 x5 e) T
end.

Fixpoint a_subst_tv_in_a_cont (T5:a_typ) (X5:typvar) (c5:a_cont) {struct c5} : a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (a_subst_tv_in_a_exp T5 X5 e) (a_subst_tv_in_a_cont T5 X5 c)
  | (a_cont_tapp T c) => a_cont_tapp (a_subst_tv_in_a_typ T5 X5 T) (a_subst_tv_in_a_cont T5 X5 c)
  | (a_cont_sub T) => a_cont_sub (a_subst_tv_in_a_typ T5 X5 T)
end.

Fixpoint a_subst_etv_in_a_cont (T5:a_typ) (EX5:etypvar) (c5:a_cont) {struct c5} : a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (a_subst_etv_in_a_exp T5 EX5 e) (a_subst_etv_in_a_cont T5 EX5 c)
  | (a_cont_tapp T c) => a_cont_tapp (a_subst_etv_in_a_typ T5 EX5 T) (a_subst_etv_in_a_cont T5 EX5 c)
  | (a_cont_sub T) => a_cont_sub (a_subst_etv_in_a_typ T5 EX5 T)
end.

Fixpoint a_subst_stv_in_a_cont (T5:a_typ) (SX5:stypvar) (c5:a_cont) {struct c5} : a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (a_subst_stv_in_a_exp T5 SX5 e) (a_subst_stv_in_a_cont T5 SX5 c)
  | (a_cont_tapp T c) => a_cont_tapp (a_subst_stv_in_a_typ T5 SX5 T) (a_subst_stv_in_a_cont T5 SX5 c)
  | (a_cont_sub T) => a_cont_sub (a_subst_stv_in_a_typ T5 SX5 T)
end.

Fixpoint a_subst_v_in_a_cont (e5:a_exp) (x5:expvar) (c5:a_cont) {struct c5} : a_cont :=
  match c5 with
  | a_cont_done => a_cont_done 
  | (a_cont_app e c) => a_cont_app (a_subst_v_in_a_exp e5 x5 e) (a_subst_v_in_a_cont e5 x5 c)
  | (a_cont_tapp T c) => a_cont_tapp T (a_subst_v_in_a_cont e5 x5 c)
  | (a_cont_sub T) => a_cont_sub T
end.

Definition a_subst_tv_in_a_binding (T_5:a_typ) (X5:typvar) (b5:a_binding) : a_binding :=
  match b5 with
  | a_bind_tvarempty => a_bind_tvarempty 
  | a_bind_stvarempty => a_bind_stvarempty 
  | (a_bind_typ T) => a_bind_typ (a_subst_tv_in_a_typ T_5 X5 T)
  | (a_bind_bound T1 T2) => a_bind_bound (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2)
end.

Definition a_subst_tv_in_a_work (T_5:a_typ) (X5:typvar) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (a_subst_tv_in_a_exp T_5 X5 e) (a_subst_tv_in_a_cont T_5 X5 c)
  | (a_work_check e T) => a_work_check (a_subst_tv_in_a_exp T_5 X5 e) (a_subst_tv_in_a_typ T_5 X5 T)
  | (a_work_infapp T e c) => a_work_infapp (a_subst_tv_in_a_typ T_5 X5 T) (a_subst_tv_in_a_exp T_5 X5 e) (a_subst_tv_in_a_cont T_5 X5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2) (a_subst_tv_in_a_cont T_5 X5 c)
  | (a_work_sub T1 T2) => a_work_sub (a_subst_tv_in_a_typ T_5 X5 T1) (a_subst_tv_in_a_typ T_5 X5 T2)
  | (a_work_apply c T) => a_work_apply (a_subst_tv_in_a_cont T_5 X5 c) (a_subst_tv_in_a_typ T_5 X5 T)
end.

Definition a_subst_etv_in_a_work (T_5:a_typ) (EX5:etypvar) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (a_subst_etv_in_a_exp T_5 EX5 e) (a_subst_etv_in_a_cont T_5 EX5 c)
  | (a_work_check e T) => a_work_check (a_subst_etv_in_a_exp T_5 EX5 e) (a_subst_etv_in_a_typ T_5 EX5 T)
  | (a_work_infapp T e c) => a_work_infapp (a_subst_etv_in_a_typ T_5 EX5 T) (a_subst_etv_in_a_exp T_5 EX5 e) (a_subst_etv_in_a_cont T_5 EX5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2) (a_subst_etv_in_a_cont T_5 EX5 c)
  | (a_work_sub T1 T2) => a_work_sub (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2)
  | (a_work_apply c T) => a_work_apply (a_subst_etv_in_a_cont T_5 EX5 c) (a_subst_etv_in_a_typ T_5 EX5 T)
end.

Definition a_subst_etv_in_a_binding (T_5:a_typ) (EX5:etypvar) (b5:a_binding) : a_binding :=
  match b5 with
  | a_bind_tvarempty => a_bind_tvarempty 
  | a_bind_stvarempty => a_bind_stvarempty 
  | (a_bind_typ T) => a_bind_typ (a_subst_etv_in_a_typ T_5 EX5 T)
  | (a_bind_bound T1 T2) => a_bind_bound (a_subst_etv_in_a_typ T_5 EX5 T1) (a_subst_etv_in_a_typ T_5 EX5 T2)
end.

Definition a_subst_stv_in_a_work (T_5:a_typ) (SX5:stypvar) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (a_subst_stv_in_a_exp T_5 SX5 e) (a_subst_stv_in_a_cont T_5 SX5 c)
  | (a_work_check e T) => a_work_check (a_subst_stv_in_a_exp T_5 SX5 e) (a_subst_stv_in_a_typ T_5 SX5 T)
  | (a_work_infapp T e c) => a_work_infapp (a_subst_stv_in_a_typ T_5 SX5 T) (a_subst_stv_in_a_exp T_5 SX5 e) (a_subst_stv_in_a_cont T_5 SX5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2) (a_subst_stv_in_a_cont T_5 SX5 c)
  | (a_work_sub T1 T2) => a_work_sub (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2)
  | (a_work_apply c T) => a_work_apply (a_subst_stv_in_a_cont T_5 SX5 c) (a_subst_stv_in_a_typ T_5 SX5 T)
end.

Definition a_subst_stv_in_a_binding (T_5:a_typ) (SX5:stypvar) (b5:a_binding) : a_binding :=
  match b5 with
  | a_bind_tvarempty => a_bind_tvarempty 
  | a_bind_stvarempty => a_bind_stvarempty 
  | (a_bind_typ T) => a_bind_typ (a_subst_stv_in_a_typ T_5 SX5 T)
  | (a_bind_bound T1 T2) => a_bind_bound (a_subst_stv_in_a_typ T_5 SX5 T1) (a_subst_stv_in_a_typ T_5 SX5 T2)
end.

Definition a_subst_v_in_a_work (e5:a_exp) (x5:expvar) (w5:a_work) : a_work :=
  match w5 with
  | (a_work_infer e c) => a_work_infer (a_subst_v_in_a_exp e5 x5 e) (a_subst_v_in_a_cont e5 x5 c)
  | (a_work_check e T) => a_work_check (a_subst_v_in_a_exp e5 x5 e) T
  | (a_work_infapp T e c) => a_work_infapp T (a_subst_v_in_a_exp e5 x5 e) (a_subst_v_in_a_cont e5 x5 c)
  | (a_work_inftapp T1 T2 c) => a_work_inftapp T1 T2 (a_subst_v_in_a_cont e5 x5 c)
  | (a_work_sub T1 T2) => a_work_sub T1 T2
  | (a_work_apply c T) => a_work_apply (a_subst_v_in_a_cont e5 x5 c) T
end.

Fixpoint a_subst_tv_in_a_worklist (T5:a_typ) (X5:typvar) (W_5:a_worklist) {struct W_5} : a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (a_subst_tv_in_a_worklist T5 X5 W) x (a_subst_tv_in_a_binding T5 X5 b)
  | (a_wl_constvar W X b) => a_wl_constvar (a_subst_tv_in_a_worklist T5 X5 W) X (a_subst_tv_in_a_binding T5 X5 b)
  | (a_wl_consstvar W SX b) => a_wl_consstvar (a_subst_tv_in_a_worklist T5 X5 W) SX (a_subst_tv_in_a_binding T5 X5 b)
  | (a_wl_consetvar W EX b) => a_wl_consetvar (a_subst_tv_in_a_worklist T5 X5 W) EX (a_subst_tv_in_a_binding T5 X5 b)
  | (a_wl_consw W w) => a_wl_consw (a_subst_tv_in_a_worklist T5 X5 W) (a_subst_tv_in_a_work T5 X5 w)
end.

Fixpoint a_subst_etv_in_a_worklist (T5:a_typ) (EX5:etypvar) (W_5:a_worklist) {struct W_5} : a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (a_subst_etv_in_a_worklist T5 EX5 W) x (a_subst_etv_in_a_binding T5 EX5 b)
  | (a_wl_constvar W X b) => a_wl_constvar (a_subst_etv_in_a_worklist T5 EX5 W) X (a_subst_etv_in_a_binding T5 EX5 b)
  | (a_wl_consstvar W SX b) => a_wl_consstvar (a_subst_etv_in_a_worklist T5 EX5 W) SX (a_subst_etv_in_a_binding T5 EX5 b)
  | (a_wl_consetvar W EX b) => a_wl_consetvar (a_subst_etv_in_a_worklist T5 EX5 W) EX (a_subst_etv_in_a_binding T5 EX5 b)
  | (a_wl_consw W w) => a_wl_consw (a_subst_etv_in_a_worklist T5 EX5 W) (a_subst_etv_in_a_work T5 EX5 w)
end.

Fixpoint a_subst_stv_in_a_worklist (T5:a_typ) (SX5:stypvar) (W_5:a_worklist) {struct W_5} : a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (a_subst_stv_in_a_worklist T5 SX5 W) x (a_subst_stv_in_a_binding T5 SX5 b)
  | (a_wl_constvar W X b) => a_wl_constvar (a_subst_stv_in_a_worklist T5 SX5 W) X (a_subst_stv_in_a_binding T5 SX5 b)
  | (a_wl_consstvar W SX b) => a_wl_consstvar (a_subst_stv_in_a_worklist T5 SX5 W) SX (a_subst_stv_in_a_binding T5 SX5 b)
  | (a_wl_consetvar W EX b) => a_wl_consetvar (a_subst_stv_in_a_worklist T5 SX5 W) EX (a_subst_stv_in_a_binding T5 SX5 b)
  | (a_wl_consw W w) => a_wl_consw (a_subst_stv_in_a_worklist T5 SX5 W) (a_subst_stv_in_a_work T5 SX5 w)
end.

Fixpoint a_subst_v_in_a_worklist (e5:a_exp) (x5:expvar) (W_5:a_worklist) {struct W_5} : a_worklist :=
  match W_5 with
  | a_wl_nil => a_wl_nil 
  | (a_wl_consvar W x b) => a_wl_consvar (a_subst_v_in_a_worklist e5 x5 W) x b
  | (a_wl_constvar W X b) => a_wl_constvar (a_subst_v_in_a_worklist e5 x5 W) X b
  | (a_wl_consstvar W SX b) => a_wl_consstvar (a_subst_v_in_a_worklist e5 x5 W) SX b
  | (a_wl_consetvar W EX b) => a_wl_consetvar (a_subst_v_in_a_worklist e5 x5 W) EX b
  | (a_wl_consw W w) => a_wl_consw (a_subst_v_in_a_worklist e5 x5 W) (a_subst_v_in_a_work e5 x5 w)
end.



Fixpoint a_wl_app (Γ1 Γ2 : a_worklist) :=
  match Γ1 with 
  | a_wl_nil                 => Γ2 
  | a_wl_constvar Γ1' X b    => a_wl_constvar (a_wl_app Γ1' Γ2) X b
  | a_wl_consstvar Γ1' SX b  => a_wl_consstvar (a_wl_app Γ1' Γ2) SX b
  | a_wl_consetvar Γ1' EX b  => a_wl_consetvar (a_wl_app Γ1' Γ2) EX b
  | a_wl_consvar Γ1' x b     => a_wl_consvar (a_wl_app Γ1' Γ2) x b
  | a_wl_consw Γ1' w         => a_wl_consw (a_wl_app Γ1' Γ2) w
  end.


Definition fx_env_gen (fv : a_binding -> atoms) (E : a_env) : atoms :=
  fold_right (fun xb acc => match xb with (x , b) => acc `union` fv b end ) {} E.

Definition ftv_in_a_env := fx_env_gen ftv_in_a_binding.
Definition fstv_in_a_env := fx_env_gen fstv_in_a_binding.
Definition fetv_in_a_env := fx_env_gen fetv_in_a_binding.


Definition mono_intersection (T1 T2 : a_typ) : a_typ :=
  match T2 with
  | a_typ_top => T1 
  | _ => a_typ_intersection T1 T2
  end.

Definition mono_union (T1 T2 : a_typ) : a_typ :=
  match T2 with
  | a_typ_bot => T1 
  | _ => a_typ_union T1 T2
  end.

Fixpoint a_wl_to_env (Γ : a_worklist) : a_env :=
  match Γ with 
  | a_wl_nil => nil
  | a_wl_consw Γ1' _ => a_wl_to_env Γ1'
  | a_wl_constvar Γ1' X b => X ~ b ++ a_wl_to_env Γ1'
  | a_wl_consstvar Γ1' SX b => SX ~ b ++ a_wl_to_env Γ1'
  | a_wl_consetvar Γ1' EX b => EX ~ b ++ a_wl_to_env Γ1'
  | a_wl_consvar Γ1' x b => x ~ b ++ a_wl_to_env Γ1'
  end.


Fixpoint a_env_to_wl (E : a_env) : a_worklist :=
  match E with 
  | nil => a_wl_nil
  | (X , a_bind_tvarempty) :: E' => a_wl_constvar (a_env_to_wl E') X a_bind_tvarempty
  | (SX , a_bind_stvarempty) :: E' => a_wl_consstvar (a_env_to_wl E') SX a_bind_stvarempty
  | (EX , a_bind_bound S1 T1) :: E' => a_wl_constvar (a_env_to_wl E') EX (a_bind_bound S1 T1)
  | (x , a_bind_typ T1) :: E' => a_wl_constvar (a_env_to_wl E') x (a_bind_typ T1)
  end.

Inductive a_add_to_bound_and_reorder
  : a_worklist ->  list (atom*a_binding) -> etypvar -> a_typ -> a_mode_addbound -> a_worklist -> a_worklist -> Prop :=
  | a_abr_lbstop : forall Γ1 E EX T S1 T1, 
    EX `notin` fetv_in_a_typ T -> 
    a_add_to_bound_and_reorder
     (a_wl_consetvar Γ1 EX (a_bind_bound S1 T1)) E EX T a_modeab_lower (a_wl_consetvar (a_wl_app (a_env_to_wl E) Γ1) EX (a_bind_bound (mono_union T S1) T1)) a_wl_nil
  | a_abr_ubstop : forall Γ1 E EX T S1 T1, 
    EX `notin` fetv_in_a_typ T -> 
    a_add_to_bound_and_reorder
     (a_wl_consetvar Γ1 EX (a_bind_bound S1 T1)) E EX T a_modeab_upper (a_wl_consetvar (a_wl_app (a_env_to_wl E) Γ1) EX (a_bind_bound S1 (mono_intersection T T1))) a_wl_nil
  | a_abr_bbstop : forall Γ1 E EX T S1 T1, 
    EX `notin` fetv_in_a_typ T -> 
    a_add_to_bound_and_reorder
     (a_wl_consetvar Γ1 EX (a_bind_bound S1 T1)) E EX T a_modeab_upper (a_wl_consetvar (a_wl_app (a_env_to_wl E) Γ1) EX (a_bind_bound (mono_union T S1) (mono_intersection T T1))) a_wl_nil
  | a_abr_etvar_move : forall Γ1 EX1 b1 E EX T m Γ2 Γ3,
    EX `notin` fetv_in_a_binding b1 ->
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_consetvar Γ1 EX1 b1) ( (EX1 , b1) :: E ) EX T m Γ2 Γ3
  | a_abr_etvar_stay : forall Γ1 EX1 b1 E EX T m Γ2 Γ3,
    EX1 `notin` fetv_in_a_typ T /\ EX1 `notin` fetv_in_a_env E ->
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_consetvar Γ1 EX1 b1) E EX T m Γ2 (a_wl_consetvar Γ3 EX1 b1)
  | a_abr_tvar_stay : forall Γ1 X1 b1 E EX T m Γ2 Γ3,
    X1 `notin` ftv_in_a_typ T /\ X1 `notin` ftv_in_a_env E ->
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_constvar Γ1 X1 b1) E EX T m Γ2 (a_wl_constvar Γ3 X1 b1)
  | a_abr_stvar_stay : forall Γ1 SX1 b1 E EX T m Γ2 Γ3,
    SX1 `notin` fstv_in_a_typ T /\ SX1 `notin` fstv_in_a_env E ->
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_consstvar Γ1 SX1 b1) E EX T m Γ2 (a_wl_consstvar Γ3 SX1 b1)
  | a_abr_w_stay : forall Γ1 w1 E EX T m Γ2 Γ3,
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_consw Γ1 w1) E EX T m Γ2 (a_wl_consw Γ3 w1)
  | a_abr_var_stay : forall Γ1 x1 b1 E EX T m Γ2 Γ3,
    a_add_to_bound_and_reorder Γ1 E EX T m Γ2 Γ3 ->
    a_add_to_bound_and_reorder (a_wl_consvar Γ1 x1 b1) E EX T m Γ2 (a_wl_consvar Γ3 x1 b1) 
  .




(** definitions *)

(* defns Ja_tvar_strong_in *)
Inductive a_tvar_strongin : typvar -> a_typ -> Prop :=    (* defn a_tvar_strongin *)
 | a_tvarsin_var : forall (X:typvar),
     a_tvar_strongin X (a_typ_tvar_f X)
 | a_tvarsin_arrow1 : forall (X:typvar) (T1 T2:a_typ),
     lc_a_typ T2 ->
     a_tvar_strongin X T1 ->
     a_tvar_strongin X (a_typ_arrow T1 T2)
 | a_tvarsin_arrow2 : forall (X:typvar) (T1 T2:a_typ),
     lc_a_typ T1 ->
     a_tvar_strongin X T2 ->
     a_tvar_strongin X (a_typ_arrow T1 T2)
 | a_tvarsin_all : forall (L:vars) (X:typvar) (T:a_typ),
      ( forall Y , Y \notin  L  -> a_tvar_strongin X  ( open_a_typ_wrt_a_typ T (a_typ_tvar_f Y) )  )  ->
     a_tvar_strongin X (a_typ_all T)
 | a_tvarsin_union : forall (X:typvar) (T1 T2:a_typ),
     a_tvar_strongin X T1 ->
     a_tvar_strongin X T2 ->
     a_tvar_strongin X (a_typ_union T1 T2)
 | a_tvarsin_intersection : forall (X:typvar) (T1 T2:a_typ),
     a_tvar_strongin X T1 ->
     a_tvar_strongin X T2 ->
     a_tvar_strongin X (a_typ_intersection T1 T2).

(* defns Ja_stvar_strong_in *)
Inductive a_stvar_strongin : stypvar -> a_typ -> Prop :=    (* defn a_stvar_strongin *)
 | a_stvarsin_var : forall (SX:stypvar),
     a_stvar_strongin SX (a_typ_stvar SX)
 | a_stvarsin_arrow1 : forall (SX:stypvar) (T1 T2:a_typ),
     lc_a_typ T2 ->
     a_stvar_strongin SX T1 ->
     a_stvar_strongin SX (a_typ_arrow T1 T2)
 | a_stvarsin_arrow2 : forall (SX:stypvar) (T1 T2:a_typ),
     lc_a_typ T1 ->
     a_stvar_strongin SX T2 ->
     a_stvar_strongin SX (a_typ_arrow T1 T2)
 | a_stvarsin_all : forall (L:vars) (SX:stypvar) (T:a_typ),
      ( forall Y , Y \notin  L  -> a_stvar_strongin SX  ( open_a_typ_wrt_a_typ T (a_typ_tvar_f Y) )  )  ->
     a_stvar_strongin SX (a_typ_all T)
 | a_stvarsin_union : forall (SX:stypvar) (T1 T2:a_typ),
     a_stvar_strongin SX T1 ->
     a_stvar_strongin SX T2 ->
     a_stvar_strongin SX (a_typ_union T1 T2)
 | a_stvarsin_intersection : forall (SX:stypvar) (T1 T2:a_typ),
     a_stvar_strongin SX T1 ->
     a_stvar_strongin SX T2 ->
     a_stvar_strongin SX (a_typ_intersection T1 T2).

(* defns Ja_etvar_strong_in *)
Inductive a_etvar_strongin : etypvar -> a_typ -> Prop :=    (* defn a_etvar_strongin *)
 | a_etvarsin_var : forall (EX:etypvar),
     a_etvar_strongin EX (a_typ_etvar EX)
 | a_etvarsin_arrow1 : forall (EX:etypvar) (T1 T2:a_typ),
     lc_a_typ T2 ->
     a_etvar_strongin EX T1 ->
     a_etvar_strongin EX (a_typ_arrow T1 T2)
 | a_etvarsin_arrow2 : forall (EX:etypvar) (T1 T2:a_typ),
     lc_a_typ T1 ->
     a_etvar_strongin EX T2 ->
     a_etvar_strongin EX (a_typ_arrow T1 T2)
 | a_etvarsin_all : forall (L:vars) (EX:etypvar) (T:a_typ),
      ( forall Y , Y \notin  L  -> a_etvar_strongin EX  ( open_a_typ_wrt_a_typ T (a_typ_tvar_f Y) )  )  ->
     a_etvar_strongin EX (a_typ_all T)
 | a_etvarsin_union : forall (EX:etypvar) (T1 T2:a_typ),
     a_etvar_strongin EX T1 ->
     a_etvar_strongin EX T2 ->
     a_etvar_strongin EX (a_typ_union T1 T2)
 | a_etvarsin_intersection : forall (EX:etypvar) (T1 T2:a_typ),
     a_etvar_strongin EX T1 ->
     a_etvar_strongin EX T2 ->
     a_etvar_strongin EX (a_typ_intersection T1 T2).

(* defns Jawf_typ *)
Inductive a_wf_typ : a_worklist -> a_typ -> Prop :=    (* defn a_wf_typ *)
 | a_wftyp_unit : forall (W:a_worklist),
     lc_a_worklist W ->
     a_wf_typ W a_typ_unit
 | a_wftyp_bot : forall (W:a_worklist),
     lc_a_worklist W ->
     a_wf_typ W a_typ_bot
 | a_wftyp_top : forall (W:a_worklist),
     lc_a_worklist W ->
     a_wf_typ W a_typ_top
 | a_wftyp_tvar : forall (W:a_worklist) (X:typvar),
      binds ( X )  ( a_bind_tvarempty ) (  ( a_wl_to_env  W  )  )  ->
     a_wf_typ W (a_typ_tvar_f X)
 | a_wftyp_stvar : forall (W:a_worklist) (SX:stypvar),
      binds ( SX ) ( a_bind_stvarempty ) (  ( a_wl_to_env  W  )  )  ->
     a_wf_typ W (a_typ_stvar SX)
 | a_wftyp_etvar : forall (W:a_worklist) (EX:etypvar) (S1 T1:a_typ),
      binds ( EX ) ( (a_bind_bound S1 T1) ) (  ( a_wl_to_env  W  )  )  ->
     a_wf_typ W (a_typ_etvar EX)
 | a_wftyp_arrow : forall (W:a_worklist) (T1 T2:a_typ),
     a_wf_typ W T1 ->
     a_wf_typ W T2 ->
     a_wf_typ W (a_typ_arrow T1 T2)
 | a_wftyp_all : forall (L:vars) (W:a_worklist) (T1:a_typ),
      ( forall X , X \notin  L  -> a_tvar_strongin X  ( open_a_typ_wrt_a_typ T1 (a_typ_tvar_f X) )  )  ->
      ( forall X , X \notin  L  -> a_wf_typ (a_wl_constvar W X a_bind_tvarempty)  ( open_a_typ_wrt_a_typ T1 (a_typ_tvar_f X) )  )  ->
     a_wf_typ W (a_typ_all T1)
 | a_wftyp_union : forall (W:a_worklist) (T1 T2:a_typ),
     a_wf_typ W T1 ->
     a_wf_typ W T2 ->
     a_wf_typ W (a_typ_union T1 T2)
 | a_wftyp_intersection : forall (W:a_worklist) (T1 T2:a_typ),
     a_wf_typ W T1 ->
     a_wf_typ W T2 ->
     a_wf_typ W (a_typ_intersection T1 T2).

(* defns Jastrong_mono_typ *)
Inductive a_smono_typ : a_typ -> Prop :=    (* defn a_smono_typ *)
 | a_smtyp_unit : 
     a_smono_typ a_typ_unit
 | a_smtyp_tvar : forall (X:typvar),
     a_smono_typ (a_typ_tvar_f X)
 | a_smtyp_evar : forall (EX:etypvar),
     a_smono_typ (a_typ_etvar EX)
 | a_smtyp_arrow : forall (T1 T2:a_typ),
     a_smono_typ T1 ->
     a_smono_typ T2 ->
     a_smono_typ (a_typ_arrow T1 T2).

(* defns Jatyp_neq_all *)
Inductive a_typ_neq_all : a_typ -> Prop :=    (* defn a_typ_neq_all *)
 | a_typneqall_unit : 
     a_typ_neq_all a_typ_unit
 | a_typneqall_top : 
     a_typ_neq_all a_typ_top
 | a_typneqall_bot : 
     a_typ_neq_all a_typ_bot
 | a_typneqall_tvar : forall (X:typvar),
     a_typ_neq_all (a_typ_tvar_f X)
 | a_typneqall_stvar : forall (SX:stypvar),
     a_typ_neq_all (a_typ_stvar SX)
 | a_typneqall_etvar : forall (EX:etypvar),
     a_typ_neq_all (a_typ_etvar EX)
 | a_typneqall_arrow : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_all (a_typ_arrow T1 T2)
 | a_typneqall_union : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_all (a_typ_union T1 T2)
 | a_typneqall_intersection : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_all (a_typ_intersection T1 T2).

(* defns Jatyp_neq_intersection *)
Inductive a_typ_neq_intersection : a_typ -> Prop :=    (* defn a_typ_neq_intersection *)
 | a_typneqinter_unit : 
     a_typ_neq_intersection a_typ_unit
 | a_typneqinter_top : 
     a_typ_neq_intersection a_typ_top
 | a_typneqinter_bot : 
     a_typ_neq_intersection a_typ_bot
 | a_typneqinter_tvar : forall (X:typvar),
     a_typ_neq_intersection (a_typ_tvar_f X)
 | a_typneqinter_stvar : forall (SX:stypvar),
     a_typ_neq_intersection (a_typ_stvar SX)
 | a_typneqinter_etvar : forall (EX:etypvar),
     a_typ_neq_intersection (a_typ_etvar EX)
 | a_typneqinter_arrow : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_intersection (a_typ_arrow T1 T2)
 | a_typneqinter_all : forall (T:a_typ),
     lc_a_typ (a_typ_all T) ->
     a_typ_neq_intersection (a_typ_all T)
 | a_typneqinter_union : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_intersection (a_typ_union T1 T2).

(* defns Jatyp_neq_union *)
Inductive a_typ_neq_union : a_typ -> Prop :=    (* defn a_typ_neq_union *)
 | a_typnequnion_unit : 
     a_typ_neq_union a_typ_unit
 | a_typnequnion_top : 
     a_typ_neq_union a_typ_top
 | a_typnequnion_bot : 
     a_typ_neq_union a_typ_bot
 | a_typnequnion_tvar : forall (X:typvar),
     a_typ_neq_union (a_typ_tvar_f X)
 | a_typnequnion_stvar : forall (SX:stypvar),
     a_typ_neq_union (a_typ_stvar SX)
 | a_typnequnion_etvar : forall (EX:etypvar),
     a_typ_neq_union (a_typ_etvar EX)
 | a_typnequnion_arrow : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_union (a_typ_arrow T1 T2)
 | a_typnequnion_all : forall (T:a_typ),
     lc_a_typ (a_typ_all T) ->
     a_typ_neq_union (a_typ_all T)
 | a_typnequnion_intersection : forall (T1 T2:a_typ),
     lc_a_typ T1 ->
     lc_a_typ T2 ->
     a_typ_neq_union (a_typ_intersection T1 T2).

(* defns Janeq_abs *)
Inductive da_exp_neq_abs : a_exp -> Prop :=    (* defn da_exp_neq_abs *)
 | a_expneqabs_unit : 
     da_exp_neq_abs a_exp_unit
 | a_expneqabs_top : 
     da_exp_neq_abs a_exp_top
 | a_expneqabs_var : forall (x:expvar),
     da_exp_neq_abs (a_exp_var_f x)
 | a_expneqabs_app : forall (e1 e2:a_exp),
     lc_a_exp e1 ->
     lc_a_exp e2 ->
     da_exp_neq_abs (a_exp_app e1 e2)
 | a_expneqabs_tabs : forall (e:a_exp) (T:a_typ),
     lc_a_exp (a_exp_tabs (a_body_anno e T)) ->
     da_exp_neq_abs (a_exp_tabs (a_body_anno e T))
 | a_expneqabs_tapp : forall (e:a_exp) (T:a_typ),
     lc_a_exp e ->
     lc_a_typ T ->
     da_exp_neq_abs (a_exp_tapp e T)
 | a_expneqabs_anno : forall (e:a_exp) (T:a_typ),
     lc_a_exp e ->
     lc_a_typ T ->
     da_exp_neq_abs (a_exp_anno e T).

(* defns Jaetvars_in_worklist *)
Inductive a_evs_in_wl : a_worklist -> etypvar -> etypvar -> Prop :=    (* defn a_evs_in_wl *)
 | a_evsinwl_in : forall (W:a_worklist) (EX2:etypvar) (S2 T2:a_typ) (EX1:etypvar) (S1 T1:a_typ),
     lc_a_typ S2 ->
     lc_a_typ T2 ->
      binds ( EX1 ) ( (a_bind_bound S1 T1) ) (  ( a_wl_to_env  W  )  )  ->
     a_evs_in_wl (a_wl_consetvar W EX2 (a_bind_bound S2 T2)) EX1 EX2
 | a_evsinwl_extraetvar : forall (W:a_worklist) (EX:etypvar) (b:a_binding) (EX1 EX2:etypvar),
     lc_a_binding b ->
     a_evs_in_wl W EX1 EX2 ->
     a_evs_in_wl (a_wl_consetvar W EX b) EX1 EX2
 | a_evsinwl_extratvar : forall (W:a_worklist) (X:typvar) (b:a_binding) (EX1 EX2:etypvar),
     lc_a_binding b ->
     a_evs_in_wl W EX1 EX2 ->
     a_evs_in_wl (a_wl_constvar W X b) EX1 EX2
 | a_evsinwl_extrastvar : forall (W:a_worklist) (SX:stypvar) (b:a_binding) (EX1 EX2:etypvar),
     lc_a_binding b ->
     a_evs_in_wl W EX1 EX2 ->
     a_evs_in_wl (a_wl_consstvar W SX b) EX1 EX2
 | a_evsinwl_extravar : forall (W:a_worklist) (x:expvar) (b:a_binding) (EX1 EX2:etypvar),
     lc_a_binding b ->
     a_evs_in_wl W EX1 EX2 ->
     a_evs_in_wl (a_wl_consvar W x b) EX1 EX2
 | a_evsinwl_extraw : forall (W:a_worklist) (w:a_work) (EX1 EX2:etypvar),
     lc_a_work w ->
     a_evs_in_wl W EX1 EX2 ->
     a_evs_in_wl (a_wl_consw W w) EX1 EX2.


(** infrastructure *)
#[export] Hint Constructors a_tvar_strongin a_stvar_strongin a_etvar_strongin a_wf_typ a_smono_typ a_typ_neq_all a_typ_neq_intersection a_typ_neq_union da_exp_neq_abs a_evs_in_wl lc_a_typ lc_a_exp lc_a_body lc_a_cont lc_a_binding lc_a_work lc_a_worklist : core.


