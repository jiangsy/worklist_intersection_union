metavar typvar, X, Y, Z     ::= {{ repr-locally-nameless }}
metavar expvar, x, y, z     ::= {{ repr-locally-nameless }}

grammar

typ, A, B, C, T:: typ_ ::=
  | UNIT           ::   :: unit
  | TOP            ::   :: top
  | BOT            ::   :: bot
  | X              ::   :: var
  | A1 -> A2       ::   :: arrow
  | ∀ X . A        ::   :: all  (+ bind X in A +)
  | A1 ⊔ A2        ::   :: union
  | A1 ⊓ A2        ::   :: intersection
  | ( A )          :: S :: paren {{ coq ([[A]]) }}
  | { A2 / X } A1  :: M :: subst {{ coq (open_typ_wrt_typ [[X A1]] [[A2]]) }}

body :: body_ ::= 
  | e : A ::  :: anno

exp, e, f, g :: exp_ ::=
  | unit                                ::   :: unit 
  | x                                   ::   :: var
  | \ x . e                             ::   :: abs  (+ bind x in e +)
  | e1 e2                               ::   :: app
  | \ X . body                          ::   :: tabs (+ bind X in body +) 
  | e @ A                               ::   :: tapp
  | e : A                               ::   :: anno
  | ( e )                               :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1                       :: M :: subst1 {{ coq (open_exp_wrt_exp [[x e1]] [[e2]]) }}
  | { A2 / X } e1                       :: M :: subst2 {{ coq (open_exp_wrt_typ [[X e1]] [[A2]]) }}

dbind, db :: dbind_ ::=
  | : ▪  ::   :: tvar_empty
  | : ~▪ ::   :: stvar_empty
  | : A  ::   :: typ

abind, ab :: abind_ ::=
  | : ▪       ::   :: tvar_empty
  | : ~▪      ::   :: stvar_empty
  | : A       ::   :: typ
  | : A1 < B1 ::   :: bound

substitutions
  single A X  :: subst_tvar_in
  single e x  :: subst_var_in

freevars
  A X  :: ftvar_in
  e x  :: fvar_in

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

denv, dE, dF, dG:: '' ::= {{ coq list (atom*dbind) }}
  | empty    ::   :: dempty {{ coq nil }}
  | dE , x db  ::   :: dcons1 {{ coq ([[x]]~[[db]] ++ [[dE]])  }}
  | dE , X db  ::   :: dcons2 {{ coq ([[X]]~[[db]] ++ [[dE]])  }}
  | ⌊ dW ⌋   :: M :: dwlenv {{ coq ( dwl_to_denv [[dW]] )}}

aenv, aE, aF, aG :: '' ::= {{ coq list (atom*abind) }}
  | empty    ::   :: aempty {{ coq nil }}
  | aE , x ab  ::   :: aconsvar {{ coq ([[x]]~[[ab]] ++ [[aE]])  }}
  | aE , X ab  ::   :: aconstvar {{ coq ([[X]]~[[ab]] ++ [[aE]]) }}
  | ⌊ aW ⌋    :: M :: awlenv {{ coq ( awl_to_aenv [[aW]] )}}

dvalue, v :: dvalue_ ::=
  | unit                 ::   :: unit
  | \ x . e              ::   :: abs  (+ bind x in e +)
  | \ X . body          ::   :: tabs (+ bind X in body +)

% dmaybetyp, MT :: dmaybetyp_ ::=
%   | none                 ::   :: none
%   | some A               ::   :: some  

cont, c :: 'cont_' ::=
  % | Done                :: :: done
  | _ ▹ c                :: :: infabs
  | _ ⊔▹ A1 ▹ c          :: :: infabsunion
  | _ • e =>=> c         :: :: infapp
  | _ ○ A =>=> c         :: :: inftapp
  | _ ⊔∘ A1 ○ A2 =>=> c  :: :: inftappunion
  | _ ⊔∘ A2 >> c         :: :: unioninftapp
  | _ ⊔▹ A2 >> c         :: :: unioninfabs
  | _ <: A               :: :: sub
  | ( c )                  :: S :: app {{ coq ( [[c]] )}}

work, w :: 'work_' ::=
  | e => c                 ::   :: infer
  | e <= A                 ::   :: check
  | A ▹ c                  ::   :: infabs
  | A1 ⊔▹ A2 ▹ c           ::   :: infabsunion
  | A • e =>=> c           ::   :: infapp
  | A1 ○ A2 =>=> c         ::   :: inftapp
  | A1 <: A2               ::   :: sub
  | A1 ⊔∘ A2 ○ B =>=> c    ::   :: inftappunion
  | A1 ⊔∘ A2 >> c          ::   :: unioninftapp
  | A1 ⊔▹ A2 >> c          ::   :: unioninfabs
  | c $ A                  ::   :: apply


dworklist, dW :: 'dworklist_' ::=
  | empty      ::   :: empty
  | dW , x db    ::   :: consvar 
  | dW , X db    ::   :: constvar 
  | dW , w      ::   :: conswork

aworklist, aW  :: 'aworklist_' ::=
  | nil         ::   :: empty 
  | aW , x ab   ::   :: consvar 
  | aW , X ab   ::   :: constvar
  | aW , w      ::   :: conswork
  | ( aW )      :: S :: paren {{ coq ( [[aW]] ) }}
  | aW1 ++ aW2  :: M :: app {{ coq ( awl_app [[aW2]] [[aW1]] )}}

formula :: formula_ ::=
  | judgement        ::   :: judgement
  | ( x db )  in dE    ::   :: binds1 {{ coq binds ([[x]])  ([[db]]) ([[dE]]) }}
  | ( X db )  in dE    ::   :: binds2 {{ coq binds ([[X]])  ([[db]]) ([[dE]]) }}
  | ( x ab )  in aE    ::   :: binds3 {{ coq binds ([[x]])  ([[ab]]) ([[aE]]) }}
  | ( X ab )  in aE    ::   :: binds4 {{ coq binds ([[X]])  ([[ab]]) ([[aE]]) }}
  | uniq dE           ::   :: uniq   {{ coq uniq ([[dE]]) }}
  | x  `notin` dom dE ::   :: fresh1 {{ coq ([[x]]  `notin` dom ([[dE]])) }}
  | X  `notin` dom dE ::   :: fresh2 {{ coq ([[X]]  `notin` dom ([[dE]])) }}
  | X in A           ::   :: appear1 {{ coq [[X]] `in` ftvar_in_typ [[A]]}}
  | A ¬= TOP         ::   :: neqtop  {{ coq ~ ([[A]] = typ_top)}}
  | ⌊ dW ⌋           ::   :: dwl_to_env {{ coq dwl_to_denv [[ dW ]] }}
  | ⌊ aW ⌋           ::   :: awl_to_env {{ coq awl_to_aenv [[ aW ]] }}

 
embed {{ coq 

Fixpoint dwl_to_denv (dW : dworklist) : denv :=
  match dW with 
  | dworklist_empty => nil
  | dworklist_conswork dW' _ => dwl_to_denv dW'
  | dworklist_constvar dW' X b => X ~ b ++ dwl_to_denv dW'
  | dworklist_consvar dW' x b => x ~ b ++ dwl_to_denv dW'
  end.

Fixpoint awl_to_aenv (aW : aworklist) : aenv :=
  match aW with 
  | aworklist_empty => nil
  | aworklist_conswork aW' _ => awl_to_aenv aW'
  | aworklist_constvar aW' X b => X ~ b ++ awl_to_aenv aW'
  | aworklist_consvar aW' x b => x ~ b ++ awl_to_aenv aW'
  end.


}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Jdstrong_in :: '' ::=

defn
X ∈ₛ A :: :: ds_in :: 'dsin_' by

------------------------ :: var
X ∈ₛ X 

X ∈ₛ A1
------------------------ :: arrow1
X ∈ₛ A1 -> A2 

X ∈ₛ A2
------------------------ :: arrow2
X ∈ₛ A1 -> A2 

X ∈ₛ A
------------------------ :: all
X ∈ₛ ∀ Y . A

X ∈ₛ A1
X ∈ₛ A2
------------------------ :: union
X ∈ₛ A1 ⊔ A2

X ∈ₛ A1
X ∈ₛ A2
------------------------ :: intersection
X ∈ₛ A1 ⊓ A2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% dvalue, v :: dvalue_ ::=
%   | unit                 ::   :: unit
%   | top                  ::   :: top
%   | \ x . e              ::   :: abs  (+ bind x in e +)
%   | \ X . body          ::   :: tabs (+ bind X in body +)


% defns
% Jd_is_value :: '' ::=

% defn
% is_v e  :: :: d_isval :: 'd_isval_' by

% ------------------------ :: unit
% is_v unit

% ------------------------ :: top
% is_v top

% ------------------------ :: abs
% is_v ( \ x . e )

% ------------------------ :: tabs
% is_v ( \ X . e : A )

% ------------------------ :: annoabs
% is_v ( \ x . e ): A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
J_neq_abs :: '' ::= 

defn 
e ¬= λ :: :: neq_abs :: 'neq_abs__' by 

---------------------- :: unit
unit ¬= λ

---------------------- :: var
x ¬= λ

---------------------- :: app
e1 e2  ¬= λ

---------------------- :: tabs
\ X . e : A ¬= λ

---------------------- :: tapp
e @ A ¬= λ

---------------------- :: anno
e : A ¬= λ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_all :: '' ::=

defn
A ¬= ∀ :: :: neq_all :: 'neq_all__' by

------------------------ :: unit
UNIT ¬= ∀

------------------------ :: top
TOP ¬= ∀

------------------------ :: bot
BOT ¬= ∀

------------------------ :: var
X ¬= ∀

------------------------ :: arrow
A1 -> A2 ¬= ∀

------------------------ :: union
A1 ⊔ A2 ¬= ∀

------------------------ :: intersection
A1 ⊓ A2 ¬= ∀


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_intersection :: '' ::=

defn
A ¬= ⊓ :: :: neq_intersection :: 'neq_intersection__' by

------------------------ :: unit
UNIT ¬= ⊓

------------------------ :: top
TOP ¬= ⊓ 

------------------------ :: bot
BOT ¬= ⊓

------------------------ :: var
X ¬= ⊓

------------------------ :: arrow
A1 -> A2 ¬= ⊓

------------------------ :: all
∀ X . A ¬= ⊓

------------------------ :: union
A1 ⊔ A2 ¬= ⊓

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_union :: '' ::=

defn
A ¬= ⊔ :: :: neq_union :: 'neq_union__' by

------------------------ :: unit
UNIT ¬= ⊔

------------------------ :: top
TOP ¬= ⊔

------------------------ :: bot
BOT ¬= ⊔

------------------------ :: var
X ¬= ⊔

------------------------ :: arrow
A1 -> A2 ¬= ⊔

------------------------ :: all
∀ X . A ¬= ⊔

------------------------ :: intersection
A1 ⊓ A2 ¬= ⊔


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_bot :: '' ::=

defn
A ¬= ⊥ :: :: neq_bot :: 'neq_bot__' by

------------------------ :: unit
UNIT ¬= ⊥

------------------------ :: top
TOP ¬= ⊥

------------------------ :: var
X ¬= ⊥

------------------------ :: arrow
A1 -> A2 ¬= ⊥

------------------------ :: union
A1 ⊔ A2 ¬= ⊥

------------------------ :: intersection
A1 ⊓ A2 ¬= ⊥

------------------------ :: all
∀ X . A ¬= ⊥

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% defns
% Jdwf_env_dom :: '' ::=

% defn
% |-dom  dE :: :: dwf_env_dom :: 'dwfenvdom_' by

% --------- :: empty
% |-dom empty

% |-dom dE
% X `notin` dom dE
% ---------------- :: tvar
% |-dom dE , X : ▪

% |-dom dE
% SX `notin` dom dE 
% ---------------- :: stvar
% |-dom dE , SX : ~▪

% |-dom dE
% x `notin` dom dE
% ---------------- :: typ
% |-dom dE , x : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_d_wf_typ :: '' ::=

defn
dE |- A :: :: d_wf_typ :: 'd_wf_typ__' by

--------- :: unit
dE |- UNIT 

--------- :: bot
dE |- BOT 

--------- :: top
dE |- TOP

(X : ▪) in dE
-------------- :: tvar
dE |- X

(X : ~▪) in dE 
-------------- :: stvar 
dE |- X

dE |- A1
dE |- A2
-------------- :: arrow
dE |- A1 -> A2

X ∈ₛ A
dE, X : ▪ |- A
-------------------- :: all
dE |- ∀ X . A

dE |- A1
dE |- A2
------------- :: union
dE |- A1 ⊔ A2

dE |- A1
dE |- A2 
------------- :: intersection
dE |- A1 ⊓ A2


defns
J_d_wf_exp :: '' ::=

defn
dE |- e :: :: d_wf_exp :: 'd_wf_exp__' by

--------- :: unit
dE |- unit 

(x : A) in dE  
----------------- :: var
dE |- x 

dE |- T
dE , x : T |- e
----------------- :: abs
dE |- \ x . e

dE |- e1
dE |- e2
----------------- :: app
dE |- e1 e2

dE , X : ▪ |- body
----------------- :: tabs 
dE |- \ X . body

dE |- A
dE |- e
----------------- :: tapp 
dE |- e @ A

dE |- A
dE |- e
----------------- :: anno 
dE |- e : A

defn
dE |- body :: :: d_wf_body :: 'd_wf_body__' by

dE |- A
dE |- e
----------- :: anno
dE |- e : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_d_wf_env :: '' ::=

defn
|- dE :: :: d_wf_env :: 'd_wf_env__' by

--------- :: empty
|- empty

|- dE
X `notin` dom dE
---------------- :: tvar
|- dE , X : ▪

|- dE
X `notin` dom dE 
---------------- :: stvar
|- dE , X : ~▪

|- dE
dE |- A
x `notin` dom dE
---------------- :: typ
|- dE , x : A


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns 
J_d_mono_typ :: '' ::= 

defn 
dE |-m A :: :: d_mono_typ :: 'd_mono_typ__' by 

--------------- :: unit
dE |-m UNIT

(X : ▪) in dE
--------------- :: tvar
dE |-m X

dE |-m A1
dE |-m A2
--------------- :: arrow
dE |-m A1 -> A2

dE |-m A1 
dE |-m A2 
--------------- :: intersection
dE |-m A1 ⊓ A2

dE |-m A1 
dE |-m A2 
--------------- :: union
dE |-m A1 ⊔ A2



defns 
J_d_wf_cont :: '' ::= 

defn 
dE |- c :: :: d_wf_cont :: 'd_wf_cont__' by 

dE |- c
----------------- :: infabs
dE |- _ ▹ c

dE |- A
dE |- c 
------------------ :: infabsunion
dE |- _ ⊔▹ A ▹ c

dE |- e 
dE |- c
-------------------- :: infapp
dE |- _ • e =>=> c  

dE |- A 
dE |- c
-------------------- :: inftapp
dE |- _ ○ A =>=> c  

dE |- A1 
dE |- A2
dE |- c
-------------------- :: inftappunion
dE |- _ ⊔∘ A1 ○ A2 =>=> c  

dE |- A 
dE |- c
-------------------- :: unioninftapp
dE |- _ ⊔∘ A >> c  

dE |- A 
dE |- c
-------------------- :: unioninfabs
dE |- _ ⊔▹ A >> c  

dE |- A 
-------------------- :: sub
dE |- _ <: A  


defns 
J_d_wf_work :: '' ::= 

defn 
dE |- w :: :: d_wf_work :: 'd_wf_work__' by 

dE |- e
dE |- c
----------------- :: infer
dE |- e => c

dE |- e
dE |- A
------------------ :: check
dE |- e <= A

dE |- A 
dE |- c
-------------------- :: infabs
dE |- A ▹ c  

dE |- A1 
dE |- A2
dE |- c
-------------------- :: infabsunion
dE |- A1 ⊔▹ A2 ▹ c

dE |- A
dE |- e
dE |- c
-------------------- :: infapp
dE |- A • e =>=> c    

dE |- A1
dE |- A2
dE |- c
---------------------------- :: inftapp
dE |- A1 ○ A2 =>=> c  

dE |- A1 
dE |- A2
dE |- B
dE |- c
---------------------------- :: inftappunion
dE |- A1 ⊔∘ A2 ○ B =>=> c  

dE |- A1
dE |- A2 
dE |- c
------------------------------ :: unioninftapp
dE |- A1 ⊔∘ A2 >> c  

dE |- A1
dE |- A2 
dE |- c
-------------------- :: unioninfabs
dE |- A1 ⊔▹ A2 >> c  

dE |- A1
dE |- A2 
-------------------- :: sub
dE |- A1 <: A2  

dE |- A
dE |- c
-------------------- :: apply
dE |- c $ A


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns 
Jd_wf_wl :: '' ::= 

defn 
|- dW :: :: d_wf_wl :: 'd_wf_wl__' by 

-------------------- :: empty
|- empty

x `notin`  dom ⌊ dW ⌋
⌊ dW ⌋ |- A
|- dW
-------------------- :: consvar
|- dW , x : A

X `notin`  dom ⌊ dW ⌋
|- dW
-------------------- :: constvar
|- dW , X : ▪

X `notin` dom ⌊ dW ⌋
|- dW
-------------------- :: consstvar
|- dW , X : ~▪

⌊ dW ⌋ |- w
|- dW
-------------------- :: conswork
|- dW , w



defns
J_d_sub :: '' ::=

defn
dE ||- A1 <: B1 :: :: d_sub :: 'd_sub__' by


|- dE
dE |- A1
-------------- :: top
dE ||- A1 <: TOP

|- dE
dE |- B1
------------------- :: bot
dE ||- BOT <: B1

|- dE
------------------- :: unit
dE ||- UNIT <: UNIT

|- dE
dE |- X
------------ :: tvar
dE ||- X <: X

dE ||- B1 <: A1
dE ||- A2 <: B2
-------------------------- :: arrow
dE ||- A1 -> A2 <: B1 -> B2

X ∈ₛ A1
X ∈ₛ B1
dE , X : ~▪ ||- A1 <: B1
-------------------------------------------- :: all
dE ||- ∀ X. A1 <: ∀ X. B1

B1 ¬= ∀ 
B1 ¬= ⊓
B1 ¬= ⊔
X ∈ₛ A1
dE |-m T1
dE ||- { T1 / X } A1 <: B1
---------------------------- :: alll
dE ||- ∀ X . A1 <: B1

dE ||- A1 <: B1
dE ||- A1 <: B2
------------------------ :: intersection1
dE ||- A1 <: B1 ⊓ B2

dE ||- A1 <: B1
dE |- A2
------------------------ :: intersection2
dE ||- A1 ⊓ A2 <: B1

dE ||- A2 <: B1
dE |- A1
------------------------ :: intersection3
dE ||- A1 ⊓ A2 <: B1

dE ||- A1 <: B1
dE |- B2
------------------------ :: union1
dE ||- A1 <: B1 ⊔ B2

dE ||- A1 <: B2
dE |- B1  
------------------------ :: union2
dE ||- A1 <: B1 ⊔ B2

dE ||- A1 <: B1
dE ||- A2 <: B1
------------------------ :: union3
dE ||- A1 ⊔ A2 <: B1


defns 
J_a_strong_mono_typ :: '' ::= 

defn 
smono aE A :: :: a_smono_typ :: 'a_s_monotyp__' by 

---------------- :: unit
smono aE UNIT

defns
J_a_etvars_in_worklist :: '' ::=

defn 
aW [ X1 ] [ X2 ] :: :: a_evs_in_wl :: 'a_etvars_in_wl__' by 

( X1 : B1 < A1 ) in ⌊ aW ⌋ 
-------------------------------- :: in
aW , X2 : B2 < A2 [ X1 ] [ X2 ] 

aW [ X1 ] [ X2 ] 
-------------------------------- :: var
aW , X ab [ X1 ] [ X2 ] 

aW [ X1 ] [ X2 ] 
-------------------------------- :: work
aW , w [ X1 ] [ X2 ] 


defns
Jaworklist_reduction :: '' ::=

defn
|= aW :: :: a_wl_red :: 'a__wlred__' by

|= aW
------------------ :: gc_var
|= aW , x : A

|= aW
------------------ :: gc_tvar
|= aW , X : ▪

|= aW
------------------ :: gc_stvar
|= aW , X : ~▪

|= aW , A <: B
------------------ :: gc_stvar
|= aW , X : A < B

|= aW
------------------ :: sub_top
|= aW , B1 <: TOP

|= aW
------------------- :: sub_bot
|= aW , BOT <: A

|= aW
------------------- :: sub_unit
|= aW , UNIT <: UNIT

|= aW
----------------- :: sub_tvar
|= aW , X <: X

|= aW , A1 <: B1 , B2 <: A2
------------------------------ :: subarrow
|= aW , B1 -> B2 <: A1 -> A2

A1 ¬= ∀
A1 ¬= ⊓
A1 ¬= ⊔
|= aW , X : BOT < TOP , B1 <: A1
------------------------------------------------- :: sub_alll
|= aW , ∀ X . B1 <: A1

|= aW , X : ~▪ , B1 <: A1
------------------------------------------------- :: sub_all
|= aW , ∀ X . B1 <: ∀ X . A1

(X : B1 < B2) in ⌊ aW ⌋
¬smono ⌊ aW ⌋ (A1 -> A2)
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺⁺ ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , X1 -> X2 <: A1 -> A2
--------------------------------------------------------------------------- :: sub_arrow1
|= aW , X <: A1 -> A2

(X : B1 < B2) in ⌊ aW ⌋
¬smono ⌊ aW ⌋ (A1 -> A2)
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺⁻ ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , A1 -> A2 <: X1 -> X2
--------------------------------------------------------------------------- :: sub_arrow2
|= aW , A1 -> A2 <: X

(X : B1 < B2) in ⌊ aW ⌋
(Y : B3 < B4) in ⌊ aW ⌋
aW ≺⁻ ( X : Y ) ~ aW2 | aW3 ‖ E
aW [ X ] [ Y ]
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvar1
|= aW , Y <: X

(X : B1 < B2) in ⌊ aW ⌋
(Y : B3 < B4) in ⌊ aW ⌋
aW ≺⁺ ( X : Y ) ~ aW2 | aW3 ‖ E
aW [ X ] [ Y ]
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvar2
|= aW , X <: Y

(X : B1 < B2) in ⌊ aW ⌋
smono ⌊ aW ⌋ A1
aW ≺⁻ ( X : A1 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvarmono1
|= aW , A1 <: X

(X : A1 < A2) in ⌊ aW ⌋
smono ⌊ aW ⌋ B1
aW ≺⁺ ( X : B1 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvarmono2
|= aW , X <: B1

|= aW , A1 <: B1 , A1 <: B2
----------------------------- :: sub_intersection1
|= aW , A1 <: B1 ⊓ B2

|= aW , B1 <: A1
-------------------------- :: sub_intersection2
|= aW , B1 ⊓ B2 <: A1

|= aW , B2 <: A1
------------------------ :: sub_intersection3
|= aW , B1 ⊓ B2 <: A1

|= aW , B1 <: A1
------------------------ :: sub_union1
|= aW , B1 <: A1 ⊔ A2

|= aW , B1 <: A2
------------------------ :: sub_union2
|= aW , B1 <: A1 ⊔ A2

|= aW , B1 <: A1 , B2 <: A1
---------------------------- :: sub_union3
|= aW , B1 ⊔ B2 <: A1

|= aW , e => _ <: A1
------------------------ :: chk_sub
|= aW , e <= A1

% |= aW , X : ▪ , e <= A1 
% ------------------------- :: chk_all
% |= aW , e <= ∀ X . A1    

|= aW , x : A1 , e <= A2
----------------------------- :: chk_absarrow
|= aW , \ x . e <= A1 -> A2    

(X : A1 < A2) in ⌊ aW ⌋
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺± ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , x : X1 , e <= X2
---------------------------------------------------------------------------- :: chk_absevar
|= aW , \ x . e <= X  

|= aW , x : BOT , e <= TOP 
---------------------------  :: chk_abstop
|= aW , \ x . e <= TOP

|= aW , e <= A1 , e <= A2
---------------------------  :: chk_inter
|= aW , e <= A1 ⊓ A2 

|= aW , e <= A1 
---------------------------  :: chk_union1
|= aW , e <= A1 ⊔ A2 

|= aW , e <= A2
---------------------------  :: chk_union2
|= aW , e <= A1 ⊔ A2 

(x : A) in ⌊ aW ⌋ 
|= aW , c $ A
-------------------------- :: inf_var
|= aW , x => c

|= aW , c $ A , e <= A
-------------------------- :: inf_anno
|= aW , (e : A) => c

|= aW2 , c $ (∀ X . A) , X : ▪ , e <= A
------------------------------------- :: inf_tabs
|= aW , \ X . e : A => c

|= aW , c $ UNIT
------------------------------------- :: inf_unit
|= aW , unit => c

|= aW , e1 => ( _ ▹ (_ • e2 =>=> c))
------------------------------------- :: inf_app
|= aW , (e1 e2) => c

|= aW , c $ A2 , e <= A1
------------------------------------- :: infapparrow
|= aW , A1 -> A2 • e =>=> c

|= aW , c $ A1 -> B1
--------------------------------------------------------------------------- :: infabs_arr
|= aW , A1 -> B1 ▹ c

(X : A1 < A2) in ⌊ aW ⌋
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺± ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , X1 -> X2 ▹ c
--------------------------------------------------------------------------- :: infabs_evar
|= aW , X ▹ c

|= aW , TOP -> BOT ▹ c
-------------------------------------------------- :: infappbot
|= aW , BOT ▹ c

|= aW , A1 ▹ c
-------------------------------------------------- :: infabs_inter1
|= aW , A1 ⊓ A2 ▹ c

|= aW , A2 ▹ c
-------------------------------------------------- :: infabs_inter2
|= aW , A1 ⊓ A2 ▹ c

|= aW , A1 ▹ ( _ ⊔▹ A2 ▹ c )
-------------------------------------------------- :: infabs_union
|= aW , A1 ⊔ A2 ▹ c

|= aW , A2 ▹ ( _ ⊔▹ B1 -> C1 >> c )
-------------------------------------------------- :: infabsunion
|= aW , B1 -> C1 ⊔▹ A2 ▹ c

|= aW , c $ (B1 ⊓ B2) -> (C1 ⊔ C2)
-------------------------------------------------- :: unioninfabs
|= aW , B2 -> C2 ⊔▹ B1 -> C1 >> c 

|= aW , e => _ ○ B =>=> c
------------------------------------- :: inf_tapp
|= aW , e @ B => c

|= aW , c $ {B / X} A
------------------------------------- :: inftapp_all
|= aW , ∀ X . A ○ B =>=> c

|= aW , c $ BOT
------------------------------------- :: inftapp_bot
|= aW , BOT ○ B =>=> c

|= aW , A1 ○ B =>=> c
-------------------------------------------------- :: inftapp_inter1
|= aW , A1 ⊓ A2 ○ B =>=> c

|= aW , A2 ○ B =>=> c
-------------------------------------------------- :: inftapp_inter2
|= aW , A1 ⊓ A2 ○ B =>=> c

|= aW , A1 ○ B =>=> ( _ ⊔∘ A2 ○ B =>=> c )
-------------------------------------------------- :: inftapp_union
|= aW , A1 ⊔ A2 ○ B =>=> c

|= aW , A2 ○ B =>=> ( _ ⊔∘ C1 >> c)
-------------------------------------------------- :: inftappunion
|= aW , C1 ⊔∘ A2 ○ B =>=> c

|= aW , c $ C1 ⊔ C2
-------------------------------------------------- :: unioninftapp
|= aW , C2 ⊔∘ C1 >> c
