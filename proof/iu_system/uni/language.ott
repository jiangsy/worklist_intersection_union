metavar typvar, X, Y, Z     ::= {{ repr-locally-nameless }}
metavar expvar, x, y, z     ::= {{ repr-locally-nameless }}

grammar

typ, A, B, C, T:: typ_ ::=
  | UNIT           ::   :: unit
  | TOP            ::   :: top
  | BOT            ::   :: bot
  | X              ::   :: var
  | A1 -> A2       ::   :: arrow
  | ∀ X . A        ::   :: all  (+ bind X in A +)
  | A1 ⊔ A2        ::   :: union
  | A1 ⊓ A2        ::   :: intersection
  | ( A )          :: S :: paren {{ coq ([[A]]) }}
  | { A2 / X } A1  :: M :: subst {{ coq (open_typ_wrt_typ [[X A1]] [[A2]]) }}

body :: body_ ::= 
  | e : A ::  :: anno

exp, e, f, g :: exp_ ::=
  | unit                                ::   :: unit 
  | top                                 ::   :: top
  | x                                   ::   :: var
  | \ x . e                             ::   :: abs  (+ bind x in e +)
  | e1 e2                               ::   :: app
  | \ X . body                          ::   :: tabs (+ bind X in body +) 
  | e @ A                               ::   :: tapp
  | e : A                               ::   :: anno
  | ( e )                               :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1                       :: M :: subst1 {{ coq (open_exp_wrt_exp [[x e1]] [[e2]]) }}
  | { A2 / X } e1                       :: M :: subst2 {{ coq (open_exp_wrt_typ [[X e1]] [[A2]]) }}

dbind, b :: dbind_ ::=
  | : ▪  ::   :: tvar_empty
  | : ~▪ ::   :: stvar_empty
  | : A  ::   :: typ

substitutions
  single A X  :: subst_tvar_in
  single e x  :: subst_var_in

freevars
  A X  :: ftv_in
  e x  :: fv_in

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

denv, E, F, G:: '' ::= {{ coq list (atom*dbind) }}
  | empty    ::   :: empty {{ coq nil }}
  | E , x b  ::   :: cons1 {{ coq ([[x]]~[[b]] ++ [[E]])  }}
  | E , X b  ::   :: cons2 {{ coq ([[X]]~[[b]] ++ [[E]])  }}
  | ⌊ dW ⌋   :: M :: dwlenv {{ coq ( dwl_to_denv [[dW]] )}}

dvalue, v :: dvalue_ ::=
  | unit                 ::   :: unit
  | top                  ::   :: top
  | \ x . e              ::   :: abs  (+ bind x in e +)
  | \ X . body          ::   :: tabs (+ bind X in body +)

% dmaybetyp, MT :: dmaybetyp_ ::=
%   | none                 ::   :: none
%   | some A               ::   :: some  

cont, c :: 'cont_' ::=
  % | Done                :: :: done
  | _ ▹ c                :: :: infabs
  | _ ⊔▹ A1 ▹ c          :: :: infabsunion
  | _ • e =>=> c         :: :: infapp
  | _ ○ A =>=> c         :: :: inftapp
  | _ ⊔∘ A1 ○ A2 =>=> c  :: :: inftappunion
  | _ ⊔∘ A2 >> c         :: :: unioninftapp
  | _ ⊔▹ A2 >> c         :: :: unioninfabs
  | _ <: A               :: :: sub

work, w :: 'work_' ::=
  | e => c                 ::   :: infer
  | e <= A                 ::   :: check
  | A ▹ c                  ::   :: infabs
  | A1 ⊔▹ A2 ▹ c           ::   :: infabsunion
  | A • e =>=> c           ::   :: infapp
  | A1 ○ A2 =>=> c         ::   :: inftapp
  | A1 <: A2               ::   :: sub
  | A1 ⊔∘ A2 ○ B =>=> c    ::   :: inftappunion
  | A1 ⊔∘ A2 >> c          ::   :: unioninftapp
  | A1 ⊔▹ A2 >> c          ::   :: unioninfabs
  | c $ A                  ::   :: apply

dworklist, dW :: 'dworklist_' ::=
  | empty      ::   :: empty
  | dW , x b    ::   :: consvar 
  | dW , X b    ::   :: constvar 
  | dW , w      ::   :: conswork

formula :: formula_ ::=
  | judgement        ::   :: judgement
  | ( x b )  in E    ::   :: binds1 {{ coq binds ([[x]])  ([[b]]) ([[E]]) }}
  | ( X b )  in E    ::   :: binds2 {{ coq binds ([[X]])  ([[b]]) ([[E]]) }}
  | uniq E           ::   :: uniq   {{ coq uniq ([[E]]) }}
  | x  `notin` dom E ::   :: fresh1 {{ coq ([[x]]  `notin` dom ([[E]])) }}
  | X  `notin` dom E ::   :: fresh2 {{ coq ([[X]]  `notin` dom ([[E]])) }}
  | X in A           ::   :: appear1 {{ coq [[X]] `in` ftv_in_typ [[A]]}}
  | A ¬= TOP         ::   :: neqtop  {{ coq ~ ([[A]] = typ_top)}}
  | ⌊ dW ⌋            ::   :: wl_to_env {{ coq dwl_to_denv [[ dW ]] }}
 
embed {{ coq 

Fixpoint dwl_to_denv (dW : dworklist) : denv :=
  match dW with 
  | dworklist_empty => nil
  | dworklist_conswork dW' _ => dwl_to_denv dW'
  | dworklist_constvar dW' X b => X ~ b ++ dwl_to_denv dW'
  | dworklist_consvar dW' x b => x ~ b ++ dwl_to_denv dW'
  end.

}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


defns
Jdstrong_in :: '' ::=

defn
X ∈ₛ A :: :: ds_in :: 'dsin_' by

------------------------ :: var
X ∈ₛ X 

X ∈ₛ A1
------------------------ :: arrow1
X ∈ₛ A1 -> A2 

X ∈ₛ A2
------------------------ :: arrow2
X ∈ₛ A1 -> A2 

X ∈ₛ A
------------------------ :: all
X ∈ₛ ∀ Y . A

X ∈ₛ A1
X ∈ₛ A2
------------------------ :: union
X ∈ₛ A1 ⊔ A2

X ∈ₛ A1
X ∈ₛ A2
------------------------ :: intersection
X ∈ₛ A1 ⊓ A2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% dvalue, v :: dvalue_ ::=
%   | unit                 ::   :: unit
%   | top                  ::   :: top
%   | \ x . e              ::   :: abs  (+ bind x in e +)
%   | \ X . body          ::   :: tabs (+ bind X in body +)


% defns
% Jd_is_value :: '' ::=

% defn
% is_v e  :: :: d_isval :: 'd_isval_' by

% ------------------------ :: unit
% is_v unit

% ------------------------ :: top
% is_v top

% ------------------------ :: abs
% is_v ( \ x . e )

% ------------------------ :: tabs
% is_v ( \ X . e : A )

% ------------------------ :: annoabs
% is_v ( \ x . e ): A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
J_neq_abs :: '' ::= 

defn 
e ¬= λ :: :: neq_abs :: 'neq_abs__' by 

---------------------- :: unit
unit ¬= λ

---------------------- :: top
top ¬= λ

---------------------- :: var
x ¬= λ

---------------------- :: app
e1 e2  ¬= λ

---------------------- :: tabs
\ X . e : A ¬= λ

---------------------- :: tapp
e @ A ¬= λ

---------------------- :: anno
e : A ¬= λ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_all :: '' ::=

defn
A ¬= ∀ :: :: neq_all :: 'neq_all__' by

------------------------ :: unit
UNIT ¬= ∀

------------------------ :: top
TOP ¬= ∀

------------------------ :: bot
BOT ¬= ∀

------------------------ :: var
X ¬= ∀

------------------------ :: arrow
A1 -> A2 ¬= ∀

------------------------ :: union
A1 ⊔ A2 ¬= ∀

------------------------ :: intersection
A1 ⊓ A2 ¬= ∀


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_intersection :: '' ::=

defn
A ¬= ⊓ :: :: neq_intersection :: 'neq_intersection__' by

------------------------ :: unit
UNIT ¬= ⊓

------------------------ :: top
TOP ¬= ⊓ 

------------------------ :: bot
BOT ¬= ⊓

------------------------ :: var
X ¬= ⊓

------------------------ :: arrow
A1 -> A2 ¬= ⊓

------------------------ :: all
∀ X . A ¬= ⊓

------------------------ :: union
A1 ⊔ A2 ¬= ⊓

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_union :: '' ::=

defn
A ¬= ⊔ :: :: neq_union :: 'neq_union__' by

------------------------ :: unit
UNIT ¬= ⊔

------------------------ :: top
TOP ¬= ⊔

------------------------ :: bot
BOT ¬= ⊔

------------------------ :: var
X ¬= ⊔

------------------------ :: arrow
A1 -> A2 ¬= ⊔

------------------------ :: all
∀ X . A ¬= ⊔

------------------------ :: intersection
A1 ⊓ A2 ¬= ⊔


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_neq_bot :: '' ::=

defn
A ¬= ⊥ :: :: neq_bot :: 'neq_bot__' by

------------------------ :: unit
UNIT ¬= ⊥

------------------------ :: top
TOP ¬= ⊥

------------------------ :: var
X ¬= ⊥

------------------------ :: arrow
A1 -> A2 ¬= ⊥

------------------------ :: union
A1 ⊔ A2 ¬= ⊥

------------------------ :: intersection
A1 ⊓ A2 ¬= ⊥

------------------------ :: all
∀ X . A ¬= ⊥

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% defns
% Jdwf_env_dom :: '' ::=

% defn
% |-dom  E :: :: dwf_env_dom :: 'dwfenvdom_' by

% --------- :: empty
% |-dom empty

% |-dom E
% X `notin` dom E
% ---------------- :: tvar
% |-dom E , X : ▪

% |-dom E
% SX `notin` dom E 
% ---------------- :: stvar
% |-dom E , SX : ~▪

% |-dom E
% x `notin` dom E
% ---------------- :: typ
% |-dom E , x : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_d_wf_typ :: '' ::=

defn
E |- A :: :: d_wf_typ :: 'd_wf_typ__' by

--------- :: unit
E |- UNIT 

--------- :: bot
E |- BOT 

--------- :: top
E |- TOP

(X : ▪) in E
-------------- :: tvar
E |- X

(X : ~▪) in E 
-------------- :: stvar 
E |- X

E |- A1
E |- A2
-------------- :: arrow
E |- A1 -> A2

X ∈ₛ A
E, X : ▪ |- A
-------------------- :: all
E |- ∀ X . A

E |- A1
E |- A2
------------- :: union
E |- A1 ⊔ A2

E |- A1
E |- A2 
------------- :: intersection
E |- A1 ⊓ A2


defns
J_d_wf_exp :: '' ::=

defn
E |- e :: :: d_wf_exp :: 'd_wf_exp__' by

--------- :: unit
E |- unit 

--------- :: top
E |- top 

(x : A) in E  
----------------- :: var
E |- x 

E , x : TOP |- e
----------------- :: abs
E |- \ x . e

E , X : ▪ |- body
----------------- :: tabs 
E |- \ X . body

E |- A
E |- e
----------------- :: tapp 
E |- e @ A

E |- A
E |- e
----------------- :: anno 
E |- e : A

defn
E |- body :: :: d_wf_body :: 'd_wf_body__' by

E |- A
E |- e
----------- :: anno
E |- e : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_d_wf_env :: '' ::=

defn
|- E :: :: d_wf_env :: 'd_wf_env__' by

--------- :: empty
|- empty

|- E
X `notin` dom E
---------------- :: tvar
|- E , X : ▪

|- E
X `notin` dom E 
---------------- :: stvar
|- E , X : ~▪

|- E
E |- A
x `notin` dom E
---------------- :: typ
|- E , x : A


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns 
J_d_mono_typ :: '' ::= 

defn 
E |-m A :: :: d_mono_typ :: 'd_mono_typ__' by 

--------------- :: unit
E |-m UNIT

(X : ▪) in E
--------------- :: tvar
E |-m X

E |-m A1
E |-m A2
--------------- :: arrow
E |-m A1 -> A2

E |-m A1 
E |-m A2 
--------------- :: intersection
E |-m A1 ⊓ A2

E |-m A1 
E |-m A2 
--------------- :: union
E |-m A1 ⊔ A2



defns 
J_d_wf_cont :: '' ::= 

defn 
dW |- c :: :: d_wf_cont :: 'd_wf_cont__' by 

dW |- c
----------------- :: infabs
dW |- _ ▹ c

⌊ dW ⌋ |- A
dW |- c 
------------------ :: infabsunion
dW |- _ ⊔▹ A ▹ c

⌊ dW ⌋ |- e 
dW |- c
-------------------- :: infapp
dW |- _ • e =>=> c  

⌊ dW ⌋ |- A 
dW |- c
-------------------- :: inftapp
dW |- _ ○ A =>=> c  

⌊ dW ⌋ |- A1 
⌊ dW ⌋ |- A2
dW |- c
-------------------- :: inftappunion
dW |- _ ⊔∘ A1 ○ A2 =>=> c  

⌊ dW ⌋ |- A 
dW |- c
-------------------- :: unioninftapp
dW |- _ ⊔∘ A >> c  

⌊ dW ⌋ |- A 
dW |- c
-------------------- :: unioninfabs
dW |- _ ⊔▹ A >> c  

⌊ dW ⌋ |- A 
dW |- c
-------------------- :: sub
dW |- _ <: A  


defns 
J_d_wf_work :: '' ::= 

defn 
dW |- w :: :: d_wf_work :: 'd_wf_work__' by 

⌊ dW ⌋ |- e
dW |- c
----------------- :: infer
dW |- e => c

⌊ dW ⌋ |- e
⌊ dW ⌋ |- A
------------------ :: check
dW |- e <= A

⌊ dW ⌋ |- A 
dW |- c
-------------------- :: infabs
dW |- A ▹ c  

⌊ dW ⌋ |- A1 
⌊ dW ⌋ |- A2
dW |- c
-------------------- :: infabsunion
dW |- A1 ⊔▹ A2 ▹ c

⌊ dW ⌋ |- A
⌊ dW ⌋ |- e
dW |- c
-------------------- :: infapp
dW |- A • e =>=> c    

⌊ dW ⌋ |- A1
⌊ dW ⌋ |- A2
dW |- c
---------------------------- :: inftapp
dW |- A1 ○ A2 =>=> c  

⌊ dW ⌋ |- A1 
⌊ dW ⌋ |- A2
⌊ dW ⌋ |- B
dW |- c
---------------------------- :: inftappunion
dW |- A1 ⊔∘ A2 ○ B =>=> c  

⌊ dW ⌋ |- A1
⌊ dW ⌋ |- A2 
dW |- c
------------------------------ :: unioninftapp
dW |- A1 ⊔∘ A2 >> c  

⌊ dW ⌋ |- A1
⌊ dW ⌋ |- A2 
dW |- c
-------------------- :: unioninfabs
dW |- A1 ⊔▹ A2 >> c  

⌊ dW ⌋ |- A1
⌊ dW ⌋ |- A2 
-------------------- :: sub
dW |- A1 <: A2  

⌊ dW ⌋ |- A
dW |- c
-------------------- :: apply
dW |- c $ A


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns 
Jd_wf_wl :: '' ::= 

defn 
|- dW :: :: d_wf_wl :: 'd__wfwl__' by 

-------------------- :: empty
|- empty

⌊ dW ⌋ |- A
|- dW
-------------------- :: consvar
|- dW , x : A

X `notin`  dom ⌊ dW ⌋
|- dW
-------------------- :: constvar
|- dW , X : ~▪

X `notin` dom ⌊ dW ⌋
|- dW
-------------------- :: consstvar
|- dW , X : ~▪

dW |- w
|- dW
-------------------- :: conswork
|- dW , w



defns
J_d_sub :: '' ::=

defn
E |- A1 <: B1 :: :: d_sub :: 'd_sub__' by


|- E
E |- A1
-------------- :: top
E |- A1 <: TOP

|- E
E |- B1
------------------- :: bot
E |- BOT <: B1

|- E
------------------- :: unit
E |- UNIT <: UNIT

|- E
E |- X
------------ :: tvar
E |- X <: X

E |- B1 <: A1
E |- A2 <: B2
-------------------------- :: arrow
E |- A1 -> A2 <: B1 -> B2

X ∈ₛ A1
X ∈ₛ B1
E , X : ~▪ |- A1 <: B1
-------------------------------------------- :: all
E |- ∀ X. A1 <: ∀ X. B1

B1 ¬= ∀ 
B1 ¬= ⊓
B1 ¬= ⊔
X ∈ₛ A1
E |-m T2
E |- { T2 / X } A1 <: B1
---------------------------- :: alll
E |- ∀ X . A1 <: B1

E |- A1 <: B1
E |- A1 <: B2
------------------------ :: intersection1
E |- A1 <: B1 ⊓ B2

E |- A1 <: B1
E |- A2
------------------------ :: intersection2
E |- A1 ⊓ A2 <: B1

E |- A2 <: B1
E |- A1
------------------------ :: intersection3
E |- A1 ⊓ A2 <: B1

E |- A1 <: B1
E |- B2
------------------------ :: union1
E |- A1 <: B1 ⊔ B2

E |- A1 <: B2
E |- B1  
------------------------ :: union2
E |- A1 <: B1 ⊔ B2

E |- A1 <: B1
E |- A2 <: B1
------------------------ :: union3
E |- A1 ⊔ A2 <: B1
