defns
Jaworklist_reduction :: '' ::=

defn
|= W :: :: a_wl_red :: 'a_wlred_' by

|= W
W |- S1
------------------ :: subtop
|= W , S1 <: TOP

|= W
W |- T
------------------- :: subbot
|= W , BOT <: T

|= W
------------------- :: subunit
|= W , UNIT <: UNIT

|= W
W |- X
----------------- :: subtvar
|= W , X <: X

|= W 
W |- EX
----------------- :: subevar
|= W , EX <: EX 

|= W , T1 <: S1 , S2 <: T2
------------------------------ :: subarrow
|= W , S1 -> S2 <: T1 -> T2

T1 ¬= TOP
T1 ¬= ∀
T1 ¬= *
T1 ¬= +
X ∈ₛ S1
|= W , EX : BOT < TOP , { EX / X } S1 <: T1
------------------------------------------------- :: suballl
|= W , ∀ X . S1 <: T1

X ∈ₛ S1
X ∈ₛ T1
|= W , SX : ~▪ , { SX / X } S1 <: { SX / X } T1
------------------------------------------------- :: suball
|= W , ∀ X . S1 <: ∀ X . T1

¬smono (T1 -> T2)
W , EX1 : BOT < TOP, EX2 : BOT < TOP ≺⁺ ( EX : EX1 -> EX2 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 ) , EX1 -> EX2 <: T1 -> T2
--------------------------------------------------------------------------- :: subarrowr
|= W , EX <: T1 -> T2

¬smono (T1 -> T2)
W , EX1 : BOT < TOP, EX2 : BOT < TOP ≺⁻ ( EX : EX1 -> EX2 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 ) , T1 -> T2 <: EX1 -> EX2
--------------------------------------------------------------------------- :: subarrowl
|= W , T1 -> T2 <: EX

W ≺⁻ ( EX : EY ) ~ W2 | W3 ‖ E
W [ EX ] [ EY ]
|= ( W2 ++ W3 )
-------------------------------------------- :: subetvarr
|= W , EY <: EX

W ≺⁺ ( EX : EY ) ~ W2 | W3 ‖ E
W [ EX ] [ EY ]
|= ( W2 ++ W3 )
-------------------------------------------- :: subetvarl
|= W , EX <: EY

smono S1
W ≺⁻ ( EX : S1 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 )
-------------------------------------------- :: subetvarmonol
|= W , S1 <: EX

smono T1
W ≺⁺ ( EX : T1 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 )
-------------------------------------------- :: subetvarmonor
|= W , EX <: T1

|= W , S1 <: T1 , S1 <: T2
----------------------------- :: subintersection1
|= W , S1 <: T1 * T2

W |- S2
|= W , S1 <: T
-------------------------- :: subintersection2
|= W , S1 * S2 <: T

W |- S1
|= W , S2 <: T
------------------------ :: subintersection3
|= W , S1 * S2 <: T

W |- T2
|= W , S1 <: T1
------------------------ :: subunion1
|= W , S1 <: T1 + T2

W |- T1
|= W , S1 <: T2
------------------------ :: subunion2
|= W , S1 <: T1 + T2

|= W , S1 <: T1 , S2 <: T1
---------------------------- :: subunion3
|= W , S1 + S2 <: T1

e ¬= λ
T1 ¬= TOP
T1 ¬= ∀
T1 ¬= *
T1 ¬= +
|= W , e => _ <: T1
------------------------ :: chksub
|= W , e <= T1

X ∈ₛ T1
|= W , X : ▪ , e <= T1 
------------------------- :: chkall
|= W , e <= ∀ X . T1    

|= W , x : T1 , e <= T2
----------------------------- :: chkabsarrow
|= W , \ x . e <= T1 -> T2    

W , EX1 : BOT < TOP, EX2 : BOT < TOP ≺± ( EX : EX1 -> EX2 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 ) , x : EX1 , e <= EX2
---------------------------------------------------------------------------- :: chkabsevar
|= W , \ x . e <= EX  

|= W , x : BOT , e <= TOP 
---------------------------  :: chkabstop
|= W , \ x . e <= TOP

|= W , e <= T1 , e <= T2
---------------------------  :: chkintersection
|= W , e <= T1 * T2 

W |- T2 
|= W , e <= T1 
---------------------------  :: chkunion1
|= W , e <= T1 + T2 

W |- T1
|= W , e <= T2
---------------------------  :: chkunion2
|= W , e <= T1 + T2 

(x : T) in ⌊ W ⌋ 
|= W , c $ T
-------------------------- :: infvar
|= W , x => c

|= W , c $ T , e <= T
-------------------------- :: infanno
|= W , (e : T) => c

X ∈ₛ T
|= W , c $ (∀ X . T) , X : ▪ , e <= T
------------------------------------- :: inftabs
|= W , \ X . e : T => c

|= W , c $ UNIT
------------------------------------- :: infunit
|= W , unit => c

|= W , e1 => _ • e2 =>=> c 
------------------------------------- :: infapp
|= W , (e1 e2) => c

W |- T
|= W , e => _ ∘ T =>=> c
------------------------------------- :: inftapp
|= W , e @ T => c

W |- ∀ X . T1
|= W , c $ {T2 / X} T1
------------------------------------- :: inftappall
|= W , ∀ X . T1 ∘ T2 =>=> c

W |- T
|= W , c $ BOT
------------------------------------- :: inftappbot
|= W , BOT ∘ T =>=> c

W |- T2
|= W , c $ T2 , e <= T1
------------------------------------- :: infapparrow
|= W , T1 -> T2 • e =>=> c

W , EX1 : BOT < TOP, EX2 : BOT < TOP ≺± ( EX : EX1 -> EX2 ) ~ W2 | W3 ‖ E
|= ( W2 ++ W3 ) , EX1 -> EX2 • e =>=> c
--------------------------------------------------------------------------- :: infappevar
|= W , EX • e =>=> c

|= W , c $ BOT
-------------------------------------------------- :: infappbot
|= W , BOT • e =>=> c

W |- T2
|= W , T1 • e =>=> c
-------------------------------------------------- :: infappinter1
|= W , T1 * T2 • e =>=> c

W |- T1
|= W , T2 • e =>=> c
-------------------------------------------------- :: infappinter2
|= W , T1 * T2 • e =>=> c

|= W , T1 • e =>=> c , T2 • e =>=> c
-------------------------------------------------- :: infappunion
|= W , T1 + T2 • e =>=> c