defns
Jdsub :: '' ::=

defn
E |- T1 <: T2 :: :: dsub :: 'dsub_' by

E |- S
-------------- :: top
E |- S <: TOP

E |- T
------------------- :: bot
E |- BOT <: T

------------------- :: unit
E |- UNIT <: UNIT

E |- X
------------ :: tvar
E |- X <: X

E |- SX 
--------------- :: stvar
E |- SX <: SX 

E |- T1 <: S1
E |- S2 <: T2
-------------------------- :: arrow
E |- S1 -> S2 <: T1 -> T2

E |- ∀ X. T
E |- ∀ X. S
E , SX : ~▪ |- { SX / X } S <: { SX / X } T
-------------------------------------------- :: all
E |- ∀ X. S <: ∀ X. T

T1 ¬= ∀ 
T1 ¬= *
T1 ¬= +
E |- T2
E |- ∀ X. S
mono T2
E |- { T2 / X } S <: T1
---------------------------- :: alll
E |- ∀ X . S <: T1

E |- S <: T1
E |- S <: T2
------------------------ :: intersection1
E |- S <: T1 * T2

E |- S1 <: T
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <: T

E |- S2 <: T
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <: T

E |- S <: T1
E |- T2
------------------------ :: union1
E |- S <: T1 + T2

E |- S <: T2
E |- T1
------------------------ :: union2
E |- S <: T1 + T2

E |- S1 <: T
E |- S2 <: T
------------------------ :: union3
E |- S1 + S2 <: T

defns
Jdsub_nonoverlap :: '' ::=

defn
E |- T1 <: T2 :: :: dsub_no :: 'dsubno_' by

E |- S
-------------- :: top
E |- S <: TOP

E |- T
------------------- :: bot
E |- BOT <: T

------------------- :: unit
E |- UNIT <: UNIT

E |- X
------------ :: tvar
E |- X <: X

E |- SX 
--------------- :: stvar
E |- SX <: SX 

E |- T1 <: S1
E |- S2 <: T2
-------------------------- :: arrow
E |- S1 -> S2 <: T1 -> T2

E |- ∀ X. T
E |- ∀ X. S
E , SX : ~▪ |- { SX / X } S <: { SX / X } T
-------------------------------------------- :: all
E |- ∀ X. S <: ∀ X. T

T1 ¬= ∀ 
T1 ¬= *
T1 ¬= +
T1 ¬= TOP
E |- T2
E |- ∀ X. S
mono T2
E |- { T2 / X } S <: T1
---------------------------- :: alll
E |- ∀ X . S <: T1

E |- S <: T1
E |- S <: T2
------------------------ :: intersection1
E |- S <: T1 * T2

T ¬= *
E |- S1 <: T
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <: T

T ¬= *
E |- S2 <: T
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <: T

S ¬= +
E |- S <: T1
E |- T2
------------------------ :: union1
E |- S <: T1 + T2

S ¬= +
E |- S <: T2
E |- T1
------------------------ :: union2
E |- S <: T1 + T2

E |- S1 <: T
E |- S2 <: T
------------------------ :: union3
E |- S1 + S2 <: T


defns
Jdtyping :: '' ::=

defn 
E |- e => T :: :: dinf :: 'dinf_' by 

|- E
(x : T) in E
-------------- :: var
E |- x => T

E |- T
E |- e <= T
------------------ :: anno
E |- (e : T) => T

|- E
--------------------------- :: unit
E |- unit => UNIT

E |- e1 => T2
E |- T2 • e2 =>=> T1
--------------------------- :: app
E |- ( e1 e2 ) => T1

E |- ∀ X . T
E , X : ▪ |- e : T <= T
-------------------------------- :: tabs
E |- \ X . e : T => ∀ X . T

E |- T
E |- e => BOT
--------------------------- :: tappbot
E |- e @ T => BOT

E |- T2
E |- e1 => ∀ X . T1
----------------------------- :: tappall
E |- e1 @ T2 => {T2 / X} T1


% disable inferring mono types 
% mono (T1 -> T2)
% E |- T1 -> T2
% E, x : T1 |- e <= T2
% --------------------------- :: abs
% E |- \ x . e => T1 -> T2

defn
E |- e <= T :: :: dchk :: 'dchk_' by

% use the following rule instead
% TODO: check E |- e
% |- E 
% --------------------------- :: top
% E |- e <= TOP

E, x : BOT |- e <= TOP
--------------------------- :: top_abs
E |- \ x . e <= TOP

E |- T2
E, x : T1 |- e <= T2
--------------------------- :: abs
E |- \ x . e <= T1 -> T2

E |- e1 => T1
E |- T1 • e2 =>=> T2
------------------------ :: app
E |- e1 e2 <= T2

E |- ∀ X . T
E, X : ▪ |- e <= T
--------------------------- :: all
E |- e <= ∀ X . T

E |- e => S
E |- S <: T
---------------- :: sub
E |- e <= T

E |- e <= S
E |- e <= T
------------------- :: intersection
E |- e <= S * T

E |- e <= S
E |- T
------------------- :: union1
E |- e <= S + T

E |- e <= T
E |- S
------------------- :: union2
E |- e <= S + T

defn 
E |- T1 • e =>=> T2 :: :: dinfapp :: 'dinfapp_' by

E |- T2
E |- e <= T1
-------------------------------- :: arrow
E |- ( T1 -> T2 ) • e =>=> T2

mono T3
E |- T3 
E |- ∀ X . T1
E |- { T3 / X } T1 • e =>=> T2
-------------------------------- :: all
E |- ( ∀ X . T1 ) • e =>=> T2

E |- e <= TOP
-------------------------------- :: bot
E |- BOT • e =>=> BOT
