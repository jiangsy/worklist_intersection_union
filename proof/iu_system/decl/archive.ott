
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
Jdexp_red :: '' ::=

defn
e1 --> e2 :: :: dexp_red :: 'dexpred_' by

e1 --> e1'
----------------- :: app1
e1 e2 --> e1' e2

is_v e1
e2 --> e2'
----------------- :: app2
e1 e2 --> e1 e2'

e1 --> e1'
----------------------- :: tapp
e1 @ T  --> e1' @ T 

is_v e2
------------------------------- :: abs
(\ x . e1) e2  --> {e2 / x} e1

is_v e2
-------------------------------------- :: abs2
( ( \ x . e1 ) : T1 ) e2  --> ( {e2 / x} e1 )

e --> e' 
-------------------- :: anno
e : T --> e' : T   

------------------------------------------------ :: tapptabs
(\ X . e : T1 ) @ T2 --> {T2 / X} (e : T1) 

-------------------------------------------------------------- :: tappabs
( ( \ x . e ) : ∀ X . T1 ) @ T2 --> ( \ x . e ) : {T2 / X} T1 

is_v e1
------------------------------ :: tappbot
(e1 : BOT) @ T --> (e1 : BOT)

e1 ¬= λ
is_v e1
------------------------------ :: deanno
(e1 : T1) --> e1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdsub_stable :: '' ::=

defn
E |- T1 <:ₛ T2 :: :: dsub_stable :: 'dsubstable_' by

E |- S1
-------------- :: top
E |- S1 <:ₛ TOP

E |- T1
------------------- :: bot
E |- BOT <:ₛ T1

E |- T1
------------------- :: refl
E |- T1 <:ₛ T1

E |- T1 <:ₛ S1
E |- S2 <:ₛ T2
-------------------------- :: arrow
E |- S1 -> S2 <:ₛ T1 -> T2

E |- U1
E |- { U1 / X } S1 <:ₛ { U1 / X } T1
-------------------------------------------- :: all
E |- ∀ X . S1 <:ₛ ∀ X . T1

T1 ¬= ∀ 
T1 ¬= *
T1 ¬= +
E |- U1
mono U1
E |- { U1 / X } S1 <:ₛ T1
---------------------------- :: alll
E |- ∀ X . S1 <:ₛ T1

E |- S1 <:ₛ T1
E |- S1 <:ₛ T2
------------------------ :: intersection1
E |- S1 <:ₛ T1 * T2

E |- S1 <:ₛ T1
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <:ₛ T1

E |- S2 <:ₛ T1
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <:ₛ T1

E |- S1 <:ₛ T1
E |- T2
------------------------ :: union1
E |- S1 <:ₛ T1 + T2

E |- S1 <:ₛ T2
E |- T1
------------------------ :: union2
E |- S1 <:ₛ T1 + T2

E |- S1 <:ₛ T1
E |- S2 <:ₛ T1
------------------------ :: union3
E |- S1 + S2 <:ₛ T1


defns
Jdsub :: '' ::=

defn
E |- T1 <: T2 :: :: dsub :: 'dsub_' by

E |- S
-------------- :: top
E |- S <: TOP

E |- T
------------------- :: bot
E |- BOT <: T

------------------- :: unit
E |- UNIT <: UNIT

E |- X
------------ :: tvar
E |- X <: X

E |- SX 
--------------- :: stvar
E |- SX <: SX 

E |- T1 <: S1
E |- S2 <: T2
-------------------------- :: arrow
E |- S1 -> S2 <: T1 -> T2

E |- ∀ X. T
E |- ∀ X. S
E , SX : ~▪ |- { SX / X } S <: { SX / X } T
-------------------------------------------- :: all
E |- ∀ X. S <: ∀ X. T

T1 ¬= ∀ 
T1 ¬= *
T1 ¬= +
E |- T2
E |- ∀ X. S
mono T2
E |- { T2 / X } S <: T1
---------------------------- :: alll
E |- ∀ X . S <: T1

E |- S <: T1
E |- S <: T2
------------------------ :: intersection1
E |- S <: T1 * T2

E |- S1 <: T
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <: T

E |- S2 <: T
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <: T

E |- S <: T1
E |- T2
------------------------ :: union1
E |- S <: T1 + T2

E |- S <: T2
E |- T1
------------------------ :: union2
E |- S <: T1 + T2

E |- S1 <: T
E |- S2 <: T
------------------------ :: union3
E |- S1 + S2 <: T

defns
Jdsub_nonoverlap :: '' ::=

defn
E |- T1 <: T2 :: :: dsub_no :: 'dsubno_' by

E |- S
-------------- :: top
E |- S <: TOP

E |- T
------------------- :: bot
E |- BOT <: T

------------------- :: unit
E |- UNIT <: UNIT

E |- X
------------ :: tvar
E |- X <: X

E |- SX 
--------------- :: stvar
E |- SX <: SX 

E |- T1 <: S1
E |- S2 <: T2
-------------------------- :: arrow
E |- S1 -> S2 <: T1 -> T2

E |- ∀ X. T
E |- ∀ X. S
E , SX : ~▪ |- { SX / X } S <: { SX / X } T
-------------------------------------------- :: all
E |- ∀ X. S <: ∀ X. T

T1 ¬= ∀ 
T1 ¬= *
T1 ¬= +
T1 ¬= TOP
E |- T2
E |- ∀ X. S
mono T2
E |- { T2 / X } S <: T1
---------------------------- :: alll
E |- ∀ X . S <: T1

E |- S <: T1
E |- S <: T2
------------------------ :: intersection1
E |- S <: T1 * T2

T ¬= *
E |- S1 <: T
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <: T

T ¬= *
E |- S2 <: T
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <: T

S ¬= +
E |- S <: T1
E |- T2
------------------------ :: union1
E |- S <: T1 + T2

S ¬= +
E |- S <: T2
E |- T1
------------------------ :: union2
E |- S <: T1 + T2

E |- S1 <: T
E |- S2 <: T
------------------------ :: union3
E |- S1 + S2 <: T


defns
Jdtyping :: '' ::=

defn 
E |- e => T :: :: dinf :: 'dinf_' by 

|- E
(x : T) in E
-------------- :: var
E |- x => T

E |- T
E |- e <= T
------------------ :: anno
E |- (e : T) => T

|- E
--------------------------- :: unit
E |- unit => UNIT

E |- e1 => T2
E |- T2 • e2 =>=> T1
--------------------------- :: app
E |- ( e1 e2 ) => T1

E |- ∀ X . T
E , X : ▪ |- e : T <= T
-------------------------------- :: tabs
E |- \ X . e : T => ∀ X . T

E |- T
E |- e => BOT
--------------------------- :: tappbot
E |- e @ T => BOT

E |- T2
E |- e1 => ∀ X . T1
----------------------------- :: tappall
E |- e1 @ T2 => {T2 / X} T1


% disable inferring mono types 
% mono (T1 -> T2)
% E |- T1 -> T2
% E, x : T1 |- e <= T2
% --------------------------- :: abs
% E |- \ x . e => T1 -> T2

defn
E |- e <= T :: :: dchk :: 'dchk_' by

% use the following rule instead
% TODO: check E |- e
% |- E 
% --------------------------- :: top
% E |- e <= TOP

E, x : BOT |- e <= TOP
--------------------------- :: top_abs
E |- \ x . e <= TOP

E |- T2
E, x : T1 |- e <= T2
--------------------------- :: abs
E |- \ x . e <= T1 -> T2

E |- e1 => T1
E |- T1 • e2 =>=> T2
------------------------ :: app
E |- e1 e2 <= T2

E |- ∀ X . T
E, X : ▪ |- e <= T
--------------------------- :: all
E |- e <= ∀ X . T

E |- e => S
E |- S <: T
---------------- :: sub
E |- e <= T

E |- e <= S
E |- e <= T
------------------- :: intersection
E |- e <= S * T

E |- e <= S
E |- T
------------------- :: union1
E |- e <= S + T

E |- e <= T
E |- S
------------------- :: union2
E |- e <= S + T

defn 
E |- T1 • e =>=> T2 :: :: dinfapp :: 'dinfapp_' by

E |- T2
E |- e <= T1
-------------------------------- :: arrow
E |- ( T1 -> T2 ) • e =>=> T2

mono T3
E |- T3 
E |- ∀ X . T1
E |- { T3 / X } T1 • e =>=> T2
-------------------------------- :: all
E |- ( ∀ X . T1 ) • e =>=> T2

E |- e <= TOP
-------------------------------- :: bot
E |- BOT • e =>=> BOT


defns
Jd_worklist_reduction :: '' ::=

defn
|= W :: :: d_wl_red :: 'd_wlred_' by

|= W
⌊ W ⌋ |- S
------------------ :: subtop
|= W , S <: TOP

|= W
⌊ W ⌋ |- T
------------------- :: subbot
|= W , BOT <: T

|= W
------------------- :: subunit
|= W , UNIT <: UNIT

|= W
⌊ W ⌋ |- X
------------ :: subtvar
|= W , X <: X

|= W 
⌊ W ⌋ |- SX 
--------------- :: substvar
|= W , SX <: SX 

|= W , T1 <: S1 , S2 <: T2
-------------------------- :: subarrow
|= W , S1 -> S2 <: T1 -> T2

|= W , SX : ~▪ , { SX / X } S <: { SX / X } T
-------------------------------------------- :: suball
|= W , ∀ X . S <: ∀ X . T

T1 ¬= +
T1 ¬= *
T1 ¬= ∀
mono T2
⌊ W ⌋ |- T2
|= W , {T2 / X} S1 <: T1
--------------------------------------- :: suballl
|= W , ∀ X . S1 <: T1

|= W , S1 <: T1, S1 <: T2
------------------------ :: subintersection1
|= W , S1 <: T1 * T2

⌊ W ⌋ |- S2
|= W , S1 <: T
------------------------ :: subintersection2
|= W , S1 * S2 <: T

⌊ W ⌋|- S1
|= W , S2 <: T
------------------------ :: subintersection3
|= W , S1 * S2 <: T

⌊ W ⌋ |- T2
|= W , S1 <: T1
------------------------ :: subunion1
|= W , S1 <: T1 + T2

⌊ W ⌋ |- T1
|= W , S1 <: T2
------------------------ :: subunion2
|= W , S1 <: T1 + T2

|= W , S1 <: T1 , S2 <: T1
---------------------------- :: subunion3
|= W , S1 + S2 <: T1

e ¬= λ
T1 ¬= TOP
T1 ¬= ∀
T1 ¬= *
T1 ¬= +
|= W , e => _ <: T1
------------------------ :: chksub
|= W , e <= T1

X ∈ₛ T1
|= W , X : ▪ , e <= T1 
------------------------- :: chkall
|= W , e <= ∀ X . T1    

|= W , x : S1 , e <= T1
--------------------------- :: chkabsarrow
|= W , \ x . e <= S1 -> T1    

|= W , x : BOT , e <= TOP 
---------------------------  :: chkabstop
|= W , \ x . e <= TOP

|= W , e <= T1 , e <= T2
---------------------------  :: chkintersection
|= W , e <= T1 * T2 

⌊ W ⌋ |- T2 
|= W , e <= T1 
---------------------------  :: chkunion1
|= W , e <= T1 + T2 

⌊ W ⌋ |- T1
|= W , e <= T2
---------------------------  :: chkunion2
|= W , e <= T1 + T2 

(x : T) in ⌊ W ⌋ 
|= W , c $ T
-------------------------- :: infvar
|= W , x => c

|= W , c $ T , e <= T
-------------------------- :: infanno
|= W , (e : T) => c

X ∈ₛ T
|= W , c $ ( ∀ X . T ) , X : ▪ , e <= T
------------------------------------- :: inftabs
|= W , \ X . e : T => c

|= W , c $ UNIT
------------------------------------- :: infunit
|= W , unit => c

|= W , e1 => _ • e2 =>=> c 
------------------------------------- :: infapp
|= W , (e1 e2) => c

⌊ W ⌋ |- T
|= W , e => _ ∘ T =>=> c
------------------------------------- :: inftapp
|= W , e @ T => c

⌊ W ⌋ |- ∀ X . T1
|= W , c $ {T2 / X} T1
------------------------------------- :: inftappall
|= W , ∀ X . T1 ∘ T2 =>=> c

⌊ W ⌋ |- T
|= W , c $ BOT
------------------------------------- :: inftappbot
|= W , BOT ∘ T =>=> c

⌊ W ⌋ |- T2
|= W , c $ T2 , e <= T1
------------------------------------- :: infapparrow
|= W , T1 -> T2 • e =>=> c

|= W , c $ BOT
-------------------------------------------------- :: infappbot
|= W , BOT • e =>=> c

⌊ W ⌋ |- T2
|= W , T1 • e =>=> c
-------------------------------------------------- :: infappintersection1
|= W , T1 * T2 • e =>=> c

⌊ W ⌋ |- T1
|= W , T2 • e =>=> c
-------------------------------------------------- :: infappintersection2
|= W , T1 * T2 • e =>=> c

|= W , T1 • e =>=> c , T2 • e =>=> c
-------------------------------------------------- :: infappunion
|= W , T1 + T2 • e =>=> c
