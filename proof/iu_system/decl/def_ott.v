(* generated by Ott 0.32, locally-nameless lngen from: decl/language.ott *)
Require Import Bool.
Require Import Metalib.Metatheory.
Require Import List.
(** syntax *)
Definition typvar : Set := var.
Definition stypvar : Set := var.
Definition expvar : Set := var.

Inductive dtyp : Set := 
 | dtyp_unit : dtyp
 | dtyp_top : dtyp
 | dtyp_bot : dtyp
 | dtyp_var_b (_:nat)
 | dtyp_var_f (X:typvar)
 | dtyp_svar (SX:stypvar)
 | dtyp_arrow (T1:dtyp) (T2:dtyp)
 | dtyp_all (T:dtyp)
 | dtyp_union (T1:dtyp) (T2:dtyp)
 | dtyp_intersection (T1:dtyp) (T2:dtyp).

Inductive dbody : Set := 
 | dbody_anno (e:dexp) (T:dtyp)
with dexp : Set := 
 | dexp_unit : dexp
 | dexp_top : dexp
 | dexp_var_b (_:nat)
 | dexp_var_f (x:expvar)
 | dexp_abs (e:dexp)
 | dexp_app (e1:dexp) (e2:dexp)
 | dexp_tabs (dbody5:dbody)
 | dexp_tapp (e:dexp) (T:dtyp)
 | dexp_anno (e:dexp) (T:dtyp).

Inductive dcont : Set := 
 | dcont_done : dcont
 | dcont_infapp (e:dexp) (c:dcont)
 | dcont_infabs (c1:dcont) (c2:dcont)
 | dcont_tapp (T:dtyp) (c:dcont)
 | dcont_sub (T:dtyp).

Inductive binding : Set := 
 | dbind_tvar_empty : binding
 | dbind_stvar_empty : binding
 | dbind_typ (T:dtyp).

Inductive dwork : Set := 
 | dwork_infer (e:dexp) (c:dcont)
 | dwork_check (e:dexp) (T:dtyp)
 | dwork_infabs (T:dtyp) (c1:dcont) (c2:dcont)
 | dwork_inftapp (T1:dtyp) (T2:dtyp) (c:dcont)
 | dwork_sub (T1:dtyp) (T2:dtyp)
 | dwork_apply (c:dcont) (T:dtyp).

Definition denv : Set := list (atom*binding).

Inductive dworklist : Set := 
 | dworklist_empty : dworklist
 | dworklist_consvar (W:dworklist) (x:expvar) (b:binding)
 | dworklist_constvar (W:dworklist) (X:typvar) (b:binding)
 | dworklist_consstvar (W:dworklist) (SX:stypvar) (b:binding)
 | dworklist_conswork (W:dworklist) (w:dwork).

(* EXPERIMENTAL *)
(** auxiliary functions on the new list types *)
(** library functions *)
(** subrules *)
Definition is_dvalue_of_dexp (e_5:dexp) : bool :=
  match e_5 with
  | dexp_unit => (true)
  | dexp_top => (true)
  | (dexp_var_b nat) => false
  | (dexp_var_f x) => false
  | (dexp_abs e) => (true)
  | (dexp_app e1 e2) => false
  | (dexp_tabs dbody5) => (true)
  | (dexp_tapp e T) => false
  | (dexp_anno e T) => false
end.

(** arities *)
(** opening up abstractions *)
Fixpoint open_dtyp_wrt_dtyp_rec (k:nat) (T_5:dtyp) (T__6:dtyp) {struct T__6}: dtyp :=
  match T__6 with
  | dtyp_unit => dtyp_unit 
  | dtyp_top => dtyp_top 
  | dtyp_bot => dtyp_bot 
  | (dtyp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => dtyp_var_b nat
        | inleft (right _) => T_5
        | inright _ => dtyp_var_b (nat - 1)
      end
  | (dtyp_var_f X) => dtyp_var_f X
  | (dtyp_svar SX) => dtyp_svar SX
  | (dtyp_arrow T1 T2) => dtyp_arrow (open_dtyp_wrt_dtyp_rec k T_5 T1) (open_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dtyp_all T) => dtyp_all (open_dtyp_wrt_dtyp_rec (S k) T_5 T)
  | (dtyp_union T1 T2) => dtyp_union (open_dtyp_wrt_dtyp_rec k T_5 T1) (open_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dtyp_intersection T1 T2) => dtyp_intersection (open_dtyp_wrt_dtyp_rec k T_5 T1) (open_dtyp_wrt_dtyp_rec k T_5 T2)
end.

Fixpoint open_dexp_wrt_dtyp_rec (k:nat) (T_5:dtyp) (e_5:dexp) {struct e_5}: dexp :=
  match e_5 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => dexp_var_b nat
  | (dexp_var_f x) => dexp_var_f x
  | (dexp_abs e) => dexp_abs (open_dexp_wrt_dtyp_rec k T_5 e)
  | (dexp_app e1 e2) => dexp_app (open_dexp_wrt_dtyp_rec k T_5 e1) (open_dexp_wrt_dtyp_rec k T_5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (open_dbody_wrt_dtyp_rec (S k) T_5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (open_dexp_wrt_dtyp_rec k T_5 e) (open_dtyp_wrt_dtyp_rec k T_5 T)
  | (dexp_anno e T) => dexp_anno (open_dexp_wrt_dtyp_rec k T_5 e) (open_dtyp_wrt_dtyp_rec k T_5 T)
end
with open_dbody_wrt_dtyp_rec (k:nat) (T5:dtyp) (dbody5:dbody) : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (open_dexp_wrt_dtyp_rec k T5 e) (open_dtyp_wrt_dtyp_rec k T5 T)
end.

Fixpoint open_dexp_wrt_dexp_rec (k:nat) (e_5:dexp) (e__6:dexp) {struct e__6}: dexp :=
  match e__6 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => 
      match lt_eq_lt_dec nat k with
        | inleft (left _) => dexp_var_b nat
        | inleft (right _) => e_5
        | inright _ => dexp_var_b (nat - 1)
      end
  | (dexp_var_f x) => dexp_var_f x
  | (dexp_abs e) => dexp_abs (open_dexp_wrt_dexp_rec (S k) e_5 e)
  | (dexp_app e1 e2) => dexp_app (open_dexp_wrt_dexp_rec k e_5 e1) (open_dexp_wrt_dexp_rec k e_5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (open_dbody_wrt_dexp_rec k e_5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (open_dexp_wrt_dexp_rec k e_5 e) T
  | (dexp_anno e T) => dexp_anno (open_dexp_wrt_dexp_rec k e_5 e) T
end
with open_dbody_wrt_dexp_rec (k:nat) (e5:dexp) (dbody5:dbody) : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (open_dexp_wrt_dexp_rec k e5 e) T
end.

Fixpoint open_dcont_wrt_dtyp_rec (k:nat) (T5:dtyp) (c_5:dcont) {struct c_5}: dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (open_dexp_wrt_dtyp_rec k T5 e) (open_dcont_wrt_dtyp_rec k T5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (open_dcont_wrt_dtyp_rec k T5 c1) (open_dcont_wrt_dtyp_rec k T5 c2)
  | (dcont_tapp T c) => dcont_tapp (open_dtyp_wrt_dtyp_rec k T5 T) (open_dcont_wrt_dtyp_rec k T5 c)
  | (dcont_sub T) => dcont_sub (open_dtyp_wrt_dtyp_rec k T5 T)
end.

Fixpoint open_dcont_wrt_dexp_rec (k:nat) (e5:dexp) (c_5:dcont) {struct c_5}: dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (open_dexp_wrt_dexp_rec k e5 e) (open_dcont_wrt_dexp_rec k e5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (open_dcont_wrt_dexp_rec k e5 c1) (open_dcont_wrt_dexp_rec k e5 c2)
  | (dcont_tapp T c) => dcont_tapp T (open_dcont_wrt_dexp_rec k e5 c)
  | (dcont_sub T) => dcont_sub T
end.

Definition open_binding_wrt_dtyp_rec (k:nat) (T5:dtyp) (b5:binding) : binding :=
  match b5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ T) => dbind_typ (open_dtyp_wrt_dtyp_rec k T5 T)
end.

Definition open_dwork_wrt_dtyp_rec (k:nat) (T_5:dtyp) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (open_dexp_wrt_dtyp_rec k T_5 e) (open_dcont_wrt_dtyp_rec k T_5 c)
  | (dwork_check e T) => dwork_check (open_dexp_wrt_dtyp_rec k T_5 e) (open_dtyp_wrt_dtyp_rec k T_5 T)
  | (dwork_infabs T c1 c2) => dwork_infabs (open_dtyp_wrt_dtyp_rec k T_5 T) (open_dcont_wrt_dtyp_rec k T_5 c1) (open_dcont_wrt_dtyp_rec k T_5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp (open_dtyp_wrt_dtyp_rec k T_5 T1) (open_dtyp_wrt_dtyp_rec k T_5 T2) (open_dcont_wrt_dtyp_rec k T_5 c)
  | (dwork_sub T1 T2) => dwork_sub (open_dtyp_wrt_dtyp_rec k T_5 T1) (open_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dwork_apply c T) => dwork_apply (open_dcont_wrt_dtyp_rec k T_5 c) (open_dtyp_wrt_dtyp_rec k T_5 T)
end.

Definition open_dwork_wrt_dexp_rec (k:nat) (e5:dexp) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (open_dexp_wrt_dexp_rec k e5 e) (open_dcont_wrt_dexp_rec k e5 c)
  | (dwork_check e T) => dwork_check (open_dexp_wrt_dexp_rec k e5 e) T
  | (dwork_infabs T c1 c2) => dwork_infabs T (open_dcont_wrt_dexp_rec k e5 c1) (open_dcont_wrt_dexp_rec k e5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp T1 T2 (open_dcont_wrt_dexp_rec k e5 c)
  | (dwork_sub T1 T2) => dwork_sub T1 T2
  | (dwork_apply c T) => dwork_apply (open_dcont_wrt_dexp_rec k e5 c) T
end.

Fixpoint open_dworklist_wrt_dtyp_rec (k:nat) (T5:dtyp) (W5:dworklist) {struct W5}: dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (open_dworklist_wrt_dtyp_rec k T5 W) x (open_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_constvar W X b) => dworklist_constvar (open_dworklist_wrt_dtyp_rec k T5 W) X (open_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_consstvar W SX b) => dworklist_consstvar (open_dworklist_wrt_dtyp_rec k T5 W) SX (open_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_conswork W w) => dworklist_conswork (open_dworklist_wrt_dtyp_rec k T5 W) (open_dwork_wrt_dtyp_rec k T5 w)
end.

Fixpoint open_dworklist_wrt_dexp_rec (k:nat) (e5:dexp) (W5:dworklist) {struct W5}: dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (open_dworklist_wrt_dexp_rec k e5 W) x b
  | (dworklist_constvar W X b) => dworklist_constvar (open_dworklist_wrt_dexp_rec k e5 W) X b
  | (dworklist_consstvar W SX b) => dworklist_consstvar (open_dworklist_wrt_dexp_rec k e5 W) SX b
  | (dworklist_conswork W w) => dworklist_conswork (open_dworklist_wrt_dexp_rec k e5 W) (open_dwork_wrt_dexp_rec k e5 w)
end.

Definition open_dexp_wrt_dexp e_5 e__6 := open_dexp_wrt_dexp_rec 0 e__6 e_5.

Definition open_dbody_wrt_dexp e5 dbody5 := open_dbody_wrt_dexp_rec 0 dbody5 e5.

Definition open_dexp_wrt_dtyp T_5 e_5 := open_dexp_wrt_dtyp_rec 0 e_5 T_5.

Definition open_dwork_wrt_dexp e5 w5 := open_dwork_wrt_dexp_rec 0 w5 e5.

Definition open_dworklist_wrt_dtyp T5 W5 := open_dworklist_wrt_dtyp_rec 0 W5 T5.

Definition open_dcont_wrt_dexp e5 c_5 := open_dcont_wrt_dexp_rec 0 c_5 e5.

Definition open_binding_wrt_dtyp T5 b5 := open_binding_wrt_dtyp_rec 0 b5 T5.

Definition open_dcont_wrt_dtyp T5 c_5 := open_dcont_wrt_dtyp_rec 0 c_5 T5.

Definition open_dworklist_wrt_dexp e5 W5 := open_dworklist_wrt_dexp_rec 0 W5 e5.

Definition open_dbody_wrt_dtyp T5 dbody5 := open_dbody_wrt_dtyp_rec 0 dbody5 T5.

Definition open_dtyp_wrt_dtyp T_5 T__6 := open_dtyp_wrt_dtyp_rec 0 T__6 T_5.

Definition open_dwork_wrt_dtyp T_5 w5 := open_dwork_wrt_dtyp_rec 0 w5 T_5.

(** closing up abstractions *)
Fixpoint close_dtyp_wrt_dtyp_rec (k:nat) (T_5:var) (T__6:dtyp) {struct T__6}: dtyp :=
  match T__6 with
  | dtyp_unit => dtyp_unit 
  | dtyp_top => dtyp_top 
  | dtyp_bot => dtyp_bot 
  | (dtyp_var_b nat) => 
       if (lt_dec nat k) 
         then dtyp_var_b nat
         else dtyp_var_b (S nat)
  | (dtyp_var_f X) => if (T_5 === X) then (dtyp_var_b k) else (dtyp_var_f X)
  | (dtyp_svar SX) => dtyp_svar SX
  | (dtyp_arrow T1 T2) => dtyp_arrow (close_dtyp_wrt_dtyp_rec k T_5 T1) (close_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dtyp_all T) => dtyp_all (close_dtyp_wrt_dtyp_rec (S k) T_5 T)
  | (dtyp_union T1 T2) => dtyp_union (close_dtyp_wrt_dtyp_rec k T_5 T1) (close_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dtyp_intersection T1 T2) => dtyp_intersection (close_dtyp_wrt_dtyp_rec k T_5 T1) (close_dtyp_wrt_dtyp_rec k T_5 T2)
end.

Fixpoint close_dexp_wrt_dtyp_rec (k:nat) (T_5:var) (e_5:dexp) {struct e_5}: dexp :=
  match e_5 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => dexp_var_b nat
  | (dexp_var_f x) => dexp_var_f x
  | (dexp_abs e) => dexp_abs (close_dexp_wrt_dtyp_rec k T_5 e)
  | (dexp_app e1 e2) => dexp_app (close_dexp_wrt_dtyp_rec k T_5 e1) (close_dexp_wrt_dtyp_rec k T_5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (close_dbody_wrt_dtyp_rec (S k) T_5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (close_dexp_wrt_dtyp_rec k T_5 e) (close_dtyp_wrt_dtyp_rec k T_5 T)
  | (dexp_anno e T) => dexp_anno (close_dexp_wrt_dtyp_rec k T_5 e) (close_dtyp_wrt_dtyp_rec k T_5 T)
end
with close_dbody_wrt_dtyp_rec (k:nat) (T5:var) (dbody5:dbody) : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (close_dexp_wrt_dtyp_rec k T5 e) (close_dtyp_wrt_dtyp_rec k T5 T)
end.

Fixpoint close_dexp_wrt_dexp_rec (k:nat) (e_5:var) (e__6:dexp) {struct e__6}: dexp :=
  match e__6 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => 
       if (lt_dec nat k) 
         then dexp_var_b nat
         else dexp_var_b (S nat)
  | (dexp_var_f x) => if (e_5 === x) then (dexp_var_b k) else (dexp_var_f x)
  | (dexp_abs e) => dexp_abs (close_dexp_wrt_dexp_rec (S k) e_5 e)
  | (dexp_app e1 e2) => dexp_app (close_dexp_wrt_dexp_rec k e_5 e1) (close_dexp_wrt_dexp_rec k e_5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (close_dbody_wrt_dexp_rec k e_5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (close_dexp_wrt_dexp_rec k e_5 e) T
  | (dexp_anno e T) => dexp_anno (close_dexp_wrt_dexp_rec k e_5 e) T
end
with close_dbody_wrt_dexp_rec (k:nat) (e5:var) (dbody5:dbody) : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (close_dexp_wrt_dexp_rec k e5 e) T
end.

Fixpoint close_dcont_wrt_dtyp_rec (k:nat) (T5:var) (c_5:dcont) {struct c_5}: dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (close_dexp_wrt_dtyp_rec k T5 e) (close_dcont_wrt_dtyp_rec k T5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (close_dcont_wrt_dtyp_rec k T5 c1) (close_dcont_wrt_dtyp_rec k T5 c2)
  | (dcont_tapp T c) => dcont_tapp (close_dtyp_wrt_dtyp_rec k T5 T) (close_dcont_wrt_dtyp_rec k T5 c)
  | (dcont_sub T) => dcont_sub (close_dtyp_wrt_dtyp_rec k T5 T)
end.

Fixpoint close_dcont_wrt_dexp_rec (k:nat) (e5:var) (c_5:dcont) {struct c_5}: dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (close_dexp_wrt_dexp_rec k e5 e) (close_dcont_wrt_dexp_rec k e5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (close_dcont_wrt_dexp_rec k e5 c1) (close_dcont_wrt_dexp_rec k e5 c2)
  | (dcont_tapp T c) => dcont_tapp T (close_dcont_wrt_dexp_rec k e5 c)
  | (dcont_sub T) => dcont_sub T
end.

Definition close_binding_wrt_dtyp_rec (k:nat) (T5:var) (b5:binding) : binding :=
  match b5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ T) => dbind_typ (close_dtyp_wrt_dtyp_rec k T5 T)
end.

Definition close_dwork_wrt_dtyp_rec (k:nat) (T_5:var) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (close_dexp_wrt_dtyp_rec k T_5 e) (close_dcont_wrt_dtyp_rec k T_5 c)
  | (dwork_check e T) => dwork_check (close_dexp_wrt_dtyp_rec k T_5 e) (close_dtyp_wrt_dtyp_rec k T_5 T)
  | (dwork_infabs T c1 c2) => dwork_infabs (close_dtyp_wrt_dtyp_rec k T_5 T) (close_dcont_wrt_dtyp_rec k T_5 c1) (close_dcont_wrt_dtyp_rec k T_5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp (close_dtyp_wrt_dtyp_rec k T_5 T1) (close_dtyp_wrt_dtyp_rec k T_5 T2) (close_dcont_wrt_dtyp_rec k T_5 c)
  | (dwork_sub T1 T2) => dwork_sub (close_dtyp_wrt_dtyp_rec k T_5 T1) (close_dtyp_wrt_dtyp_rec k T_5 T2)
  | (dwork_apply c T) => dwork_apply (close_dcont_wrt_dtyp_rec k T_5 c) (close_dtyp_wrt_dtyp_rec k T_5 T)
end.

Definition close_dwork_wrt_dexp_rec (k:nat) (e5:var) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (close_dexp_wrt_dexp_rec k e5 e) (close_dcont_wrt_dexp_rec k e5 c)
  | (dwork_check e T) => dwork_check (close_dexp_wrt_dexp_rec k e5 e) T
  | (dwork_infabs T c1 c2) => dwork_infabs T (close_dcont_wrt_dexp_rec k e5 c1) (close_dcont_wrt_dexp_rec k e5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp T1 T2 (close_dcont_wrt_dexp_rec k e5 c)
  | (dwork_sub T1 T2) => dwork_sub T1 T2
  | (dwork_apply c T) => dwork_apply (close_dcont_wrt_dexp_rec k e5 c) T
end.

Fixpoint close_dworklist_wrt_dtyp_rec (k:nat) (T5:var) (W5:dworklist) {struct W5}: dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (close_dworklist_wrt_dtyp_rec k T5 W) x (close_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_constvar W X b) => dworklist_constvar (close_dworklist_wrt_dtyp_rec k T5 W) X (close_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_consstvar W SX b) => dworklist_consstvar (close_dworklist_wrt_dtyp_rec k T5 W) SX (close_binding_wrt_dtyp_rec k T5 b)
  | (dworklist_conswork W w) => dworklist_conswork (close_dworklist_wrt_dtyp_rec k T5 W) (close_dwork_wrt_dtyp_rec k T5 w)
end.

Fixpoint close_dworklist_wrt_dexp_rec (k:nat) (e5:var) (W5:dworklist) {struct W5}: dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (close_dworklist_wrt_dexp_rec k e5 W) x b
  | (dworklist_constvar W X b) => dworklist_constvar (close_dworklist_wrt_dexp_rec k e5 W) X b
  | (dworklist_consstvar W SX b) => dworklist_consstvar (close_dworklist_wrt_dexp_rec k e5 W) SX b
  | (dworklist_conswork W w) => dworklist_conswork (close_dworklist_wrt_dexp_rec k e5 W) (close_dwork_wrt_dexp_rec k e5 w)
end.

Definition close_dexp_wrt_dexp e__6 e_5 := close_dexp_wrt_dexp_rec 0 e__6 e_5.

Definition close_dbody_wrt_dexp dbody5 e5 := close_dbody_wrt_dexp_rec 0 dbody5 e5.

Definition close_dexp_wrt_dtyp e_5 T_5 := close_dexp_wrt_dtyp_rec 0 e_5 T_5.

Definition close_dwork_wrt_dexp w5 e5 := close_dwork_wrt_dexp_rec 0 w5 e5.

Definition close_dworklist_wrt_dtyp W5 T5 := close_dworklist_wrt_dtyp_rec 0 W5 T5.

Definition close_dcont_wrt_dexp c_5 e5 := close_dcont_wrt_dexp_rec 0 c_5 e5.

Definition close_binding_wrt_dtyp b5 T5 := close_binding_wrt_dtyp_rec 0 b5 T5.

Definition close_dcont_wrt_dtyp c_5 T5 := close_dcont_wrt_dtyp_rec 0 c_5 T5.

Definition close_dworklist_wrt_dexp W5 e5 := close_dworklist_wrt_dexp_rec 0 W5 e5.

Definition close_dbody_wrt_dtyp dbody5 T5 := close_dbody_wrt_dtyp_rec 0 dbody5 T5.

Definition close_dtyp_wrt_dtyp T__6 T_5 := close_dtyp_wrt_dtyp_rec 0 T__6 T_5.

Definition close_dwork_wrt_dtyp w5 T_5 := close_dwork_wrt_dtyp_rec 0 w5 T_5.

(** terms are locally-closed pre-terms *)
(** definitions *)

(* defns LC_dtyp *)
Inductive lc_dtyp : dtyp -> Prop :=    (* defn lc_dtyp *)
 | lc_dtyp_unit : 
     (lc_dtyp dtyp_unit)
 | lc_dtyp_top : 
     (lc_dtyp dtyp_top)
 | lc_dtyp_bot : 
     (lc_dtyp dtyp_bot)
 | lc_dtyp_var_f : forall (X:typvar),
     (lc_dtyp (dtyp_var_f X))
 | lc_dtyp_svar : forall (SX:stypvar),
     (lc_dtyp (dtyp_svar SX))
 | lc_dtyp_arrow : forall (T1 T2:dtyp),
     (lc_dtyp T1) ->
     (lc_dtyp T2) ->
     (lc_dtyp (dtyp_arrow T1 T2))
 | lc_dtyp_all : forall (T:dtyp),
      ( forall X , lc_dtyp  ( open_dtyp_wrt_dtyp T (dtyp_var_f X) )  )  ->
     (lc_dtyp (dtyp_all T))
 | lc_dtyp_union : forall (T1 T2:dtyp),
     (lc_dtyp T1) ->
     (lc_dtyp T2) ->
     (lc_dtyp (dtyp_union T1 T2))
 | lc_dtyp_intersection : forall (T1 T2:dtyp),
     (lc_dtyp T1) ->
     (lc_dtyp T2) ->
     (lc_dtyp (dtyp_intersection T1 T2)).

(* defns LC_dexp_dbody *)
Inductive lc_dexp : dexp -> Prop :=    (* defn lc_dexp *)
 | lc_dexp_unit : 
     (lc_dexp dexp_unit)
 | lc_dexp_top : 
     (lc_dexp dexp_top)
 | lc_dexp_var_f : forall (x:expvar),
     (lc_dexp (dexp_var_f x))
 | lc_dexp_abs : forall (e:dexp),
      ( forall x , lc_dexp  ( open_dexp_wrt_dexp e (dexp_var_f x) )  )  ->
     (lc_dexp (dexp_abs e))
 | lc_dexp_app : forall (e1 e2:dexp),
     (lc_dexp e1) ->
     (lc_dexp e2) ->
     (lc_dexp (dexp_app e1 e2))
 | lc_dexp_tabs : forall (dbody5:dbody),
      ( forall X , lc_dbody  ( open_dbody_wrt_dtyp dbody5 (dtyp_var_f X) )  )  ->
     (lc_dexp (dexp_tabs dbody5))
 | lc_dexp_tapp : forall (e:dexp) (T:dtyp),
     (lc_dexp e) ->
     (lc_dtyp T) ->
     (lc_dexp (dexp_tapp e T))
 | lc_dexp_anno : forall (e:dexp) (T:dtyp),
     (lc_dexp e) ->
     (lc_dtyp T) ->
     (lc_dexp (dexp_anno e T))
with lc_dbody : dbody -> Prop :=    (* defn lc_dbody *)
 | lc_dbody_anno : forall (e:dexp) (T:dtyp),
     (lc_dexp e) ->
     (lc_dtyp T) ->
     (lc_dbody (dbody_anno e T)).

(* defns LC_dcont *)
Inductive lc_dcont : dcont -> Prop :=    (* defn lc_dcont *)
 | lc_dcont_done : 
     (lc_dcont dcont_done)
 | lc_dcont_infapp : forall (e:dexp) (c:dcont),
     (lc_dexp e) ->
     (lc_dcont c) ->
     (lc_dcont (dcont_infapp e c))
 | lc_dcont_infabs : forall (c1 c2:dcont),
     (lc_dcont c1) ->
     (lc_dcont c2) ->
     (lc_dcont (dcont_infabs c1 c2))
 | lc_dcont_tapp : forall (T:dtyp) (c:dcont),
     (lc_dtyp T) ->
     (lc_dcont c) ->
     (lc_dcont (dcont_tapp T c))
 | lc_dcont_sub : forall (T:dtyp),
     (lc_dtyp T) ->
     (lc_dcont (dcont_sub T)).

(* defns LC_binding *)
Inductive lc_binding : binding -> Prop :=    (* defn lc_binding *)
 | lc_dbind_tvar_empty : 
     (lc_binding dbind_tvar_empty)
 | lc_dbind_stvar_empty : 
     (lc_binding dbind_stvar_empty)
 | lc_dbind_typ : forall (T:dtyp),
     (lc_dtyp T) ->
     (lc_binding (dbind_typ T)).

(* defns LC_dwork *)
Inductive lc_dwork : dwork -> Prop :=    (* defn lc_dwork *)
 | lc_dwork_infer : forall (e:dexp) (c:dcont),
     (lc_dexp e) ->
     (lc_dcont c) ->
     (lc_dwork (dwork_infer e c))
 | lc_dwork_check : forall (e:dexp) (T:dtyp),
     (lc_dexp e) ->
     (lc_dtyp T) ->
     (lc_dwork (dwork_check e T))
 | lc_dwork_infabs : forall (T:dtyp) (c1 c2:dcont),
     (lc_dtyp T) ->
     (lc_dcont c1) ->
     (lc_dcont c2) ->
     (lc_dwork (dwork_infabs T c1 c2))
 | lc_dwork_inftapp : forall (T1 T2:dtyp) (c:dcont),
     (lc_dtyp T1) ->
     (lc_dtyp T2) ->
     (lc_dcont c) ->
     (lc_dwork (dwork_inftapp T1 T2 c))
 | lc_dwork_sub : forall (T1 T2:dtyp),
     (lc_dtyp T1) ->
     (lc_dtyp T2) ->
     (lc_dwork (dwork_sub T1 T2))
 | lc_dwork_apply : forall (c:dcont) (T:dtyp),
     (lc_dcont c) ->
     (lc_dtyp T) ->
     (lc_dwork (dwork_apply c T)).

(* defns LC_dworklist *)
Inductive lc_dworklist : dworklist -> Prop :=    (* defn lc_dworklist *)
 | lc_dworklist_empty : 
     (lc_dworklist dworklist_empty)
 | lc_dworklist_consvar : forall (W:dworklist) (x:expvar) (b:binding),
     (lc_dworklist W) ->
     (lc_binding b) ->
     (lc_dworklist (dworklist_consvar W x b))
 | lc_dworklist_constvar : forall (W:dworklist) (X:typvar) (b:binding),
     (lc_dworklist W) ->
     (lc_binding b) ->
     (lc_dworklist (dworklist_constvar W X b))
 | lc_dworklist_consstvar : forall (W:dworklist) (SX:stypvar) (b:binding),
     (lc_dworklist W) ->
     (lc_binding b) ->
     (lc_dworklist (dworklist_consstvar W SX b))
 | lc_dworklist_conswork : forall (W:dworklist) (w:dwork),
     (lc_dworklist W) ->
     (lc_dwork w) ->
     (lc_dworklist (dworklist_conswork W w)).
(** free variables *)
Fixpoint fstv_in_dtyp (T_5:dtyp) : vars :=
  match T_5 with
  | dtyp_unit => {}
  | dtyp_top => {}
  | dtyp_bot => {}
  | (dtyp_var_b nat) => {}
  | (dtyp_var_f X) => {}
  | (dtyp_svar SX) => {{SX}}
  | (dtyp_arrow T1 T2) => (fstv_in_dtyp T1) \u (fstv_in_dtyp T2)
  | (dtyp_all T) => (fstv_in_dtyp T)
  | (dtyp_union T1 T2) => (fstv_in_dtyp T1) \u (fstv_in_dtyp T2)
  | (dtyp_intersection T1 T2) => (fstv_in_dtyp T1) \u (fstv_in_dtyp T2)
end.

Fixpoint ftv_in_dtyp (T_5:dtyp) : vars :=
  match T_5 with
  | dtyp_unit => {}
  | dtyp_top => {}
  | dtyp_bot => {}
  | (dtyp_var_b nat) => {}
  | (dtyp_var_f X) => {{X}}
  | (dtyp_svar SX) => {}
  | (dtyp_arrow T1 T2) => (ftv_in_dtyp T1) \u (ftv_in_dtyp T2)
  | (dtyp_all T) => (ftv_in_dtyp T)
  | (dtyp_union T1 T2) => (ftv_in_dtyp T1) \u (ftv_in_dtyp T2)
  | (dtyp_intersection T1 T2) => (ftv_in_dtyp T1) \u (ftv_in_dtyp T2)
end.

Fixpoint fstv_in_dexp (e_5:dexp) : vars :=
  match e_5 with
  | dexp_unit => {}
  | dexp_top => {}
  | (dexp_var_b nat) => {}
  | (dexp_var_f x) => {}
  | (dexp_abs e) => (fstv_in_dexp e)
  | (dexp_app e1 e2) => (fstv_in_dexp e1) \u (fstv_in_dexp e2)
  | (dexp_tabs dbody5) => (fstv_in_dbody dbody5)
  | (dexp_tapp e T) => (fstv_in_dexp e) \u (fstv_in_dtyp T)
  | (dexp_anno e T) => (fstv_in_dexp e) \u (fstv_in_dtyp T)
end
with fstv_in_dbody (dbody5:dbody) : vars :=
  match dbody5 with
  | (dbody_anno e T) => (fstv_in_dexp e) \u (fstv_in_dtyp T)
end.

Fixpoint fv_in_dexp (e_5:dexp) : vars :=
  match e_5 with
  | dexp_unit => {}
  | dexp_top => {}
  | (dexp_var_b nat) => {}
  | (dexp_var_f x) => {{x}}
  | (dexp_abs e) => (fv_in_dexp e)
  | (dexp_app e1 e2) => (fv_in_dexp e1) \u (fv_in_dexp e2)
  | (dexp_tabs dbody5) => (fv_in_dbody dbody5)
  | (dexp_tapp e T) => (fv_in_dexp e)
  | (dexp_anno e T) => (fv_in_dexp e)
end
with fv_in_dbody (dbody5:dbody) : vars :=
  match dbody5 with
  | (dbody_anno e T) => (fv_in_dexp e)
end.

Fixpoint ftv_in_dexp (e_5:dexp) : vars :=
  match e_5 with
  | dexp_unit => {}
  | dexp_top => {}
  | (dexp_var_b nat) => {}
  | (dexp_var_f x) => {}
  | (dexp_abs e) => (ftv_in_dexp e)
  | (dexp_app e1 e2) => (ftv_in_dexp e1) \u (ftv_in_dexp e2)
  | (dexp_tabs dbody5) => (ftv_in_dbody dbody5)
  | (dexp_tapp e T) => (ftv_in_dexp e) \u (ftv_in_dtyp T)
  | (dexp_anno e T) => (ftv_in_dexp e) \u (ftv_in_dtyp T)
end
with ftv_in_dbody (dbody5:dbody) : vars :=
  match dbody5 with
  | (dbody_anno e T) => (ftv_in_dexp e) \u (ftv_in_dtyp T)
end.

Fixpoint fstv_in_dcont (c_5:dcont) : vars :=
  match c_5 with
  | dcont_done => {}
  | (dcont_infapp e c) => (fstv_in_dexp e) \u (fstv_in_dcont c)
  | (dcont_infabs c1 c2) => (fstv_in_dcont c1) \u (fstv_in_dcont c2)
  | (dcont_tapp T c) => (fstv_in_dtyp T) \u (fstv_in_dcont c)
  | (dcont_sub T) => (fstv_in_dtyp T)
end.

Fixpoint fv_in_dcont (c_5:dcont) : vars :=
  match c_5 with
  | dcont_done => {}
  | (dcont_infapp e c) => (fv_in_dexp e) \u (fv_in_dcont c)
  | (dcont_infabs c1 c2) => (fv_in_dcont c1) \u (fv_in_dcont c2)
  | (dcont_tapp T c) => (fv_in_dcont c)
  | (dcont_sub T) => {}
end.

Fixpoint ftv_in_dcont (c_5:dcont) : vars :=
  match c_5 with
  | dcont_done => {}
  | (dcont_infapp e c) => (ftv_in_dexp e) \u (ftv_in_dcont c)
  | (dcont_infabs c1 c2) => (ftv_in_dcont c1) \u (ftv_in_dcont c2)
  | (dcont_tapp T c) => (ftv_in_dtyp T) \u (ftv_in_dcont c)
  | (dcont_sub T) => (ftv_in_dtyp T)
end.

Definition fstv_in_dwork (w5:dwork) : vars :=
  match w5 with
  | (dwork_infer e c) => (fstv_in_dexp e) \u (fstv_in_dcont c)
  | (dwork_check e T) => (fstv_in_dexp e) \u (fstv_in_dtyp T)
  | (dwork_infabs T c1 c2) => (fstv_in_dtyp T) \u (fstv_in_dcont c1) \u (fstv_in_dcont c2)
  | (dwork_inftapp T1 T2 c) => (fstv_in_dtyp T1) \u (fstv_in_dtyp T2) \u (fstv_in_dcont c)
  | (dwork_sub T1 T2) => (fstv_in_dtyp T1) \u (fstv_in_dtyp T2)
  | (dwork_apply c T) => (fstv_in_dcont c) \u (fstv_in_dtyp T)
end.

Definition fstv_in_binding (b5:binding) : vars :=
  match b5 with
  | dbind_tvar_empty => {}
  | dbind_stvar_empty => {}
  | (dbind_typ T) => (fstv_in_dtyp T)
end.

Definition fv_in_dwork (w5:dwork) : vars :=
  match w5 with
  | (dwork_infer e c) => (fv_in_dexp e) \u (fv_in_dcont c)
  | (dwork_check e T) => (fv_in_dexp e)
  | (dwork_infabs T c1 c2) => (fv_in_dcont c1) \u (fv_in_dcont c2)
  | (dwork_inftapp T1 T2 c) => (fv_in_dcont c)
  | (dwork_sub T1 T2) => {}
  | (dwork_apply c T) => (fv_in_dcont c)
end.

Definition ftv_in_binding (b5:binding) : vars :=
  match b5 with
  | dbind_tvar_empty => {}
  | dbind_stvar_empty => {}
  | (dbind_typ T) => (ftv_in_dtyp T)
end.

Definition ftv_in_dwork (w5:dwork) : vars :=
  match w5 with
  | (dwork_infer e c) => (ftv_in_dexp e) \u (ftv_in_dcont c)
  | (dwork_check e T) => (ftv_in_dexp e) \u (ftv_in_dtyp T)
  | (dwork_infabs T c1 c2) => (ftv_in_dtyp T) \u (ftv_in_dcont c1) \u (ftv_in_dcont c2)
  | (dwork_inftapp T1 T2 c) => (ftv_in_dtyp T1) \u (ftv_in_dtyp T2) \u (ftv_in_dcont c)
  | (dwork_sub T1 T2) => (ftv_in_dtyp T1) \u (ftv_in_dtyp T2)
  | (dwork_apply c T) => (ftv_in_dcont c) \u (ftv_in_dtyp T)
end.

Fixpoint fstv_in_dworklist (W5:dworklist) : vars :=
  match W5 with
  | dworklist_empty => {}
  | (dworklist_consvar W x b) => (fstv_in_dworklist W) \u (fstv_in_binding b)
  | (dworklist_constvar W X b) => (fstv_in_dworklist W) \u (fstv_in_binding b)
  | (dworklist_consstvar W SX b) => (fstv_in_dworklist W) \u (fstv_in_binding b)
  | (dworklist_conswork W w) => (fstv_in_dworklist W) \u (fstv_in_dwork w)
end.

Fixpoint fv_in_dworklist (W5:dworklist) : vars :=
  match W5 with
  | dworklist_empty => {}
  | (dworklist_consvar W x b) => (fv_in_dworklist W)
  | (dworklist_constvar W X b) => (fv_in_dworklist W)
  | (dworklist_consstvar W SX b) => (fv_in_dworklist W)
  | (dworklist_conswork W w) => (fv_in_dworklist W) \u (fv_in_dwork w)
end.

Fixpoint ftv_in_dworklist (W5:dworklist) : vars :=
  match W5 with
  | dworklist_empty => {}
  | (dworklist_consvar W x b) => (ftv_in_dworklist W) \u (ftv_in_binding b)
  | (dworklist_constvar W X b) => (ftv_in_dworklist W) \u (ftv_in_binding b)
  | (dworklist_consstvar W SX b) => (ftv_in_dworklist W) \u (ftv_in_binding b)
  | (dworklist_conswork W w) => (ftv_in_dworklist W) \u (ftv_in_dwork w)
end.

(** substitutions *)
Fixpoint d_subst_tv_in_dtyp (T_5:dtyp) (X5:typvar) (T__6:dtyp) {struct T__6} : dtyp :=
  match T__6 with
  | dtyp_unit => dtyp_unit 
  | dtyp_top => dtyp_top 
  | dtyp_bot => dtyp_bot 
  | (dtyp_var_b nat) => dtyp_var_b nat
  | (dtyp_var_f X) => (if eq_var X X5 then T_5 else (dtyp_var_f X))
  | (dtyp_svar SX) => dtyp_svar SX
  | (dtyp_arrow T1 T2) => dtyp_arrow (d_subst_tv_in_dtyp T_5 X5 T1) (d_subst_tv_in_dtyp T_5 X5 T2)
  | (dtyp_all T) => dtyp_all (d_subst_tv_in_dtyp T_5 X5 T)
  | (dtyp_union T1 T2) => dtyp_union (d_subst_tv_in_dtyp T_5 X5 T1) (d_subst_tv_in_dtyp T_5 X5 T2)
  | (dtyp_intersection T1 T2) => dtyp_intersection (d_subst_tv_in_dtyp T_5 X5 T1) (d_subst_tv_in_dtyp T_5 X5 T2)
end.

Fixpoint d_subst_stv_in_dtyp (T_5:dtyp) (SX5:stypvar) (T__6:dtyp) {struct T__6} : dtyp :=
  match T__6 with
  | dtyp_unit => dtyp_unit 
  | dtyp_top => dtyp_top 
  | dtyp_bot => dtyp_bot 
  | (dtyp_var_b nat) => dtyp_var_b nat
  | (dtyp_var_f X) => dtyp_var_f X
  | (dtyp_svar SX) => (if eq_var SX SX5 then T_5 else (dtyp_svar SX))
  | (dtyp_arrow T1 T2) => dtyp_arrow (d_subst_stv_in_dtyp T_5 SX5 T1) (d_subst_stv_in_dtyp T_5 SX5 T2)
  | (dtyp_all T) => dtyp_all (d_subst_stv_in_dtyp T_5 SX5 T)
  | (dtyp_union T1 T2) => dtyp_union (d_subst_stv_in_dtyp T_5 SX5 T1) (d_subst_stv_in_dtyp T_5 SX5 T2)
  | (dtyp_intersection T1 T2) => dtyp_intersection (d_subst_stv_in_dtyp T_5 SX5 T1) (d_subst_stv_in_dtyp T_5 SX5 T2)
end.

Fixpoint d_subst_tv_in_dexp (T_5:dtyp) (X5:typvar) (e_5:dexp) {struct e_5} : dexp :=
  match e_5 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => dexp_var_b nat
  | (dexp_var_f x) => dexp_var_f x
  | (dexp_abs e) => dexp_abs (d_subst_tv_in_dexp T_5 X5 e)
  | (dexp_app e1 e2) => dexp_app (d_subst_tv_in_dexp T_5 X5 e1) (d_subst_tv_in_dexp T_5 X5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (d_subst_tv_in_dbody T_5 X5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (d_subst_tv_in_dexp T_5 X5 e) (d_subst_tv_in_dtyp T_5 X5 T)
  | (dexp_anno e T) => dexp_anno (d_subst_tv_in_dexp T_5 X5 e) (d_subst_tv_in_dtyp T_5 X5 T)
end
with d_subst_tv_in_dbody (T5:dtyp) (X5:typvar) (dbody5:dbody) {struct dbody5} : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (d_subst_tv_in_dexp T5 X5 e) (d_subst_tv_in_dtyp T5 X5 T)
end.

Fixpoint d_subst_stv_in_dexp (T_5:dtyp) (SX5:stypvar) (e_5:dexp) {struct e_5} : dexp :=
  match e_5 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => dexp_var_b nat
  | (dexp_var_f x) => dexp_var_f x
  | (dexp_abs e) => dexp_abs (d_subst_stv_in_dexp T_5 SX5 e)
  | (dexp_app e1 e2) => dexp_app (d_subst_stv_in_dexp T_5 SX5 e1) (d_subst_stv_in_dexp T_5 SX5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (d_subst_stv_in_dbody T_5 SX5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (d_subst_stv_in_dexp T_5 SX5 e) (d_subst_stv_in_dtyp T_5 SX5 T)
  | (dexp_anno e T) => dexp_anno (d_subst_stv_in_dexp T_5 SX5 e) (d_subst_stv_in_dtyp T_5 SX5 T)
end
with d_subst_stv_in_dbody (T5:dtyp) (SX5:stypvar) (dbody5:dbody) {struct dbody5} : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (d_subst_stv_in_dexp T5 SX5 e) (d_subst_stv_in_dtyp T5 SX5 T)
end.

Fixpoint d_subst_v_in_dexp (e_5:dexp) (x5:expvar) (e__6:dexp) {struct e__6} : dexp :=
  match e__6 with
  | dexp_unit => dexp_unit 
  | dexp_top => dexp_top 
  | (dexp_var_b nat) => dexp_var_b nat
  | (dexp_var_f x) => (if eq_var x x5 then e_5 else (dexp_var_f x))
  | (dexp_abs e) => dexp_abs (d_subst_v_in_dexp e_5 x5 e)
  | (dexp_app e1 e2) => dexp_app (d_subst_v_in_dexp e_5 x5 e1) (d_subst_v_in_dexp e_5 x5 e2)
  | (dexp_tabs dbody5) => dexp_tabs (d_subst_v_in_dbody e_5 x5 dbody5)
  | (dexp_tapp e T) => dexp_tapp (d_subst_v_in_dexp e_5 x5 e) T
  | (dexp_anno e T) => dexp_anno (d_subst_v_in_dexp e_5 x5 e) T
end
with d_subst_v_in_dbody (e5:dexp) (x5:expvar) (dbody5:dbody) {struct dbody5} : dbody :=
  match dbody5 with
  | (dbody_anno e T) => dbody_anno (d_subst_v_in_dexp e5 x5 e) T
end.

Fixpoint d_subst_tv_in_dcont (T5:dtyp) (X5:typvar) (c_5:dcont) {struct c_5} : dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (d_subst_tv_in_dexp T5 X5 e) (d_subst_tv_in_dcont T5 X5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (d_subst_tv_in_dcont T5 X5 c1) (d_subst_tv_in_dcont T5 X5 c2)
  | (dcont_tapp T c) => dcont_tapp (d_subst_tv_in_dtyp T5 X5 T) (d_subst_tv_in_dcont T5 X5 c)
  | (dcont_sub T) => dcont_sub (d_subst_tv_in_dtyp T5 X5 T)
end.

Fixpoint d_subst_stv_in_dcont (T5:dtyp) (SX5:stypvar) (c_5:dcont) {struct c_5} : dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (d_subst_stv_in_dexp T5 SX5 e) (d_subst_stv_in_dcont T5 SX5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (d_subst_stv_in_dcont T5 SX5 c1) (d_subst_stv_in_dcont T5 SX5 c2)
  | (dcont_tapp T c) => dcont_tapp (d_subst_stv_in_dtyp T5 SX5 T) (d_subst_stv_in_dcont T5 SX5 c)
  | (dcont_sub T) => dcont_sub (d_subst_stv_in_dtyp T5 SX5 T)
end.

Fixpoint d_subst_v_in_dcont (e5:dexp) (x5:expvar) (c_5:dcont) {struct c_5} : dcont :=
  match c_5 with
  | dcont_done => dcont_done 
  | (dcont_infapp e c) => dcont_infapp (d_subst_v_in_dexp e5 x5 e) (d_subst_v_in_dcont e5 x5 c)
  | (dcont_infabs c1 c2) => dcont_infabs (d_subst_v_in_dcont e5 x5 c1) (d_subst_v_in_dcont e5 x5 c2)
  | (dcont_tapp T c) => dcont_tapp T (d_subst_v_in_dcont e5 x5 c)
  | (dcont_sub T) => dcont_sub T
end.

Definition d_subst_tv_in_binding (T5:dtyp) (X5:typvar) (b5:binding) : binding :=
  match b5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ T) => dbind_typ (d_subst_tv_in_dtyp T5 X5 T)
end.

Definition d_subst_tv_in_dwork (T_5:dtyp) (X5:typvar) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (d_subst_tv_in_dexp T_5 X5 e) (d_subst_tv_in_dcont T_5 X5 c)
  | (dwork_check e T) => dwork_check (d_subst_tv_in_dexp T_5 X5 e) (d_subst_tv_in_dtyp T_5 X5 T)
  | (dwork_infabs T c1 c2) => dwork_infabs (d_subst_tv_in_dtyp T_5 X5 T) (d_subst_tv_in_dcont T_5 X5 c1) (d_subst_tv_in_dcont T_5 X5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp (d_subst_tv_in_dtyp T_5 X5 T1) (d_subst_tv_in_dtyp T_5 X5 T2) (d_subst_tv_in_dcont T_5 X5 c)
  | (dwork_sub T1 T2) => dwork_sub (d_subst_tv_in_dtyp T_5 X5 T1) (d_subst_tv_in_dtyp T_5 X5 T2)
  | (dwork_apply c T) => dwork_apply (d_subst_tv_in_dcont T_5 X5 c) (d_subst_tv_in_dtyp T_5 X5 T)
end.

Definition d_subst_stv_in_dwork (T_5:dtyp) (SX5:stypvar) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (d_subst_stv_in_dexp T_5 SX5 e) (d_subst_stv_in_dcont T_5 SX5 c)
  | (dwork_check e T) => dwork_check (d_subst_stv_in_dexp T_5 SX5 e) (d_subst_stv_in_dtyp T_5 SX5 T)
  | (dwork_infabs T c1 c2) => dwork_infabs (d_subst_stv_in_dtyp T_5 SX5 T) (d_subst_stv_in_dcont T_5 SX5 c1) (d_subst_stv_in_dcont T_5 SX5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp (d_subst_stv_in_dtyp T_5 SX5 T1) (d_subst_stv_in_dtyp T_5 SX5 T2) (d_subst_stv_in_dcont T_5 SX5 c)
  | (dwork_sub T1 T2) => dwork_sub (d_subst_stv_in_dtyp T_5 SX5 T1) (d_subst_stv_in_dtyp T_5 SX5 T2)
  | (dwork_apply c T) => dwork_apply (d_subst_stv_in_dcont T_5 SX5 c) (d_subst_stv_in_dtyp T_5 SX5 T)
end.

Definition d_subst_stv_in_binding (T5:dtyp) (SX5:stypvar) (b5:binding) : binding :=
  match b5 with
  | dbind_tvar_empty => dbind_tvar_empty 
  | dbind_stvar_empty => dbind_stvar_empty 
  | (dbind_typ T) => dbind_typ (d_subst_stv_in_dtyp T5 SX5 T)
end.

Definition d_subst_v_in_dwork (e5:dexp) (x5:expvar) (w5:dwork) : dwork :=
  match w5 with
  | (dwork_infer e c) => dwork_infer (d_subst_v_in_dexp e5 x5 e) (d_subst_v_in_dcont e5 x5 c)
  | (dwork_check e T) => dwork_check (d_subst_v_in_dexp e5 x5 e) T
  | (dwork_infabs T c1 c2) => dwork_infabs T (d_subst_v_in_dcont e5 x5 c1) (d_subst_v_in_dcont e5 x5 c2)
  | (dwork_inftapp T1 T2 c) => dwork_inftapp T1 T2 (d_subst_v_in_dcont e5 x5 c)
  | (dwork_sub T1 T2) => dwork_sub T1 T2
  | (dwork_apply c T) => dwork_apply (d_subst_v_in_dcont e5 x5 c) T
end.

Fixpoint d_subst_tv_in_dworklist (T5:dtyp) (X5:typvar) (W5:dworklist) {struct W5} : dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (d_subst_tv_in_dworklist T5 X5 W) x (d_subst_tv_in_binding T5 X5 b)
  | (dworklist_constvar W X b) => dworklist_constvar (d_subst_tv_in_dworklist T5 X5 W) X (d_subst_tv_in_binding T5 X5 b)
  | (dworklist_consstvar W SX b) => dworklist_consstvar (d_subst_tv_in_dworklist T5 X5 W) SX (d_subst_tv_in_binding T5 X5 b)
  | (dworklist_conswork W w) => dworklist_conswork (d_subst_tv_in_dworklist T5 X5 W) (d_subst_tv_in_dwork T5 X5 w)
end.

Fixpoint d_subst_stv_in_dworklist (T5:dtyp) (SX5:stypvar) (W5:dworklist) {struct W5} : dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (d_subst_stv_in_dworklist T5 SX5 W) x (d_subst_stv_in_binding T5 SX5 b)
  | (dworklist_constvar W X b) => dworklist_constvar (d_subst_stv_in_dworklist T5 SX5 W) X (d_subst_stv_in_binding T5 SX5 b)
  | (dworklist_consstvar W SX b) => dworklist_consstvar (d_subst_stv_in_dworklist T5 SX5 W) SX (d_subst_stv_in_binding T5 SX5 b)
  | (dworklist_conswork W w) => dworklist_conswork (d_subst_stv_in_dworklist T5 SX5 W) (d_subst_stv_in_dwork T5 SX5 w)
end.

Fixpoint d_subst_v_in_dworklist (e5:dexp) (x5:expvar) (W5:dworklist) {struct W5} : dworklist :=
  match W5 with
  | dworklist_empty => dworklist_empty 
  | (dworklist_consvar W x b) => dworklist_consvar (d_subst_v_in_dworklist e5 x5 W) x b
  | (dworklist_constvar W X b) => dworklist_constvar (d_subst_v_in_dworklist e5 x5 W) X b
  | (dworklist_consstvar W SX b) => dworklist_consstvar (d_subst_v_in_dworklist e5 x5 W) SX b
  | (dworklist_conswork W w) => dworklist_conswork (d_subst_v_in_dworklist e5 x5 W) (d_subst_v_in_dwork e5 x5 w)
end.



Fixpoint dwl_to_denv (Γ : dworklist) : denv :=
  match Γ with 
  | dworklist_empty => nil
  | dworklist_conswork Γ1' _ => dwl_to_denv Γ1'
  | dworklist_constvar Γ1' X b => X ~ b ++ dwl_to_denv Γ1'
  | dworklist_consstvar Γ1' SX b => SX ~ b ++ dwl_to_denv Γ1'
  | dworklist_consvar Γ1' x b => x ~ b ++ dwl_to_denv Γ1'
  end.




(** definitions *)

(* defns Jdstrong_in *)
Inductive ds_in : typvar -> dtyp -> Prop :=    (* defn ds_in *)
 | dsin_var : forall (X:typvar),
     ds_in X (dtyp_var_f X)
 | dsin_arrow1 : forall (X:typvar) (T1 T2:dtyp),
     lc_dtyp T2 ->
     ds_in X T1 ->
     ds_in X (dtyp_arrow T1 T2)
 | dsin_arrow2 : forall (X:typvar) (T1 T2:dtyp),
     lc_dtyp T1 ->
     ds_in X T2 ->
     ds_in X (dtyp_arrow T1 T2)
 | dsin_all : forall (L:vars) (X:typvar) (T:dtyp),
      ( forall Y , Y \notin  L  -> ds_in X  ( open_dtyp_wrt_dtyp T (dtyp_var_f Y) )  )  ->
     ds_in X (dtyp_all T)
 | dsin_union : forall (X:typvar) (T1 T2:dtyp),
     ds_in X T1 ->
     ds_in X T2 ->
     ds_in X (dtyp_union T1 T2)
 | dsin_intersection : forall (X:typvar) (T1 T2:dtyp),
     ds_in X T1 ->
     ds_in X T2 ->
     ds_in X (dtyp_intersection T1 T2).

(* defns Jd_is_value *)
Inductive d_isval : dexp -> Prop :=    (* defn d_isval *)
 | d_isval_unit : 
     d_isval dexp_unit
 | d_isval_top : 
     d_isval dexp_top
 | d_isval_abs : forall (e:dexp),
     lc_dexp (dexp_abs e) ->
     d_isval  ( (dexp_abs e) ) 
 | d_isval_tabs : forall (e:dexp) (T:dtyp),
     lc_dexp (dexp_tabs (dbody_anno e T)) ->
     d_isval  ( (dexp_tabs (dbody_anno e T)) ) 
 | d_isval_annoabs : forall (e:dexp) (T:dtyp),
     lc_dexp (dexp_abs e) ->
     lc_dtyp T ->
     d_isval (dexp_anno  ( (dexp_abs e) )  T).

(* defns Jdstrong_in_sty *)
Inductive ds_in_s : stypvar -> dtyp -> Prop :=    (* defn ds_in_s *)
 | dsins_var : forall (SX:stypvar),
     ds_in_s SX (dtyp_svar SX)
 | dsins_arrow1 : forall (SX:stypvar) (T1 T2:dtyp),
     lc_dtyp T2 ->
     ds_in_s SX T1 ->
     ds_in_s SX (dtyp_arrow T1 T2)
 | dsins_arrow2 : forall (SX:stypvar) (T1 T2:dtyp),
     lc_dtyp T1 ->
     ds_in_s SX T2 ->
     ds_in_s SX (dtyp_arrow T1 T2)
 | dsins_all : forall (L:vars) (SX:stypvar) (T:dtyp),
      ( forall Y , Y \notin  L  -> ds_in_s SX  ( open_dtyp_wrt_dtyp T (dtyp_var_f Y) )  )  ->
     ds_in_s SX (dtyp_all T)
 | dsins_union : forall (SX:stypvar) (T1 T2:dtyp),
     ds_in_s SX T1 ->
     ds_in_s SX T2 ->
     ds_in_s SX (dtyp_union T1 T2)
 | dsins_intersection : forall (SX:stypvar) (T1 T2:dtyp),
     ds_in_s SX T1 ->
     ds_in_s SX T2 ->
     ds_in_s SX (dtyp_intersection T1 T2).

(* defns Jd_neq_abs *)
Inductive d_neq_abs : dexp -> Prop :=    (* defn d_neq_abs *)
 | d_neqabs_unit : 
     d_neq_abs dexp_unit
 | d_neqabs_top : 
     d_neq_abs dexp_top
 | d_neqabs_var : forall (x:expvar),
     d_neq_abs (dexp_var_f x)
 | d_neqabs_app : forall (e1 e2:dexp),
     lc_dexp e1 ->
     lc_dexp e2 ->
     d_neq_abs (dexp_app e1 e2)
 | d_neqabs_tabs : forall (e:dexp) (T:dtyp),
     lc_dexp (dexp_tabs (dbody_anno e T)) ->
     d_neq_abs (dexp_tabs (dbody_anno e T))
 | d_neqabs_tapp : forall (e:dexp) (T:dtyp),
     lc_dexp e ->
     lc_dtyp T ->
     d_neq_abs (dexp_tapp e T)
 | d_neqabs_anno : forall (e:dexp) (T:dtyp),
     lc_dexp e ->
     lc_dtyp T ->
     d_neq_abs (dexp_anno e T).

(* defns Jdneq_all *)
Inductive dneq_all : dtyp -> Prop :=    (* defn dneq_all *)
 | dneqall_unit : 
     dneq_all dtyp_unit
 | dneqall_top : 
     dneq_all dtyp_top
 | dneqall_bot : 
     dneq_all dtyp_bot
 | dneqall_var : forall (X:typvar),
     dneq_all (dtyp_var_f X)
 | dneqall_svar : forall (SX:stypvar),
     dneq_all (dtyp_svar SX)
 | dneqall_arrow : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_all (dtyp_arrow T1 T2)
 | dneqall_union : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_all (dtyp_union T1 T2)
 | dneqall_intersection : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_all (dtyp_intersection T1 T2).

(* defns Jdneq_intersection *)
Inductive dneq_intersection : dtyp -> Prop :=    (* defn dneq_intersection *)
 | dneqintersection_unit : 
     dneq_intersection dtyp_unit
 | dneqintersection_top : 
     dneq_intersection dtyp_top
 | dneqintersection_bot : 
     dneq_intersection dtyp_bot
 | dneqintersection_var : forall (X:typvar),
     dneq_intersection (dtyp_var_f X)
 | dneqintersection_svar : forall (SX:stypvar),
     dneq_intersection (dtyp_svar SX)
 | dneqintersection_arrow : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_intersection (dtyp_arrow T1 T2)
 | dneqintersection_all : forall (T:dtyp),
     lc_dtyp (dtyp_all T) ->
     dneq_intersection (dtyp_all T)
 | dneqintersection_union : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_intersection (dtyp_union T1 T2).

(* defns Jdneq_union *)
Inductive dneq_union : dtyp -> Prop :=    (* defn dneq_union *)
 | dnequnion_unit : 
     dneq_union dtyp_unit
 | dnequnion_top : 
     dneq_union dtyp_top
 | dnequnion_bot : 
     dneq_union dtyp_bot
 | dnequnion_var : forall (X:typvar),
     dneq_union (dtyp_var_f X)
 | dnequnion_svar : forall (SX:stypvar),
     dneq_union (dtyp_svar SX)
 | dnequnion_arrow : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_union (dtyp_arrow T1 T2)
 | dnequnion_all : forall (T:dtyp),
     lc_dtyp (dtyp_all T) ->
     dneq_union (dtyp_all T)
 | dnequnion_intersection : forall (T1 T2:dtyp),
     lc_dtyp T1 ->
     lc_dtyp T2 ->
     dneq_union (dtyp_intersection T1 T2).

(* defns Jdwf_env_dom *)
Inductive dwf_env_dom : denv -> Prop :=    (* defn dwf_env_dom *)
 | dwfenvdom_empty : 
     dwf_env_dom  nil 
 | dwfenvdom_tvar : forall (E:denv) (X:typvar),
     dwf_env_dom E ->
      ( X   `notin` dom ( E ))  ->
     dwf_env_dom  ( X ~ dbind_tvar_empty  ++  E ) 
 | dwfenvdom_stvar : forall (E:denv) (SX:stypvar),
     dwf_env_dom E ->
      ( SX  `notin` dom ( E ))  ->
     dwf_env_dom  ( SX ~ dbind_stvar_empty  ++  E ) 
 | dwfenvdom_typ : forall (E:denv) (x:expvar) (T:dtyp),
     lc_dtyp T ->
     dwf_env_dom E ->
      ( x   `notin` dom ( E ))  ->
     dwf_env_dom  ( x ~ (dbind_typ T)  ++  E ) .

(* defns Jdwf_typ *)
Inductive dwf_typ : denv -> dtyp -> Prop :=    (* defn dwf_typ *)
 | dwftyp_unit : forall (E:denv),
     dwf_typ E dtyp_unit
 | dwftyp_bot : forall (E:denv),
     dwf_typ E dtyp_bot
 | dwftyp_top : forall (E:denv),
     dwf_typ E dtyp_top
 | dwftyp_var : forall (E:denv) (X:typvar),
      binds ( X )  ( dbind_tvar_empty ) ( E )  ->
     dwf_typ E (dtyp_var_f X)
 | dwftyp_stvar : forall (E:denv) (SX:stypvar),
      binds ( SX ) ( dbind_stvar_empty ) ( E )  ->
     dwf_typ E (dtyp_svar SX)
 | dwftyp_arrow : forall (E:denv) (T1 T2:dtyp),
     dwf_typ E T1 ->
     dwf_typ E T2 ->
     dwf_typ E (dtyp_arrow T1 T2)
 | dwftyp_all : forall (L:vars) (E:denv) (T:dtyp),
      ( forall X , X \notin  L  -> ds_in X  ( open_dtyp_wrt_dtyp T (dtyp_var_f X) )  )  ->
      ( forall X , X \notin  L  -> dwf_typ  ( X ~ dbind_tvar_empty  ++  E )   ( open_dtyp_wrt_dtyp T (dtyp_var_f X) )  )  ->
     dwf_typ E (dtyp_all T)
 | dwftyp_union : forall (E:denv) (T1 T2:dtyp),
     dwf_typ E T1 ->
     dwf_typ E T2 ->
     dwf_typ E (dtyp_union T1 T2)
 | dwftyp_intersection : forall (E:denv) (T1 T2:dtyp),
     dwf_typ E T1 ->
     dwf_typ E T2 ->
     dwf_typ E (dtyp_intersection T1 T2).

(* defns Jdwf_env *)
Inductive dwf_env : denv -> Prop :=    (* defn dwf_env *)
 | dwfenv_empty : 
     dwf_env  nil 
 | dwfenv_tvar : forall (E:denv) (X:typvar),
     dwf_env E ->
      ( X   `notin` dom ( E ))  ->
     dwf_env  ( X ~ dbind_tvar_empty  ++  E ) 
 | dwfenv_stvar : forall (E:denv) (SX:stypvar),
     dwf_env E ->
      ( SX  `notin` dom ( E ))  ->
     dwf_env  ( SX ~ dbind_stvar_empty  ++  E ) 
 | dwfenv_typ : forall (E:denv) (x:expvar) (T:dtyp),
     dwf_env E ->
     dwf_typ E T ->
      ( x   `notin` dom ( E ))  ->
     dwf_env  ( x ~ (dbind_typ T)  ++  E ) .

(* defns Jdmono_typ *)
Inductive dmono_typ : dtyp -> Prop :=    (* defn dmono_typ *)
 | dmonotyp_unit : 
     dmono_typ dtyp_unit
 | dmonotyp_tvar : forall (X:typvar),
     dmono_typ (dtyp_var_f X)
 | dmonotyp_arrow : forall (T1 T2:dtyp),
     dmono_typ T1 ->
     dmono_typ T2 ->
     dmono_typ (dtyp_arrow T1 T2)
 | dmonotyp_intersection : forall (T1 T2:dtyp),
     dmono_typ T1 ->
     dmono_typ T2 ->
     dmono_typ (dtyp_intersection T1 T2)
 | dmonotyp_union : forall (T1 T2:dtyp),
     dmono_typ T1 ->
     dmono_typ T2 ->
     dmono_typ (dtyp_union T1 T2).


(** infrastructure *)
#[export] Hint Constructors ds_in d_isval ds_in_s d_neq_abs dneq_all dneq_intersection dneq_union dwf_env_dom dwf_typ dwf_env dmono_typ lc_dtyp lc_dexp lc_dbody lc_dcont lc_binding lc_dwork lc_dworklist : core.


