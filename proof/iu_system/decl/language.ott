metavar typvar, X, Y, Z     ::= {{ repr-locally-nameless }}
metavar stypvar, SX, SY, SZ ::= {{ coq var }}
metavar expvar, x, y, z     ::= {{ repr-locally-nameless }}

grammar

dtyp, T, S, U :: dtyp_ ::=
  | UNIT           ::   :: unit
  | TOP            ::   :: top
  | BOT            ::   :: bot
  | X              ::   :: var
  | SX             ::   :: svar
  | T1 -> T2       ::   :: arrow
  | ∀ X . T        ::   :: all  (+ bind X in T +)
  | T1 + T2        ::   :: union
  | T1 * T2        ::   :: intersection
  | ( T )          :: S :: paren {{ coq ([[T]]) }}
  | { T2 / X } T1  :: M :: subst {{ coq (open_dtyp_wrt_dtyp [[X T1]] [[T2]]) }}

dbody :: dbody_ ::= 
  | e : T ::  :: anno

dexp, e, f, g :: dexp_ ::=
  | unit                                ::   :: unit 
  | top                                 ::   :: top
  | x                                   ::   :: var
  | \ x . e                             ::   :: abs  (+ bind x in e +)
  | e1 e2                               ::   :: app
  | \ X . dbody                         ::   :: tabs (+ bind X in dbody +) 
  | e @ T                               ::   :: tapp
  | e : T                               ::   :: anno
  | ( e )                               :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1                       :: M :: subst1 {{ coq (open_dexp_wrt_dexp [[x e1]] [[e2]]) }}
  | { T2 / X } e1                       :: M :: subst2 {{ coq (open_dexp_wrt_dtyp [[X e1]] [[T2]]) }}

binding, b :: dbind_ ::=
  | : ▪  ::   :: tvar_empty
  | : ~▪ ::   :: stvar_empty
  | : T  ::   :: typ

substitutions
  single T X  :: dsubst_tv_in
  single T SX :: dsubst_stv_in
  single e x  :: dsubst_v_in

freevars
  T X  :: ftv_in
  T SX :: fstv_in
  e x  :: fv_in

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

denv, E, F, G:: '' ::= {{ coq list (atom*binding) }}
  | empty    ::   :: empty {{ coq nil }}
  | E , x b  ::   :: cons1 {{ coq ([[x]]~[[b]] ++ [[E]])  }}
  | E , X b  ::   :: cons2 {{ coq ([[X]]~[[b]] ++ [[E]])  }}
  | E , SX b ::   :: cons3 {{ coq ([[SX]]~[[b]] ++ [[E]]) }}
  | ⌊ W ⌋    :: M :: dwlenv {{ coq ( dwl_to_denv [[W]] )}}

dvalue, v :: dvalue_ ::=
  | unit             ::   :: unit
  | \ x . e          ::   :: abs  (+ bind x in e +)
  | \ X . dbody      ::   :: tabs (+ bind X in dbody +)
  | top              ::   :: top
  | v : T            ::   :: anno

dcont, c :: 'dcont_' ::=
  | Done                :: :: done
  | _ • e =>=> c        :: :: app
  | _ ∘ T =>=> c        :: :: tapp
  | _ <: T              :: :: sub

dwork, w :: 'dwork_' ::=
  | e => c              ::   :: infer
  | e <= T              ::   :: check
  | T • e =>=> c        ::   :: infapp
  | T1 ∘ T2 =>=> c      ::   :: inftapp
  | T1 <: T2            ::   :: sub
  | c $ T               ::   :: apply

dworklist, W :: 'dworklist_' ::=
  | empty      ::   :: empty
  | W , x b    ::   :: consvar 
  | W , X b    ::   :: constvar 
  | W , SX b   ::   :: consstvar
  | W , w      ::   :: conswork

formula :: formula_ ::=
  | judgement        ::   :: judgement
  | ( x b )  in E    ::   :: binds1 {{ coq binds ([[x]])  ([[b]]) ([[E]]) }}
  | ( X b )  in E    ::   :: binds2 {{ coq binds ([[X]])  ([[b]]) ([[E]]) }}
  | ( SX b ) in E    ::   :: binds3 {{ coq binds ([[SX]]) ([[b]]) ([[E]]) }}
  | uniq E           ::   :: uniq   {{ coq uniq ([[E]]) }}
  | x  `notin` dom E ::   :: fresh1 {{ coq ([[x]]  `notin` dom ([[E]])) }}
  | X  `notin` dom E ::   :: fresh2 {{ coq ([[X]]  `notin` dom ([[E]])) }}
  | SX `notin` dom E ::   :: fresh3 {{ coq ([[SX]] `notin` dom ([[E]])) }}
  | X in T           ::   :: appear1 {{ coq [[X]] `in` ftv_in_dtyp [[T]]}}
  | SX in T          ::   :: appear2 {{ coq [[SX]] `in` fstv_in_dtyp [[T]]}}
  | T ¬= TOP         ::   :: neqtop  {{ coq ~ ([[T]] = dtyp_top)}}
 
subrules
  v <:: e

embed {{ coq 

Fixpoint dwl_to_denv (Γ : dworklist) : denv :=
  match Γ with 
  | dworklist_empty => nil
  | dworklist_conswork Γ1' _ => dwl_to_denv Γ1'
  | dworklist_constvar Γ1' X b => X ~ b ++ dwl_to_denv Γ1'
  | dworklist_consstvar Γ1' SX b => SX ~ b ++ dwl_to_denv Γ1'
  | dworklist_consvar Γ1' x b => x ~ b ++ dwl_to_denv Γ1'
  end.


}}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdstrong_in :: '' ::=

defn
X ∈ₛ T :: :: ds_in :: 'dsin_' by

------------------------ :: var
X ∈ₛ X 

X ∈ₛ T1
------------------------ :: arrow1
X ∈ₛ T1 -> T2 

X ∈ₛ T2
------------------------ :: arrow2
X ∈ₛ T1 -> T2 

X ∈ₛ T
------------------------ :: all
X ∈ₛ ∀ Y . T

X ∈ₛ T1
X ∈ₛ T2
------------------------ :: union
X ∈ₛ T1 + T2

X ∈ₛ T1
X ∈ₛ T2
------------------------ :: intersection
X ∈ₛ T1 * T2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdstrong_in_sty :: '' ::=

defn
SX ∈ₛ T :: :: ds_in_s :: 'dsins_' by

------------------------ :: var
SX ∈ₛ SX

SX ∈ₛ T1
------------------------ :: arrow1
SX ∈ₛ T1 -> T2 

SX ∈ₛ T2
------------------------ :: arrow2
SX ∈ₛ T1 -> T2 

SX ∈ₛ T
------------------------ :: all
SX ∈ₛ ∀ Y . T

SX ∈ₛ T1
SX ∈ₛ T2
------------------------ :: union
SX ∈ₛ T1 + T2

SX ∈ₛ T1
SX ∈ₛ T2
------------------------ :: intersection
SX ∈ₛ T1 * T2


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
defns
Jdneq_abs :: '' ::= 

defn 
e ¬= λ :: :: dneq_abs :: 'dneqabs_' by 

---------------------- :: unit
unit ¬= λ

---------------------- :: top
top ¬= λ

---------------------- :: var
x ¬= λ

---------------------- :: app
e1 e2  ¬= λ

---------------------- :: tabs
\ X . e : T ¬= λ

---------------------- :: tapp
e @ T ¬= λ

---------------------- :: anno
e : T ¬= λ

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdneq_all :: '' ::=

defn
T ¬= ∀ :: :: dneq_all :: 'dneqall_' by

------------------------ :: unit
UNIT ¬= ∀

------------------------ :: top
TOP ¬= ∀

------------------------ :: bot
BOT ¬= ∀

------------------------ :: var
X ¬= ∀

------------------------ :: svar
SX ¬= ∀

------------------------ :: arrow
T1 -> T2 ¬= ∀

------------------------ :: union
T1 + T2 ¬= ∀

------------------------ :: intersection
T1 * T2 ¬= ∀


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdneq_intersection :: '' ::=

defn
T ¬= * :: :: dneq_intersection :: 'dneqintersection_' by

------------------------ :: unit
UNIT ¬= *

------------------------ :: top
TOP ¬= * 

------------------------ :: bot
BOT ¬= *

------------------------ :: var
X ¬= *

------------------------ :: svar
SX ¬= *

------------------------ :: arrow
T1 -> T2 ¬= *

------------------------ :: all
∀ X . T ¬= *

------------------------ :: union
T1 + T2 ¬= *

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdneq_union :: '' ::=

defn
T ¬= + :: :: dneq_union :: 'dnequnion_' by

------------------------ :: unit
UNIT ¬= +

------------------------ :: top
TOP ¬= +

------------------------ :: bot
BOT ¬= +

------------------------ :: var
X ¬= +

------------------------ :: svar
SX ¬= +

------------------------ :: arrow
T1 -> T2 ¬= +

------------------------ :: all
∀ X . T ¬= +

------------------------ :: intersection
T1 * T2 ¬= +

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdwf_env_dom :: '' ::=

defn
|-dom  E :: :: dwf_env_dom :: 'dwfenvdom_' by

--------- :: empty
|-dom empty

|-dom E
X `notin` dom E
---------------- :: tvar
|-dom E , X : ▪

|-dom E
SX `notin` dom E 
---------------- :: stvar
|-dom E , SX : ~▪

|-dom E
x `notin` dom E
---------------- :: typ
|-dom E , x : T

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdwf_typ :: '' ::=

defn
E |- T :: :: dwf_typ :: 'dwftyp_' by

--------- :: unit
E |- UNIT 

--------- :: bot
E |- BOT 

--------- :: top
E |- TOP

(X : ▪) in E
-------------- :: var
E |- X

(SX : ~▪) in E 
-------------- :: stvar 
E |- SX

E |- T1
E |- T2
-------------- :: arrow
E |- T1 -> T2

X ∈ₛ T
E, X : ▪ |- T
-------------------- :: all
E |- ∀ X . T

E |- T1
E |- T2
------------- :: union
E |- T1 + T2

E |- T1
E |- T2 
------------- :: intersection
E |- T1 * T2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdwf_env :: '' ::=

defn
|- E :: :: dwf_env :: 'dwfenv_' by

--------- :: empty
|- empty

|- E
X `notin` dom E
---------------- :: tvar
|- E , X : ▪

|- E
SX `notin` dom E 
---------------- :: stvar
|- E , SX : ~▪

|- E
E |- T
x `notin` dom E
---------------- :: typ
|- E , x : T


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns 
Jdmono_typ :: '' ::= 

defn 
mono T :: :: dmono_typ :: 'dmonotyp_' by 

--------------- :: unit
mono UNIT

--------------- :: tvar
mono X

mono T1
mono T2
--------------- :: arrow
mono T1 -> T2

mono T1 
mono T2 
--------------- :: intersection
mono T1 * T2

mono T1 
mono T2 
--------------- :: union
mono T1 + T2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdsub_stable :: '' ::=

defn
E |- T1 <:ₛ T2 :: :: dsub_stable :: 'dsubstable_' by

E |- S
-------------- :: top
E |- S <:ₛ TOP

E |- T
------------------- :: bot
E |- BOT <:ₛ T

------------------- :: unit
E |- UNIT <:ₛ UNIT

E |- T1 <:ₛ S1
E |- S2 <:ₛ T2
-------------------------- :: arrow
E |- S1 -> S2 <:ₛ T1 -> T2

E |- U
E |- { U / X } S <:ₛ { U / X } T
-------------------------------------------- :: all
E |- ∀ X. S <:ₛ ∀ X. T

T ¬= ∀ 
T ¬= *
T ¬= +
E |- U
mono U
E |- { U / X } S <:ₛ T
---------------------------- :: alll
E |- ∀ X . S <:ₛ T

E |- S <:ₛ T1
E |- S <:ₛ T2
------------------------ :: intersection1
E |- S <:ₛ T1 * T2

E |- S1 <:ₛ T
E |- S2
------------------------ :: intersection2
E |- S1 * S2 <:ₛ T

E |- S2 <:ₛ T
E |- S1
------------------------ :: intersection3
E |- S1 * S2 <:ₛ T

E |- S <:ₛ T1
E |- T2
------------------------ :: union1
E |- S <:ₛ T1 + T2

E |- S <:ₛ T2
E |- T1
------------------------ :: union2
E |- S <:ₛ T1 + T2

E |- S1 <:ₛ T
E |- S2 <:ₛ T
------------------------ :: union3
E |- S1 + S2 <:ₛ T


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% defns
% Jneq_abs :: '' ::=

% defn
% e ¬= λ :: :: neq_abs :: 'neq_abs_' by

% ------------ :: var
% x ¬= λ

% ---------------  :: app
% ( e1 e2 ) ¬= λ

% ------------------ :: tabs
% \ X . e : T ¬= λ

% --------------  :: tapp
% e @ T ¬= λ

% --------------- :: anno
% e : T ¬= λ


% defns
% Jneq_tabs :: '' ::=

% defn
% e ¬= Λ :: :: neq_tabs :: 'neq_tabs_' by

% ------------ :: var
% x ¬= Λ

% -----------------  :: app
% ( e1 e2 ) ¬= Λ

% ------------------ :: abs
% \ x . e ¬= Λ

% --------------  :: tapp
% e @ T ¬= Λ

% --------------- :: anno
% e : T ¬= Λ
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
Jdexp_red :: '' ::=

defn
e1 --> e2 :: :: dexp_red :: 'dexpred_' by

e1 --> e1'
----------------- :: app1
e1 e2 --> e1' e2

e2 --> e2'
----------------- :: app2
v1 e2 --> v1 e2'

e1 --> e1'
----------------------- :: tapp
e1 @ T  --> e1' @ T 

------------------------------- :: abs
(\ x . e) v  --> {v / x} e

------------------------------------------------ :: tabs
(\ X . e : T1 ) @ T2 --> {T2 / X} (e : T1) 

e --> e' 
-------------------- :: anno
e : T --> e' : T   

------------------------------ :: tabsbot
(v : BOT) @ T --> (v : BOT)

% ------------------------------------------------ :: tabs
% (\ X . e : T1 ) : T2 --> (\ X . e : T1 )

% v ¬= λ 
% -------------------- :: app_top
% v e --> top

% v ¬= Λ 
% -------------------- :: app_top
% v @ T --> top


defns
Jdworklist_reduction :: '' ::=

defn
|= W :: :: dwl_red :: 'dwlred_' by

|= W
⌊ W ⌋ |- S
------------------ :: subtop
|= W , S <: TOP

|= W
⌊ W ⌋ |- T
------------------- :: subbot
|= W , BOT <: T

|= W
------------------- :: subunit
|= W , UNIT <: UNIT

|= W
⌊ W ⌋ |- X
------------ :: subtvar
|= W , X <: X

|= W 
⌊ W ⌋ |- SX 
--------------- :: substvar
|= W , SX <: SX 

|= W , T1 <: S1 , S2 <: T2
-------------------------- :: subarrow
|= W , S1 -> S2 <: T1 -> T2

|= W , SX : ~▪ , { SX / X } S <: { SX / X } T
-------------------------------------------- :: suball
|= W , ∀ X . S <: ∀ X . T

T1 ¬= +
T1 ¬= *
T1 ¬= ∀
mono T2
⌊ W ⌋ |- T2
|= W , {T2 / X} S1 <: T1
--------------------------------------- :: suballl
|= W , ∀ X . S1 <: T1

|= W , S1 <: T1, S1 <: T2
------------------------ :: subintersection1
|= W , S1 <: T1 * T2

⌊ W ⌋ |- S2
|= W , S1 <: T
------------------------ :: subintersection2
|= W , S1 * S2 <: T

⌊ W ⌋|- S1
|= W , S2 <: T
------------------------ :: subintersection3
|= W , S1 * S2 <: T

⌊ W ⌋ |- T2
|= W , S1 <: T1
------------------------ :: subunion1
|= W , S1 <: T1 + T2

⌊ W ⌋ |- T1
|= W , S1 <: T2
------------------------ :: subunion2
|= W , S1 <: T1 + T2

|= W , S1 <: T1 , S2 <: T1
---------------------------- :: subunion3
|= W , S1 + S2 <: T1

e ¬= λ
T1 ¬= TOP
T1 ¬= ∀
|= W , e => _ <: T1
------------------------ :: chksub
|= W , e <= T1

⌊ W ⌋ |- ∀ X . T1 
|= W , X : ▪ , e <= T1 
------------------------- :: chkall
|= W , e <= ∀ X . T1    

|= W , x : S1 , e <= T1
--------------------------- :: chkabsarrow
|= W , \ x . e <= S1 -> T1    

|= W , x : BOT , e <= TOP 
---------------------------  :: chkabstop
|= W , \ x . e <= TOP

|= W , e <= T1 , e <= T2
---------------------------  :: chkintersection
|= W , e <= T1 * T2 

⌊ W ⌋ |- T2 
|= W , e <= T1 
---------------------------  :: chkunion1
|= W , e <= T1 + T2 

⌊ W ⌋ |- T1
|= W , e <= T2
---------------------------  :: chkunion2
|= W , e <= T1 + T2 

(x : T) in ⌊ W ⌋ 
|= W , c $ T
-------------------------- :: infvar
|= W , x => c

|= W , c $ T , e <= T
-------------------------- :: infanno
|= W , (e : T) => c

⌊ W ⌋ |- ∀ X . T
|= W , c $ (∀ X . T) , X : ▪ , e <= T
------------------------------------- :: inftabs
|= W , \ X . e : T => c

|= W , c $ UNIT
------------------------------------- :: infunit
|= W , unit => c

|= W , e1 => _ • e2 =>=> c 
------------------------------------- :: infapp
|= W , (e1 e2) => c

⌊ W ⌋ |- T
|= W , e => _ ∘ T =>=> c
------------------------------------- :: inftapp
|= W , e @ T => c

⌊ W ⌋ |- ∀ X . T1
|= W , c $ {T2 / X} T1
------------------------------------- :: inftappall
|= W , ∀ X . T1 ∘ T2 =>=> c

|= W , c $ BOT
------------------------------------- :: inftappbot
|= W , BOT ∘ T =>=> c

⌊ W ⌋ |- T2
|= W , c $ T2 , e <= T1
------------------------------------- :: infapparrow
|= W , T1 -> T2 • e =>=> c

|= W , c $ BOT
-------------------------------------------------- :: infappbot
|= W , BOT • e =>=> c

|= W , T1 • e =>=> c
-------------------------------------------------- :: infappintersection1
|= W , T1 * T2 • e =>=> c

|= W , T2 • e =>=> c
-------------------------------------------------- :: infappintersection2
|= W , T1 * T2 • e =>=> c

|= W , T1 • e =>=> c , T2 • e =>=> c
-------------------------------------------------- :: infappunion
|= W , T1 + T2 • e =>=> c

