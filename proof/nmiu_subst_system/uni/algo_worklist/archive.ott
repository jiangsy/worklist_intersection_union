formula :: formula_ ::=
  | aW1 ++ aW2       ::   :: app {{ coq ( awl_app [[aW2]] [[aW1]] )}}
  | aW1 ≺⁻ ( X : A ) ~ aW2 | aW3 ‖ E    ::   :: abrelb {{ coq (a_update_bound [[aW1]] [[E]] [[X]] [[A]] a_modeab_lower [[aW2]] [[aW3]])}}
  | aW1 ≺⁺ ( X : A ) ~ aW2 | aW3 ‖ E    ::   :: abreub {{ coq (a_update_bound [[aW1]] [[E]] [[X]] [[A]] a_modeab_upper [[aW2]] [[aW3]])}}
  | aW1 ≺± ( X : A ) ~ aW2 | aW3 ‖ E    ::   :: abrebb {{ coq (a_update_bound [[aW1]] [[E]] [[X]] [[A]] a_modeab_both [[aW2]] [[aW3]])}}
  | ¬smono aE A                         ::   :: nsmono {{ coq ( a_smono_typ [[aE]] [[A]] -> False )}}


defns
Jaworklist_reduction :: '' ::=

defn
|= aW :: :: a_wl_red :: 'a__wlred__' by

|= aW
------------------ :: gc_var
|= aW , x : A

|= aW
------------------ :: gc_tvar
|= aW , X : ■

|= aW
------------------ :: gc_stvar
|= aW , X : ~■

|= aW , A <: B
------------------ :: gc_etvar
|= aW , X : A < B

|= aW
------------------ :: sub_top
|= aW , B1 <: TOP

|= aW
------------------- :: sub_bot
|= aW , BOT <: A

|= aW
------------------- :: sub_unit
|= aW , UNIT <: UNIT

|= aW
----------------- :: sub_tvar
|= aW , X <: X

|= aW , A1 <: B1 , B2 <: A2
------------------------------ :: subarrow
|= aW , B1 -> B2 <: A1 -> A2

A1 ¬= ∀
A1 ¬= ⊓
A1 ¬= ⊔
|= aW , X : BOT < TOP , B1 <: A1
------------------------------------------------- :: sub_alll
|= aW , ∀ X . B1 <: A1

|= aW , X : ~■ , B1 <: A1
------------------------------------------------- :: sub_all
|= aW , ∀ X . B1 <: ∀ X . A1

(X : B1 < B2) in ⌊ aW ⌋
¬smono ⌊ aW ⌋ (A1 -> A2)
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺⁺ ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , X1 -> X2 <: A1 -> A2
--------------------------------------------------------------------------- :: sub_arrow1
|= aW , X <: A1 -> A2

(X : B1 < B2) in ⌊ aW ⌋
¬smono ⌊ aW ⌋ (A1 -> A2)
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺⁻ ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , A1 -> A2 <: X1 -> X2
--------------------------------------------------------------------------- :: sub_arrow2
|= aW , A1 -> A2 <: X

(X : B1 < B2) in ⌊ aW ⌋
(Y : B3 < B4) in ⌊ aW ⌋
aW ≺⁻ ( X : Y ) ~ aW2 | aW3 ‖ E
aW [ X ] [ Y ]
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvar1
|= aW , Y <: X

(X : B1 < B2) in ⌊ aW ⌋
(Y : B3 < B4) in ⌊ aW ⌋
aW ≺⁺ ( X : Y ) ~ aW2 | aW3 ‖ E
aW [ X ] [ Y ]
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvar2
|= aW , X <: Y

(X : B1 < B2) in ⌊ aW ⌋
smono ⌊ aW ⌋ A1
aW ≺⁻ ( X : A1 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvarmono1
|= aW , A1 <: X

(X : A1 < A2) in ⌊ aW ⌋
smono ⌊ aW ⌋ B1
aW ≺⁺ ( X : B1 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 )
-------------------------------------------- :: sub_etvarmono2
|= aW , X <: B1

|= aW , A1 <: B1 , A1 <: B2
----------------------------- :: sub_intersection1
|= aW , A1 <: B1 ⊓ B2

|= aW , B1 <: A1
-------------------------- :: sub_intersection2
|= aW , B1 ⊓ B2 <: A1

|= aW , B2 <: A1
------------------------ :: sub_intersection3
|= aW , B1 ⊓ B2 <: A1

|= aW , B1 <: A1
------------------------ :: sub_union1
|= aW , B1 <: A1 ⊔ A2

|= aW , B1 <: A2
------------------------ :: sub_union2
|= aW , B1 <: A1 ⊔ A2

|= aW , B1 <: A1 , B2 <: A1
---------------------------- :: sub_union3
|= aW , B1 ⊔ B2 <: A1

|= aW , e => _ <: A1
------------------------ :: chk_sub
|= aW , e <= A1

% |= aW , X : ■ , e <= A1 
% ------------------------- :: chk_all
% |= aW , e <= ∀ X . A1    

|= aW , x : A1 , e <= A2
----------------------------- :: chk_absarrow
|= aW , \ x . e <= A1 -> A2    

(X : A1 < A2) in ⌊ aW ⌋
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺± ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , x : X1 , e <= X2
---------------------------------------------------------------------------- :: chk_absevar
|= aW , \ x . e <= X  

|= aW , x : BOT , e <= TOP 
---------------------------  :: chk_abstop
|= aW , \ x . e <= TOP

|= aW , e <= A1 , e <= A2
---------------------------  :: chk_inter
|= aW , e <= A1 ⊓ A2 

|= aW , e <= A1 
---------------------------  :: chk_union1
|= aW , e <= A1 ⊔ A2 

|= aW , e <= A2
---------------------------  :: chk_union2
|= aW , e <= A1 ⊔ A2 

(x : A) in ⌊ aW ⌋ 
|= aW , c $ A
-------------------------- :: inf_var
|= aW , x => c

|= aW , c $ A , e <= A
-------------------------- :: inf_anno
|= aW , (e : A) => c

|= aW2 , c $ (∀ X . A) , X : ■ , e <= A
------------------------------------- :: inf_tabs
|= aW , \ X . e : A => c

|= aW , c $ UNIT
------------------------------------- :: inf_unit
|= aW , unit => c

|= aW , e1 => ( _ ▹ (_ • e2 =>=> c))
------------------------------------- :: inf_app
|= aW , (e1 e2) => c

|= aW , c $ A2 , e <= A1
------------------------------------- :: infapparrow
|= aW , A1 -> A2 • e =>=> c

|= aW , c $ A1 -> B1
--------------------------------------------------------------------------- :: infabs_arr
|= aW , A1 -> B1 ▹ c

(X : A1 < A2) in ⌊ aW ⌋
aW , X1 : BOT < TOP, X2 : BOT < TOP ≺± ( X : X1 -> X2 ) ~ aW2 | aW3 ‖ E
|= ( aW2 ++ aW3 ) , X1 -> X2 ▹ c
--------------------------------------------------------------------------- :: infabs_evar
|= aW , X ▹ c

|= aW , TOP -> BOT ▹ c
-------------------------------------------------- :: infappbot
|= aW , BOT ▹ c

|= aW , A1 ▹ c
-------------------------------------------------- :: infabs_inter1
|= aW , A1 ⊓ A2 ▹ c

|= aW , A2 ▹ c
-------------------------------------------------- :: infabs_inter2
|= aW , A1 ⊓ A2 ▹ c

|= aW , A1 ▹ ( _ ⊔▹ A2 ▹ c )
-------------------------------------------------- :: infabs_union
|= aW , A1 ⊔ A2 ▹ c

|= aW , A2 ▹ ( _ ⊔▹ B1 -> C1 >> c )
-------------------------------------------------- :: infabsunion
|= aW , B1 -> C1 ⊔▹ A2 ▹ c

|= aW , c $ (B1 ⊓ B2) -> (C1 ⊔ C2)
-------------------------------------------------- :: unioninfabs
|= aW , B2 -> C2 ⊔▹ B1 -> C1 >> c 

|= aW , e => _ ○ B =>=> c
------------------------------------- :: inf_tapp
|= aW , e @ B => c

|= aW , c $ {B / X} A
------------------------------------- :: inftapp_all
|= aW , ∀ X . A ○ B =>=> c

|= aW , c $ BOT
------------------------------------- :: inftapp_bot
|= aW , BOT ○ B =>=> c

|= aW , A1 ○ B =>=> c
-------------------------------------------------- :: inftapp_inter1
|= aW , A1 ⊓ A2 ○ B =>=> c

|= aW , A2 ○ B =>=> c
-------------------------------------------------- :: inftapp_inter2
|= aW , A1 ⊓ A2 ○ B =>=> c

|= aW , A1 ○ B =>=> ( _ ⊔∘ A2 ○ B =>=> c )
-------------------------------------------------- :: inftapp_union
|= aW , A1 ⊔ A2 ○ B =>=> c

|= aW , A2 ○ B =>=> ( _ ⊔∘ C1 >> c)
-------------------------------------------------- :: inftappunion
|= aW , C1 ⊔∘ A2 ○ B =>=> c

|= aW , c $ C1 ⊔ C2
-------------------------------------------------- :: unioninftapp
|= aW , C2 ⊔∘ C1 >> c
