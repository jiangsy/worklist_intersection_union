
metavar var, x, y, z ::= {{ repr-locally-nameless }}


grammar

context, G :: 'ld_ctx_' ::=
  | nil       :: :: nil
  | G , x :: :: cons

type, t, A, B :: 'la_t_' ::= 
    | int :: :: int
    | forall x . t :: :: forall (+ bind x in t +)
    | t1 -> t2 :: :: arrow
    | x :: :: var
    | ( t ) :: S :: paren {{ coq [[t]] }} 
    | [ t1 / x ] t2 :: M :: susbt{{ coq (tsubst_t [[t1]] [[x]] [[t2]])}}

formula :: formula_ ::=
  | judgement  ::   :: judgement
  | x # G      :: M :: ctx_fresh {{ coq ([[x]] `notin` [[G]]) }}

substitutions
  single t x :: tsubst

freevars
  type    x :: fv


defns
Monotype :: '' ::=

defn
mono A :: :: mono_type :: 'mono_'
by

--------------- :: int
mono int

--------------- :: var
mono x

mono t1
mono t2
--------------- :: arrow
mono t1 -> t2


defns
InContext :: '' ::=

defn
x in G :: :: in_ctx :: 'in_'
by

------------------ :: here
x in G, x

x in G
------------------ :: there
x in G, y 


defns
DeclarativeSubtyping :: '' ::=

defn
|- G :: :: wf_context :: 'wf_ctx_'
by

---------- :: nil
|- nil

|- G
x # G
---------- :: cons
|- G , x

defn
G |- t  :: :: wf_type :: 'wf_typ_'
by

|- G
---------------- :: int
G |- int

|- G
x in G 
---------------- :: var
G |- x

|- G
G |- t1 
G |- t2 
---------------- :: arrow
G |- t1 -> t2


defn
G |- t1 <: t2 :: :: dsub :: 's_'
by

x in G
------------------- :: var
G |- x <: x

------------------- :: int
G |- int <: int


G |- B1 <: A1
G |- A2 <: A2
------------------- :: arrow
G |- A1 -> A2 <: B1 -> B2

G |- t
G |- [ t / x ] A <: B
------------------- :: forallL
G |- forall x. A <: B


G, x |- A <: B
------------------- :: forallR
G |- A <: forall x. B