metavar typvar, X, Y, Z ::= {{ repr-locally-nameless }}
metavar expvar, x, y, z ::= {{ repr-locally-nameless }}

grammar

ftyp, A, B, C :: ftyp_ ::=
  | UNIT           ::   :: unit
  | X              ::   :: var
  | A1 -> A2       ::   :: arrow
  | ∀ X . A        ::   :: all  (+ bind X in A +)
  | A1 + A2        ::   :: sum
  | A1 × A2        ::   :: prod
  | ( A )          :: S :: paren {{ coq ([[A]]) }}
  | { A2 / X } A1  :: M :: subst {{ coq (open_ftyp_wrt_ftyp [[X A1]] [[A2]]) }}

fexp, e, f, g :: fexp_ ::=
  | unit                                ::   :: unit
  | x                                   ::   :: var
  | \ x : A . e                         ::   :: abs  (+ bind x in e +)
  | e1 e2                               ::   :: app
  | \ X . e                             ::   :: tabs (+ bind X in e +)
  | e @ A                               ::   :: tapp
%   | let x = e1 in e2                    ::   :: let (+ bind x in e2 +)
  | inl e                               ::   :: inl
  | inr e                               ::   :: inr
  | case e of inl x -> e2 | inr y -> e3 ::   :: case (+ bind x in e2 +) (+ bind y in e3 +)
  | proj1 e                             ::   :: proj1
  | proj2 e                             ::   :: proj2
  | < e1 , e2 >                         ::   :: pair
  | ( e )                               :: S :: paren  {{ coq ([[e]]) }}
  | { e2 / x } e1                       :: M :: subst1 {{ coq (open_fexp_wrt_fexp [[x e1]] [[e2]]) }}
  | { A2 / X } e1                       :: M :: subst2 {{ coq (open_fexp_wrt_ftyp [[X e1]] [[A2]]) }}

fbind, fb :: fbind_ ::=
  | : □  ::   :: tvar_empty
  | : A  ::   :: typ

substitutions
  single A X :: subst_typ_in
  single e x :: subst_exp_in

freevars
  A X :: ftvar_in
  e x :: fvar_in

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

grammar

fenv, fE, F, G :: '' ::= {{ coq list (atom*fbind) }}
  | empty   ::   :: empty {{ coq nil }}
  | fE , x fb ::   :: cons1 {{ coq ([[x]]~[[fb]] ++ [[fE]]) }}
  | fE , X fb ::   :: cons2 {{ coq ([[X]]~[[fb]] ++ [[fE]]) }}

fvalue, v :: fvalue_ ::=
  | \ x : A . e  ::   :: abs  (+ bind x in e +)
  | \ X . e      ::   :: tabs (+ bind X in e +)
  | inl v        ::   :: inl
  | inr v        ::   :: inr
  | < v1 , v2 >  ::   :: pair

formula :: formula_ ::=
  | judgement       ::   :: judgement
  | ( x fb ) in fE    ::   :: binds1 {{ coq binds ([[x]]) ([[fb]]) ([[fE]]) }}
  | ( X fb ) in fE    ::   :: binds2 {{ coq binds ([[X]]) ([[fb]]) ([[fE]]) }}
  | uniq fE          ::   :: uniq   {{ coq uniq ([[fE]]) }}
  | x `notin` dom fE ::   :: fresh1 {{ coq ([[x]] `notin` dom ([[fE]])) }}
  | X `notin` dom fE ::   :: fresh2 {{ coq ([[X]] `notin` dom ([[fE]])) }}

subrules
  v <:: e

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_wf_typ :: '' ::=

defn
fE |- A :: :: f_wf_typ :: 'f_wf_typ__' by

--------- :: unit
fE |- UNIT

(X : □) in fE
-------------- :: tvar
fE |- X

fE |- A1
fE |- A2
-------------- :: arrow
fE |- A1 -> A2

fE, X : □ |- A
-------------------- :: all
fE |- ∀ X . A

fE |- A1
fE |- A2
------------- :: sum
fE |- A1 + A2

fE |- A1
fE |- A2
------------- :: prod
fE |- A1 × A2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_f_wf_env :: '' ::=

defn
|- fE :: :: f_wf_env :: 'f_wf_env__' by

--------- :: empty
|- empty

|- fE
X `notin` dom fE
---------------- :: sub
|- fE , X : □

|- fE
fE |- A
x `notin` dom fE
---------------- :: typ
|- fE , x : A

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% defns
% Jsub :: '' ::=

% defn
% fE |- A1 <: A2 :: :: sub :: 'sub_' by

% |- fE
% fE |- S
% -------------- :: top
% fE |- S <: top

% |- fE
% fE |- X
% ------------ :: refl_tvar
% fE |- X <: X

% fE |- A1 <: S1
% fE |- S2 <: A2
% -------------------------- :: arrow
% fE |- S1 -> S2 <: A1 -> A2

% fE, X |- A1 <: A2
% ---------------------------- :: all
% fE |- ∀ X . A1 <: ∀ X . A2

% fE |- S1 <: A1
% fE |- S2 <: A2
% ------------------------ :: sum
% fE |- S1 + S2 <: A1 + A2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_f_typing :: '' ::=

defn
fE |- e : A :: :: f_typing :: 'f_typing__' by

---------------- :: unit
fE |- unit : UNIT

|- fE
(x:A) in fE
----------- :: var
fE |- x : A

fE, x : A1 |- e : A2
--------------------------- :: abs
fE |- \x : A1. e : A1 -> A2

fE |- e1 : A1 -> A2
fE |- e2 : A1
--------------------- :: app
fE |- e1 e2 : A2

fE, X : □ |- e : A
-------------------------- :: tabs
fE |- \ X . e : ∀ X . A

fE |- e1 : ∀ X . A1
--------------------------- :: tapp
fE |- e1 @ A2 : {A2 / X} A1

% fE |- e : S
% fE |- S <: A
% ------------ :: sub
% fE |- e : A

% fE |- e1 : A1
% fE, x : A1 |- e2 : A2
% --------------------------- :: let
% fE |- let x = e1 in e2 : A2

fE |- e1 : A1
fE |- A2
---------------------- :: inl
fE |- inl e1 : A1 + A2

fE |- e1 : A2
fE |- A1
---------------------- :: inr
fE |- inr e1 : A1 + A2

fE |- e1 : A1 + A2
fE, x : A1 |- e2 : A
fE, y : A2 |- e3 : A
---------------------------------------------- :: case
fE |- case e1 of inl x -> e2 | inr y -> e3 : A

fE |- e1 : A1
fE |- e2 : A2
---------------------------------------------- :: pair
fE |- < e1 , e2 > : A1 × A2

fE |- e : A1 × A2
-------------------- :: proj1
fE |- proj1 e : A1

fE |- e : A1 × A2
-------------------- :: proj2
fE |- proj2 e : A2

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

defns
J_f_exp_red :: '' ::=

defn
e1 --> e2 :: :: f_exp_red :: 'f_exp_red__' by

e1 --> e1'
----------------- :: app_1
e1 e2 --> e1' e2

e2 --> e2'
----------------- :: app_2
v1 e2 --> v1 e2'

e1 --> e1'
----------------------- :: tapp_1
e1 @ A --> e1' @ A

------------------------------- :: abs
(\x:A. e1) v2  --> {v2 / x} e1

------------------------------------ :: tabs
(\X . e1) @ A2  --> {A2 / X} e1

% e1 --> e1'
% --------------------------------------- :: let_1
% let x = e1 in e2 --> let x = e1' in e2

% --------------------------------- :: let
% let x = v1 in e2 --> {v1 / x} e2

e1 --> e1'
------------------- :: inl_1
inl e1 --> inl e1'

e1 --> e1'
------------------- :: inr_1
inr e1 --> inr e1'

e1 --> e1'
------------------------------------------------------------------------------- :: case_1
case e1 of inl x -> e2 | inr y -> e3 --> case e1' of inl x -> e2 | inr y -> e3

--------------------------------------------------------- :: case_inl
case inl v1 of inl x -> e2 | inr y -> e3 --> {v1 / x} e2

--------------------------------------------------------- :: case_inr
case inr v1 of inl x -> e2 | inr y -> e3 --> {v1 / y} e3

-------------------------------------- :: proj1_v
proj1 < v1 , v2 > --> v1

-------------------------------------- :: proj2_v
proj2 < v1 , v2 > --> v2

e --> e'
-------------------------------------- :: proj1
proj1 e --> proj1 e'

e --> e'
-------------------------------------- :: proj2
proj2 e --> proj2 e'

e1 --> e1'
-------------------------------------- :: pair1
< e1 , e2 > --> < e1' , e2 >

e2 --> e2'
-------------------------------------- :: pair2
< e1 , e2 > --> < e1 , e2' >